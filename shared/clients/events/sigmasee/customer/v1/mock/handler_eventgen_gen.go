// Code generated by MockGen. DO NOT EDIT.
// Source: handler_eventgen.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/sigmasee/sigmasee/shared/clients/events/sigmasee/customer/v1"
)

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockSubscriber) Handle(ctx context.Context, topic string, key []byte, headers map[string][]byte, event *v1.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, topic, key, headers, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockSubscriberMockRecorder) Handle(ctx, topic, key, headers, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockSubscriber)(nil).Handle), ctx, topic, key, headers, event)
}
