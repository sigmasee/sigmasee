// Package apexinvestorsv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package apexinvestorsv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AddressesResponse defines model for AddressesResponse.
type AddressesResponse struct {
	Items *[]InvestorAddress `json:"items"`
}

// EmailAddressesResponse defines model for EmailAddressesResponse.
type EmailAddressesResponse struct {
	Items *[]InvestorEmailAddress `json:"items"`
}

// InvestmentInvestorsResponse defines model for InvestmentInvestorsResponse.
type InvestmentInvestorsResponse struct {
	Items *[]InvestorDetail `json:"items"`
}

// Investor defines model for Investor.
type Investor struct {
	FirstName    *string             `json:"firstName"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	InvestorCode *string             `json:"investorCode"`
	LastName     *string             `json:"lastName"`
	MasterClient *string             `json:"masterClient"`
	Status       *string             `json:"status"`
	Title        *string             `json:"title"`
	Type         *string             `json:"type"`
}

// InvestorAddress defines model for InvestorAddress.
type InvestorAddress struct {
	AddressLine1 *string `json:"addressLine1"`
	AddressLine2 *string `json:"addressLine2"`
	AddressLine3 *string `json:"addressLine3"`
	AddressLine4 *string `json:"addressLine4"`
	City         *string `json:"city"`
	Country      *string `json:"country"`
	IsPrimary    *bool   `json:"isPrimary,omitempty"`
	PostalCode   *string `json:"postalCode"`
	Region       *string `json:"region"`
	State        *string `json:"state"`
}

// InvestorDetail defines model for InvestorDetail.
type InvestorDetail struct {
	AmlEntityType *string             `json:"amlEntityType"`
	DateOfBirth   *time.Time          `json:"dateOfBirth"`
	FirstName     *string             `json:"firstName"`
	Gender        *string             `json:"gender"`
	Greeting      *string             `json:"greeting"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	InvestorCode  *string             `json:"investorCode"`
	IrdNumber     *string             `json:"irdNumber"`
	LastName      *string             `json:"lastName"`
	MasterClient  *string             `json:"masterClient"`
	Metadata      *interface{}        `json:"metadata"`
	MiddleName    *string             `json:"middleName"`
	Name          *string             `json:"name"`
	Status        *string             `json:"status"`
	Title         *string             `json:"title"`
	Type          *string             `json:"type"`
}

// InvestorEmailAddress defines model for InvestorEmailAddress.
type InvestorEmailAddress struct {
	EmailAddress *string             `json:"emailAddress"`
	IsPrimary    *bool               `json:"isPrimary,omitempty"`
	UserId       *openapi_types.UUID `json:"userId"`
}

// InvestorPhoneNumber defines model for InvestorPhoneNumber.
type InvestorPhoneNumber struct {
	Country     *string `json:"country"`
	IsPrimary   *bool   `json:"isPrimary,omitempty"`
	PhoneNumber *string `json:"phoneNumber"`
}

// InvestorsPagedResponse defines model for InvestorsPagedResponse.
type InvestorsPagedResponse struct {
	Items  *[]Investor `json:"items"`
	Paging *Paging     `json:"paging,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	After  *string `json:"after"`
	Before *string `json:"before"`
	Total  *int32  `json:"total,omitempty"`
}

// PhoneNumbersResponse defines model for PhoneNumbersResponse.
type PhoneNumbersResponse struct {
	Items *[]InvestorPhoneNumber `json:"items"`
}

// PrescribedInvestorRateResponse defines model for PrescribedInvestorRateResponse.
type PrescribedInvestorRateResponse struct {
	Rate *float64 `json:"rate,omitempty"`
}

// GetInvestmentPrescribedInvestorRateParams defines parameters for GetInvestmentPrescribedInvestorRate.
type GetInvestmentPrescribedInvestorRateParams struct {
	// Date The date for which the prescribed investor rate will be retrieved.
	Date *time.Time `form:"date,omitempty" json:"date,omitempty"`
}

// GetPagedInvestorsParams defines parameters for GetPagedInvestors.
type GetPagedInvestorsParams struct {
	// Limit The maximum number of objects that may be returned. Defaults to the maximum of 1000. A result list with fewer items than the specified limit is not a guarantee that the end of the data has been reached. To determine if another page exists, check for a \"before\" or \"after\" value on the response. \"Before\" indicates a previous page exists and \"after\" indicates a subsequent page exists.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// After If provided, the page returned will begin with the item after this one. To page forwards, you can set this value to the \"after\" property of a previous response. This parameter is mutually exclusive with the before parameter.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before If provided, the page returned will end with the item before this one. To page backwards, you can set this value to the \"before\" property of a previous response. This parameter is mutually exclusive with the after parameter.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Search If provided, the results will be filtered to investors where the first or last names contain the search term
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// InvestorCode If provided, the results will be filtered to investors where the invester code contain the search term
	InvestorCode *string `form:"InvestorCode,omitempty" json:"InvestorCode,omitempty"`
}

// GetInvestorPrescribedInvestorRateParams defines parameters for GetInvestorPrescribedInvestorRate.
type GetInvestorPrescribedInvestorRateParams struct {
	// Date The date for which the prescribed investor rate will be retrieved.
	Date *time.Time `form:"date,omitempty" json:"date,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetInvestmentInvestors request
	GetInvestmentInvestors(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvestmentPrescribedInvestorRate request
	GetInvestmentPrescribedInvestorRate(ctx context.Context, id openapi_types.UUID, params *GetInvestmentPrescribedInvestorRateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPagedInvestors request
	GetPagedInvestors(ctx context.Context, params *GetPagedInvestorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvestor request
	GetInvestor(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvestorAddresses request
	GetInvestorAddresses(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvestorEmailAddresses request
	GetInvestorEmailAddresses(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvestorPhoneNumbers request
	GetInvestorPhoneNumbers(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvestorPrescribedInvestorRate request
	GetInvestorPrescribedInvestorRate(ctx context.Context, id openapi_types.UUID, params *GetInvestorPrescribedInvestorRateParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetInvestmentInvestors(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvestmentInvestorsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvestmentPrescribedInvestorRate(ctx context.Context, id openapi_types.UUID, params *GetInvestmentPrescribedInvestorRateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvestmentPrescribedInvestorRateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPagedInvestors(ctx context.Context, params *GetPagedInvestorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPagedInvestorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvestor(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvestorRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvestorAddresses(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvestorAddressesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvestorEmailAddresses(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvestorEmailAddressesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvestorPhoneNumbers(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvestorPhoneNumbersRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvestorPrescribedInvestorRate(ctx context.Context, id openapi_types.UUID, params *GetInvestorPrescribedInvestorRateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvestorPrescribedInvestorRateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetInvestmentInvestorsRequest generates requests for GetInvestmentInvestors
func NewGetInvestmentInvestorsRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/investments/%s/investors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvestmentPrescribedInvestorRateRequest generates requests for GetInvestmentPrescribedInvestorRate
func NewGetInvestmentPrescribedInvestorRateRequest(server string, id openapi_types.UUID, params *GetInvestmentPrescribedInvestorRateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/investments/%s/prescribed-investor-rate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPagedInvestorsRequest generates requests for GetPagedInvestors
func NewGetPagedInvestorsRequest(server string, params *GetPagedInvestorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/investors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvestorCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InvestorCode", runtime.ParamLocationQuery, *params.InvestorCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvestorRequest generates requests for GetInvestor
func NewGetInvestorRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/investors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvestorAddressesRequest generates requests for GetInvestorAddresses
func NewGetInvestorAddressesRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/investors/%s/addresses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvestorEmailAddressesRequest generates requests for GetInvestorEmailAddresses
func NewGetInvestorEmailAddressesRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/investors/%s/email-addresses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvestorPhoneNumbersRequest generates requests for GetInvestorPhoneNumbers
func NewGetInvestorPhoneNumbersRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/investors/%s/phone-numbers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvestorPrescribedInvestorRateRequest generates requests for GetInvestorPrescribedInvestorRate
func NewGetInvestorPrescribedInvestorRateRequest(server string, id openapi_types.UUID, params *GetInvestorPrescribedInvestorRateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/investors/%s/prescribed-investor-rate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetInvestmentInvestorsWithResponse request
	GetInvestmentInvestorsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvestmentInvestorsResponse, error)

	// GetInvestmentPrescribedInvestorRateWithResponse request
	GetInvestmentPrescribedInvestorRateWithResponse(ctx context.Context, id openapi_types.UUID, params *GetInvestmentPrescribedInvestorRateParams, reqEditors ...RequestEditorFn) (*GetInvestmentPrescribedInvestorRateResponse, error)

	// GetPagedInvestorsWithResponse request
	GetPagedInvestorsWithResponse(ctx context.Context, params *GetPagedInvestorsParams, reqEditors ...RequestEditorFn) (*GetPagedInvestorsResponse, error)

	// GetInvestorWithResponse request
	GetInvestorWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvestorResponse, error)

	// GetInvestorAddressesWithResponse request
	GetInvestorAddressesWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvestorAddressesResponse, error)

	// GetInvestorEmailAddressesWithResponse request
	GetInvestorEmailAddressesWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvestorEmailAddressesResponse, error)

	// GetInvestorPhoneNumbersWithResponse request
	GetInvestorPhoneNumbersWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvestorPhoneNumbersResponse, error)

	// GetInvestorPrescribedInvestorRateWithResponse request
	GetInvestorPrescribedInvestorRateWithResponse(ctx context.Context, id openapi_types.UUID, params *GetInvestorPrescribedInvestorRateParams, reqEditors ...RequestEditorFn) (*GetInvestorPrescribedInvestorRateResponse, error)
}

type GetInvestmentInvestorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvestmentInvestorsResponse
}

// Status returns HTTPResponse.Status
func (r GetInvestmentInvestorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvestmentInvestorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvestmentPrescribedInvestorRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrescribedInvestorRateResponse
}

// Status returns HTTPResponse.Status
func (r GetInvestmentPrescribedInvestorRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvestmentPrescribedInvestorRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPagedInvestorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvestorsPagedResponse
}

// Status returns HTTPResponse.Status
func (r GetPagedInvestorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPagedInvestorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvestorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvestorDetail
}

// Status returns HTTPResponse.Status
func (r GetInvestorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvestorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvestorAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddressesResponse
}

// Status returns HTTPResponse.Status
func (r GetInvestorAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvestorAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvestorEmailAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailAddressesResponse
}

// Status returns HTTPResponse.Status
func (r GetInvestorEmailAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvestorEmailAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvestorPhoneNumbersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PhoneNumbersResponse
}

// Status returns HTTPResponse.Status
func (r GetInvestorPhoneNumbersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvestorPhoneNumbersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvestorPrescribedInvestorRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrescribedInvestorRateResponse
}

// Status returns HTTPResponse.Status
func (r GetInvestorPrescribedInvestorRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvestorPrescribedInvestorRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetInvestmentInvestorsWithResponse request returning *GetInvestmentInvestorsResponse
func (c *ClientWithResponses) GetInvestmentInvestorsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvestmentInvestorsResponse, error) {
	rsp, err := c.GetInvestmentInvestors(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvestmentInvestorsResponse(rsp)
}

// GetInvestmentPrescribedInvestorRateWithResponse request returning *GetInvestmentPrescribedInvestorRateResponse
func (c *ClientWithResponses) GetInvestmentPrescribedInvestorRateWithResponse(ctx context.Context, id openapi_types.UUID, params *GetInvestmentPrescribedInvestorRateParams, reqEditors ...RequestEditorFn) (*GetInvestmentPrescribedInvestorRateResponse, error) {
	rsp, err := c.GetInvestmentPrescribedInvestorRate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvestmentPrescribedInvestorRateResponse(rsp)
}

// GetPagedInvestorsWithResponse request returning *GetPagedInvestorsResponse
func (c *ClientWithResponses) GetPagedInvestorsWithResponse(ctx context.Context, params *GetPagedInvestorsParams, reqEditors ...RequestEditorFn) (*GetPagedInvestorsResponse, error) {
	rsp, err := c.GetPagedInvestors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPagedInvestorsResponse(rsp)
}

// GetInvestorWithResponse request returning *GetInvestorResponse
func (c *ClientWithResponses) GetInvestorWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvestorResponse, error) {
	rsp, err := c.GetInvestor(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvestorResponse(rsp)
}

// GetInvestorAddressesWithResponse request returning *GetInvestorAddressesResponse
func (c *ClientWithResponses) GetInvestorAddressesWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvestorAddressesResponse, error) {
	rsp, err := c.GetInvestorAddresses(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvestorAddressesResponse(rsp)
}

// GetInvestorEmailAddressesWithResponse request returning *GetInvestorEmailAddressesResponse
func (c *ClientWithResponses) GetInvestorEmailAddressesWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvestorEmailAddressesResponse, error) {
	rsp, err := c.GetInvestorEmailAddresses(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvestorEmailAddressesResponse(rsp)
}

// GetInvestorPhoneNumbersWithResponse request returning *GetInvestorPhoneNumbersResponse
func (c *ClientWithResponses) GetInvestorPhoneNumbersWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvestorPhoneNumbersResponse, error) {
	rsp, err := c.GetInvestorPhoneNumbers(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvestorPhoneNumbersResponse(rsp)
}

// GetInvestorPrescribedInvestorRateWithResponse request returning *GetInvestorPrescribedInvestorRateResponse
func (c *ClientWithResponses) GetInvestorPrescribedInvestorRateWithResponse(ctx context.Context, id openapi_types.UUID, params *GetInvestorPrescribedInvestorRateParams, reqEditors ...RequestEditorFn) (*GetInvestorPrescribedInvestorRateResponse, error) {
	rsp, err := c.GetInvestorPrescribedInvestorRate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvestorPrescribedInvestorRateResponse(rsp)
}

// ParseGetInvestmentInvestorsResponse parses an HTTP response from a GetInvestmentInvestorsWithResponse call
func ParseGetInvestmentInvestorsResponse(rsp *http.Response) (*GetInvestmentInvestorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvestmentInvestorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvestmentInvestorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetInvestmentPrescribedInvestorRateResponse parses an HTTP response from a GetInvestmentPrescribedInvestorRateWithResponse call
func ParseGetInvestmentPrescribedInvestorRateResponse(rsp *http.Response) (*GetInvestmentPrescribedInvestorRateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvestmentPrescribedInvestorRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrescribedInvestorRateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPagedInvestorsResponse parses an HTTP response from a GetPagedInvestorsWithResponse call
func ParseGetPagedInvestorsResponse(rsp *http.Response) (*GetPagedInvestorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPagedInvestorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvestorsPagedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetInvestorResponse parses an HTTP response from a GetInvestorWithResponse call
func ParseGetInvestorResponse(rsp *http.Response) (*GetInvestorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvestorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvestorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetInvestorAddressesResponse parses an HTTP response from a GetInvestorAddressesWithResponse call
func ParseGetInvestorAddressesResponse(rsp *http.Response) (*GetInvestorAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvestorAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddressesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetInvestorEmailAddressesResponse parses an HTTP response from a GetInvestorEmailAddressesWithResponse call
func ParseGetInvestorEmailAddressesResponse(rsp *http.Response) (*GetInvestorEmailAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvestorEmailAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailAddressesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetInvestorPhoneNumbersResponse parses an HTTP response from a GetInvestorPhoneNumbersWithResponse call
func ParseGetInvestorPhoneNumbersResponse(rsp *http.Response) (*GetInvestorPhoneNumbersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvestorPhoneNumbersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PhoneNumbersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetInvestorPrescribedInvestorRateResponse parses an HTTP response from a GetInvestorPrescribedInvestorRateWithResponse call
func ParseGetInvestorPrescribedInvestorRateResponse(rsp *http.Response) (*GetInvestorPrescribedInvestorRateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvestorPrescribedInvestorRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrescribedInvestorRateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4XzahfZq9UcAAAD//6LNu0A4LAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
