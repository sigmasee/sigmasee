// Package customerv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package customerv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// CustomerUpsertRequest defines model for customerUpsertRequest.
type CustomerUpsertRequest struct {
	Designation     *string              `json:"designation"`
	Email           *openapi_types.Email `json:"email"`
	EmailVerified   *bool                `json:"emailVerified"`
	FamilyName      *string              `json:"familyName"`
	GivenName       *string              `json:"givenName"`
	Locale          *string              `json:"locale"`
	MiddleName      *string              `json:"middleName"`
	Name            *string              `json:"name"`
	PhotoUrl        *string              `json:"photoUrl"`
	PhotoUrl192     *string              `json:"photoUrl192"`
	PhotoUrl24      *string              `json:"photoUrl24"`
	PhotoUrl32      *string              `json:"photoUrl32"`
	PhotoUrl48      *string              `json:"photoUrl48"`
	PhotoUrl512     *string              `json:"photoUrl512"`
	PhotoUrl72      *string              `json:"photoUrl72"`
	Timezone        *string              `json:"timezone"`
	Title           *string              `json:"title"`
	VerifiableToken string               `json:"verifiableToken"`
}

// CustomerUpsertResponse defines model for customerUpsertResponse.
type CustomerUpsertResponse struct {
	Id string `json:"id"`
}

// UpsertCustomerParams defines parameters for UpsertCustomer.
type UpsertCustomerParams struct {
	// XCorrelationId Correlation ID
	XCorrelationId string `json:"X-Correlation-Id"`

	// Authorization Authorization
	Authorization string `json:"Authorization"`

	// ApiKey API Key
	ApiKey string `json:"api-key"`
}

// UpsertCustomerJSONRequestBody defines body for UpsertCustomer for application/json ContentType.
type UpsertCustomerJSONRequestBody = CustomerUpsertRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// UpsertCustomerWithBody request with any body
	UpsertCustomerWithBody(ctx context.Context, params *UpsertCustomerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertCustomer(ctx context.Context, params *UpsertCustomerParams, body UpsertCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Liveness request
	Liveness(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessOutboxChangeFeed request
	ProcessOutboxChangeFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessOutboxChangeFeedWithParams request
	ProcessOutboxChangeFeedWithParams(ctx context.Context, date string, ndjsonId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Readiness request
	Readiness(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) UpsertCustomerWithBody(ctx context.Context, params *UpsertCustomerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertCustomerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertCustomer(ctx context.Context, params *UpsertCustomerParams, body UpsertCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertCustomerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Liveness(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLivenessRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessOutboxChangeFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessOutboxChangeFeedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessOutboxChangeFeedWithParams(ctx context.Context, date string, ndjsonId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessOutboxChangeFeedWithParamsRequest(c.Server, date, ndjsonId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Readiness(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadinessRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewUpsertCustomerRequest calls the generic UpsertCustomer builder with application/json body
func NewUpsertCustomerRequest(server string, params *UpsertCustomerParams, body UpsertCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertCustomerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpsertCustomerRequestWithBody generates requests for UpsertCustomer with any type of body
func NewUpsertCustomerRequestWithBody(server string, params *UpsertCustomerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer/api/v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Correlation-Id", runtime.ParamLocationHeader, params.XCorrelationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Correlation-Id", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "api-key", runtime.ParamLocationHeader, params.ApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("api-key", headerParam2)

	}

	return req, nil
}

// NewLivenessRequest generates requests for Liveness
func NewLivenessRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer/api/v1/liveness")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProcessOutboxChangeFeedRequest generates requests for ProcessOutboxChangeFeed
func NewProcessOutboxChangeFeedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer/api/v1/outbox-cdc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProcessOutboxChangeFeedWithParamsRequest generates requests for ProcessOutboxChangeFeedWithParams
func NewProcessOutboxChangeFeedWithParamsRequest(server string, date string, ndjsonId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ndjson_id", runtime.ParamLocationPath, ndjsonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer/api/v1/outbox-cdc/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadinessRequest generates requests for Readiness
func NewReadinessRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer/api/v1/readiness")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// UpsertCustomerWithBodyWithResponse request with any body
	UpsertCustomerWithBodyWithResponse(ctx context.Context, params *UpsertCustomerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertCustomerResponse, error)

	UpsertCustomerWithResponse(ctx context.Context, params *UpsertCustomerParams, body UpsertCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertCustomerResponse, error)

	// LivenessWithResponse request
	LivenessWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LivenessResponse, error)

	// ProcessOutboxChangeFeedWithResponse request
	ProcessOutboxChangeFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProcessOutboxChangeFeedResponse, error)

	// ProcessOutboxChangeFeedWithParamsWithResponse request
	ProcessOutboxChangeFeedWithParamsWithResponse(ctx context.Context, date string, ndjsonId string, reqEditors ...RequestEditorFn) (*ProcessOutboxChangeFeedWithParamsResponse, error)

	// ReadinessWithResponse request
	ReadinessWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReadinessResponse, error)
}

type UpsertCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CustomerUpsertResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpsertCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LivenessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r LivenessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LivenessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessOutboxChangeFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ProcessOutboxChangeFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessOutboxChangeFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessOutboxChangeFeedWithParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ProcessOutboxChangeFeedWithParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessOutboxChangeFeedWithParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadinessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ReadinessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadinessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// UpsertCustomerWithBodyWithResponse request with arbitrary body returning *UpsertCustomerResponse
func (c *ClientWithResponses) UpsertCustomerWithBodyWithResponse(ctx context.Context, params *UpsertCustomerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertCustomerResponse, error) {
	rsp, err := c.UpsertCustomerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertCustomerResponse(rsp)
}

func (c *ClientWithResponses) UpsertCustomerWithResponse(ctx context.Context, params *UpsertCustomerParams, body UpsertCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertCustomerResponse, error) {
	rsp, err := c.UpsertCustomer(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertCustomerResponse(rsp)
}

// LivenessWithResponse request returning *LivenessResponse
func (c *ClientWithResponses) LivenessWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LivenessResponse, error) {
	rsp, err := c.Liveness(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLivenessResponse(rsp)
}

// ProcessOutboxChangeFeedWithResponse request returning *ProcessOutboxChangeFeedResponse
func (c *ClientWithResponses) ProcessOutboxChangeFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProcessOutboxChangeFeedResponse, error) {
	rsp, err := c.ProcessOutboxChangeFeed(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessOutboxChangeFeedResponse(rsp)
}

// ProcessOutboxChangeFeedWithParamsWithResponse request returning *ProcessOutboxChangeFeedWithParamsResponse
func (c *ClientWithResponses) ProcessOutboxChangeFeedWithParamsWithResponse(ctx context.Context, date string, ndjsonId string, reqEditors ...RequestEditorFn) (*ProcessOutboxChangeFeedWithParamsResponse, error) {
	rsp, err := c.ProcessOutboxChangeFeedWithParams(ctx, date, ndjsonId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessOutboxChangeFeedWithParamsResponse(rsp)
}

// ReadinessWithResponse request returning *ReadinessResponse
func (c *ClientWithResponses) ReadinessWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReadinessResponse, error) {
	rsp, err := c.Readiness(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadinessResponse(rsp)
}

// ParseUpsertCustomerResponse parses an HTTP response from a UpsertCustomerWithResponse call
func ParseUpsertCustomerResponse(rsp *http.Response) (*UpsertCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CustomerUpsertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLivenessResponse parses an HTTP response from a LivenessWithResponse call
func ParseLivenessResponse(rsp *http.Response) (*LivenessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LivenessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProcessOutboxChangeFeedResponse parses an HTTP response from a ProcessOutboxChangeFeedWithResponse call
func ParseProcessOutboxChangeFeedResponse(rsp *http.Response) (*ProcessOutboxChangeFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessOutboxChangeFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProcessOutboxChangeFeedWithParamsResponse parses an HTTP response from a ProcessOutboxChangeFeedWithParamsWithResponse call
func ParseProcessOutboxChangeFeedWithParamsResponse(rsp *http.Response) (*ProcessOutboxChangeFeedWithParamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessOutboxChangeFeedWithParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadinessResponse parses an HTTP response from a ReadinessWithResponse call
func ParseReadinessResponse(rsp *http.Response) (*ReadinessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadinessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RW72/bNhD9V4jbPiqR7bTYpm9Z2gHGis3I2m1AEQyMeJLYSiRLHrO4hv73gaR/JJGd",
	"KfUGBOinOOQd37tH3jutoNSd0QoVOShW4MoGOx5/vrZW2/DDWG3QksS4XGqB4a9AV1ppSGoFRQpmcS+D",
	"StuOExQgFZ3NIANaGkz/Yo0W+gw6dI7XBw/abG9THVmpauj7DCx+8tKigOI9rAE34VfbeH39AUsKSKV3",
	"pDu074xDS5f4yaOjYVkCnawVTyxWoHzb8usWoSDrcUAjA+y4bEPktti0kkHHb9+gqqmB4uV0lo086ne0",
	"spKhqoPg11q3yFVIqXgn2+UvvMNRZGt5g2p0dKtL3o4L7aQQLY4+WY0NNI0m/c7eF9jbIO/o3OkPs2PS",
	"Zy+OyT47CvvF98dkv5weBf7dF2WT7PCzVuOulySNfGA3sS1CyFv9EWNrPu4IDxM2nTrGGpzRyuHQG6T4",
	"d1wp9kCEIKkqPbS5izU0u3z921t2vpjDVpXd3vlizm6mEFVwKW96OjmdBO7aoOJGQgFnp9PTCWRgODWR",
	"br6pK+dG5jfTWJBOphfKiiY3F1BAKnyDF8+wvENC66B4P+CsrcU2ZrP5KwilQQENchFzU3PDnyd34k7m",
	"Au7qlG45DZm9mj7EPPfUaCs/J2M+APkw6Bi8xZz9jMtDSNzIk49xezzGVQpGRz9qsUwjVBGqeB/cmFaW",
	"kXj+waXZszvqW4sVFPBNvhvS+XpC5/vnWn//XQZucSE97fg8ZpPp/0Zi3UGRxX1hBRKXrWO6YtQg8zEB",
	"BducADGj4r6l/4xd+oLZQ8YrvDVYBnxcx2TgfNdxu4QCSoucMPdGcMIdwwyI1y5+duyWQg9ehfSHXZe3",
	"Yeiii5rXuKf73mwCBhc0GRpGEK1B3lLDHHHy7jkJZpG8VWzI8YmSaU/X+vakFOVhz1pYXaJzv8bQi4ar",
	"Gn9CFKNFvHh1wUqtnO/i6jNUM7FDlkpkFIYZK2OlVap0j6hBs3HS5qvwrPt8pUSo5y8p+qi2Hy/2H5Ka",
	"RRgVbjgzom+GWbRzzYD3VFvec8yW79Pt96t4GOxvSQ27cx1f9FAsciEf9a3LbcRYabdnPm/vGtB8zL76",
	"/p8AAAD//1/p8Hc8DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
