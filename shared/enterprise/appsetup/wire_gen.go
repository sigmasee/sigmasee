// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package appsetup

import (
	"context"
	"github.com/go-co-op/gocron"
	"github.com/sigmasee/sigmasee/shared/enterprise/aws/ses"
	"github.com/sigmasee/sigmasee/shared/enterprise/configuration"
	context2 "github.com/sigmasee/sigmasee/shared/enterprise/context"
	"github.com/sigmasee/sigmasee/shared/enterprise/database"
	"github.com/sigmasee/sigmasee/shared/enterprise/database/postgres"
	kafka2 "github.com/sigmasee/sigmasee/shared/enterprise/messaging/kafka/kafka-go"
	"github.com/sigmasee/sigmasee/shared/enterprise/messaging/kafka/sarama"
	"github.com/sigmasee/sigmasee/shared/enterprise/os"
	"github.com/sigmasee/sigmasee/shared/enterprise/random"
	"github.com/sigmasee/sigmasee/shared/enterprise/security/token"
	"github.com/sigmasee/sigmasee/shared/enterprise/time"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func NewTimeHelper(logger *zap.SugaredLogger) (time.TimeHelper, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	timeHelper, err := time.NewTimeHelper(osHelper)
	if err != nil {
		return nil, err
	}
	return timeHelper, nil
}

func NewConfigurationHelper(logger *zap.SugaredLogger) (configuration.ConfigurationHelper, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	configurationHelper, err := configuration.NewConfigurationHelper(logger, osHelper)
	if err != nil {
		return nil, err
	}
	return configurationHelper, nil
}

func NewAwsSesHelper(logger *zap.SugaredLogger) (ses.AwsSesHelper, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	awsSesHelper, err := ses.NewAwsSesHelper(osHelper)
	if err != nil {
		return nil, err
	}
	return awsSesHelper, nil
}

func NewTokenService(ctx context.Context, logger *zap.SugaredLogger, cognitoConfig token.CognitoConfig, googleConfig token.GoogleConfig, slackConfig token.SlackConfig, jobScheduler *gocron.Scheduler) (token.TokenService, error) {
	cognitoTokenService, err := token.NewCognitoTokenService(ctx, logger, jobScheduler, cognitoConfig)
	if err != nil {
		return nil, err
	}
	googleTokenService, err := token.NewGoogleTokenService(googleConfig)
	if err != nil {
		return nil, err
	}
	slackTokenService, err := token.NewSlackTokenService(ctx, logger, jobScheduler, slackConfig)
	if err != nil {
		return nil, err
	}
	tokenService, err := token.NewTokenService(cognitoTokenService, googleTokenService, slackTokenService)
	if err != nil {
		return nil, err
	}
	return tokenService, nil
}

func NewContextHelper() (context2.ContextHelper, error) {
	contextHelper, err := context2.NewContextHelper()
	if err != nil {
		return nil, err
	}
	return contextHelper, nil
}

func NewDatabase(logger *zap.SugaredLogger, postgresConfig postgres.PostgresConfig, appConfig configuration.AppConfig) (database.Database, error) {
	databaseDatabase, err := postgres.NewPostgres(logger, appConfig, postgresConfig)
	if err != nil {
		return nil, err
	}
	return databaseDatabase, nil
}

func NewOsHelper() (os.OsHelper, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	return osHelper, nil
}

func NewSaramaKafkaClient(logger *zap.SugaredLogger, kafkaConfig kafka.SaramaKafkaConfig) (kafka.KafkaClient, error) {
	kafkaClient, err := kafka.NewSaramaKafkaClient(logger, kafkaConfig)
	if err != nil {
		return nil, err
	}
	return kafkaClient, nil
}

func NewKafkaGoKafkaClient(logger *zap.SugaredLogger, kafkaConfig kafka2.KafkaGoKafkaConfig) (kafka2.KafkaClient, error) {
	kafkaClient, err := kafka2.NewKafkaGoKafkaClient(logger, kafkaConfig)
	if err != nil {
		return nil, err
	}
	return kafkaClient, nil
}

func NewRandomHelper() (random.RandomHelper, error) {
	randomHelper, err := random.NewRandomHelper()
	if err != nil {
		return nil, err
	}
	return randomHelper, nil
}
