// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package appsetup

import (
	"github.com/sigmasee/sigmasee/shared/enterprise/os"
	"github.com/sigmasee/sigmasee/shared/sigmaseectl/services/generators"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func NewClientEventSchemaGeneratorService(logger *zap.SugaredLogger) (generators.ClientEventSchemaGeneratorService, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	clientEventSchemaGeneratorService, err := generators.NewClientEventSchemaGeneratorService(logger, osHelper)
	if err != nil {
		return nil, err
	}
	return clientEventSchemaGeneratorService, nil
}

func NewClientEventMetadataGeneratorService(logger *zap.SugaredLogger) (generators.ClientEventMetadataGeneratorService, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	clientEventMetadataGeneratorService, err := generators.NewClientEventMetadataGeneratorService(logger, osHelper)
	if err != nil {
		return nil, err
	}
	return clientEventMetadataGeneratorService, nil
}

func NewClientEventHandlerGeneratorService(logger *zap.SugaredLogger) (generators.ClientEventHandlerGeneratorService, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	clientEventHandlerGeneratorService, err := generators.NewClientEventHandlerGeneratorService(logger, osHelper)
	if err != nil {
		return nil, err
	}
	return clientEventHandlerGeneratorService, nil
}

func NewClientEventConsumerGeneratorService(logger *zap.SugaredLogger) (generators.ClientEventConsumerGeneratorService, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	clientEventConsumerGeneratorService, err := generators.NewClientEventConsumerGeneratorService(logger, osHelper)
	if err != nil {
		return nil, err
	}
	return clientEventConsumerGeneratorService, nil
}

func NewClientEventConsumerAwsLambdaGeneratorService(logger *zap.SugaredLogger) (generators.ClientEventConsumerAwsLambdaGeneratorService, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	clientEventConsumerAwsLambdaGeneratorService, err := generators.NewClientEventConsumerAwsLambdaGeneratorService(logger, osHelper)
	if err != nil {
		return nil, err
	}
	return clientEventConsumerAwsLambdaGeneratorService, nil
}

func NewClientEventProducerGeneratorService(logger *zap.SugaredLogger) (generators.ClientEventProducerGeneratorService, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	clientEventProducerGeneratorService, err := generators.NewClientEventProducerGeneratorService(logger, osHelper)
	if err != nil {
		return nil, err
	}
	return clientEventProducerGeneratorService, nil
}

func NewClientEventGenerateGeneratorService(logger *zap.SugaredLogger) (generators.ClientEventGenerateGeneratorService, error) {
	osHelper, err := os.NewOsHelper()
	if err != nil {
		return nil, err
	}
	clientEventGenerateGeneratorService, err := generators.NewClientEventGenerateGeneratorService(logger, osHelper)
	if err != nil {
		return nil, err
	}
	return clientEventGenerateGeneratorService, nil
}
