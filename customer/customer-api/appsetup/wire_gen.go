// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package appsetup

import (
	"github.com/sigmasee/sigmasee/customer/customer-api/graphql/v1"
	"github.com/sigmasee/sigmasee/customer/customer-api/http"
	mappers2 "github.com/sigmasee/sigmasee/customer/customer-api/mappers"
	"github.com/sigmasee/sigmasee/customer/customer-api/openapi"
	"github.com/sigmasee/sigmasee/customer/customer-api/services"
	"github.com/sigmasee/sigmasee/customer/shared/mappers"
	outbox2 "github.com/sigmasee/sigmasee/customer/shared/outbox"
	"github.com/sigmasee/sigmasee/customer/shared/publishers"
	"github.com/sigmasee/sigmasee/customer/shared/repositories"
	"github.com/sigmasee/sigmasee/shared/enterprise/appsetup"
	"github.com/sigmasee/sigmasee/shared/enterprise/configuration"
	"github.com/sigmasee/sigmasee/shared/enterprise/context"
	"github.com/sigmasee/sigmasee/shared/enterprise/messaging/kafka/kafka-go"
	"github.com/sigmasee/sigmasee/shared/enterprise/outbox"
	"github.com/sigmasee/sigmasee/shared/enterprise/security/token"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func NewHttpServer(logger *zap.SugaredLogger, appConfig configuration.AppConfig, outboxConfig outbox.OutboxConfig, intercomConfig configuration.IntercomConfig, entgoClient repositories.EntgoClient, tokenService token.TokenService, kafkaClient kafka.KafkaClient) (http.HttpServer, error) {
	contextHelper, err := context.NewContextHelper()
	if err != nil {
		return nil, err
	}
	mapper, err := mappers.NewMapper()
	if err != nil {
		return nil, err
	}
	identityRepository, err := repositories.NewIdentityRepository(entgoClient, mapper)
	if err != nil {
		return nil, err
	}
	customerRepository, err := repositories.NewCustomerRepository(entgoClient, mapper, identityRepository)
	if err != nil {
		return nil, err
	}
	customerSettingsRepository, err := repositories.NewCustomerSettingsRepository(entgoClient, mapper)
	if err != nil {
		return nil, err
	}
	randomHelper, err := appsetup.NewRandomHelper()
	if err != nil {
		return nil, err
	}
	outboxPublisher, err := outbox2.NewOutboxPublisher(logger, entgoClient, randomHelper)
	if err != nil {
		return nil, err
	}
	customerOutboxPublisher, err := publishers.NewCustomerOutboxPublisher(logger, appConfig, contextHelper, outboxPublisher, mapper, randomHelper)
	if err != nil {
		return nil, err
	}
	customerService, err := services.NewCustomerService(logger, contextHelper, entgoClient, intercomConfig, customerRepository, customerSettingsRepository, customerOutboxPublisher)
	if err != nil {
		return nil, err
	}
	mappersMapper, err := mappers2.NewMapper(randomHelper)
	if err != nil {
		return nil, err
	}
	graphQLServer, err := graphqlv1.NewGraphQLServer(logger, entgoClient, contextHelper, customerService, tokenService, mappersMapper)
	if err != nil {
		return nil, err
	}
	messageProducer, err := kafka.NewKafkaGoKafkaMessageProducer(logger, kafkaClient)
	if err != nil {
		return nil, err
	}
	outboxService, err := services.NewOutboxService(logger, outboxConfig, entgoClient, messageProducer)
	if err != nil {
		return nil, err
	}
	openApiCustomerV1, err := openapi.NewOpenApiCustomerV1(logger, contextHelper, customerService, outboxService, mappersMapper)
	if err != nil {
		return nil, err
	}
	httpServer, err := http.NewHttpServer(logger, appConfig, graphQLServer, openApiCustomerV1)
	if err != nil {
		return nil, err
	}
	return httpServer, nil
}
