// Package openapiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapiv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// CustomerUpsertRequest defines model for customerUpsertRequest.
type CustomerUpsertRequest struct {
	Designation     *string              `json:"designation"`
	Email           *openapi_types.Email `json:"email"`
	EmailVerified   *bool                `json:"emailVerified"`
	FamilyName      *string              `json:"familyName"`
	GivenName       *string              `json:"givenName"`
	Locale          *string              `json:"locale"`
	MiddleName      *string              `json:"middleName"`
	Name            *string              `json:"name"`
	PhotoUrl        *string              `json:"photoUrl"`
	PhotoUrl192     *string              `json:"photoUrl192"`
	PhotoUrl24      *string              `json:"photoUrl24"`
	PhotoUrl32      *string              `json:"photoUrl32"`
	PhotoUrl48      *string              `json:"photoUrl48"`
	PhotoUrl512     *string              `json:"photoUrl512"`
	PhotoUrl72      *string              `json:"photoUrl72"`
	Timezone        *string              `json:"timezone"`
	Title           *string              `json:"title"`
	VerifiableToken string               `json:"verifiableToken"`
}

// CustomerUpsertResponse defines model for customerUpsertResponse.
type CustomerUpsertResponse struct {
	Id string `json:"id"`
}

// UpsertCustomerParams defines parameters for UpsertCustomer.
type UpsertCustomerParams struct {
	// XCorrelationId Correlation ID
	XCorrelationId string `json:"X-Correlation-Id"`

	// Authorization Authorization
	Authorization string `json:"Authorization"`

	// ApiKey API Key
	ApiKey string `json:"api-key"`
}

// UpsertCustomerJSONRequestBody defines body for UpsertCustomer for application/json ContentType.
type UpsertCustomerJSONRequestBody = CustomerUpsertRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// create/update customer
	// (POST /customer/api/v1)
	UpsertCustomer(w http.ResponseWriter, r *http.Request, params UpsertCustomerParams)
	// return the health status
	// (GET /customer/api/v1/liveness)
	Liveness(w http.ResponseWriter, r *http.Request)
	// consume Outbox table changefeed
	// (POST /customer/api/v1/outbox-cdc)
	ProcessOutboxChangeFeed(w http.ResponseWriter, r *http.Request)
	// consume Outbox table changefeed with parameters
	// (PUT /customer/api/v1/outbox-cdc/{date}/{ndjson_id})
	ProcessOutboxChangeFeedWithParams(w http.ResponseWriter, r *http.Request, date string, ndjsonId string)
	// return the readiness status
	// (GET /customer/api/v1/readiness)
	Readiness(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// create/update customer
// (POST /customer/api/v1)
func (_ Unimplemented) UpsertCustomer(w http.ResponseWriter, r *http.Request, params UpsertCustomerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// return the health status
// (GET /customer/api/v1/liveness)
func (_ Unimplemented) Liveness(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// consume Outbox table changefeed
// (POST /customer/api/v1/outbox-cdc)
func (_ Unimplemented) ProcessOutboxChangeFeed(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// consume Outbox table changefeed with parameters
// (PUT /customer/api/v1/outbox-cdc/{date}/{ndjson_id})
func (_ Unimplemented) ProcessOutboxChangeFeedWithParams(w http.ResponseWriter, r *http.Request, date string, ndjsonId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// return the readiness status
// (GET /customer/api/v1/readiness)
func (_ Unimplemented) Readiness(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UpsertCustomer operation middleware
func (siw *ServerInterfaceWrapper) UpsertCustomer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpsertCustomerParams

	headers := r.Header

	// ------------- Required header parameter "X-Correlation-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Correlation-Id")]; found {
		var XCorrelationId string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Correlation-Id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Correlation-Id", runtime.ParamLocationHeader, valueList[0], &XCorrelationId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Correlation-Id", Err: err})
			return
		}

		params.XCorrelationId = XCorrelationId

	} else {
		err := fmt.Errorf("Header parameter X-Correlation-Id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-Correlation-Id", Err: err})
		return
	}

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Required header parameter "api-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("api-key")]; found {
		var ApiKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "api-key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "api-key", runtime.ParamLocationHeader, valueList[0], &ApiKey)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "api-key", Err: err})
			return
		}

		params.ApiKey = ApiKey

	} else {
		err := fmt.Errorf("Header parameter api-key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "api-key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertCustomer(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Liveness operation middleware
func (siw *ServerInterfaceWrapper) Liveness(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Liveness(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessOutboxChangeFeed operation middleware
func (siw *ServerInterfaceWrapper) ProcessOutboxChangeFeed(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessOutboxChangeFeed(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessOutboxChangeFeedWithParams operation middleware
func (siw *ServerInterfaceWrapper) ProcessOutboxChangeFeedWithParams(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "date" -------------
	var date string

	err = runtime.BindStyledParameterWithLocation("simple", false, "date", runtime.ParamLocationPath, chi.URLParam(r, "date"), &date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	// ------------- Path parameter "ndjson_id" -------------
	var ndjsonId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ndjson_id", runtime.ParamLocationPath, chi.URLParam(r, "ndjson_id"), &ndjsonId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ndjson_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessOutboxChangeFeedWithParams(w, r, date, ndjsonId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Readiness operation middleware
func (siw *ServerInterfaceWrapper) Readiness(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Readiness(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/customer/api/v1", wrapper.UpsertCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/customer/api/v1/liveness", wrapper.Liveness)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/customer/api/v1/outbox-cdc", wrapper.ProcessOutboxChangeFeed)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/customer/api/v1/outbox-cdc/{date}/{ndjson_id}", wrapper.ProcessOutboxChangeFeedWithParams)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/customer/api/v1/readiness", wrapper.Readiness)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RW72/bNhD9V4jbPiqR7bTYpm9Z2gHGis3I2m1AEQyMeJLYSiRLHrO4hv73gaR/JJGd",
	"KfUGBOinOOQd37tH3jutoNSd0QoVOShW4MoGOx5/vrZW2/DDWG3QksS4XGqB4a9AV1ppSGoFRQpmcS+D",
	"StuOExQgFZ3NIANaGkz/Yo0W+gw6dI7XBw/abG9THVmpauj7DCx+8tKigOI9rAE34VfbeH39AUsKSKV3",
	"pDu074xDS5f4yaOjYVkCnawVTyxWoHzb8usWoSDrcUAjA+y4bEPktti0kkHHb9+gqqmB4uV0lo086ne0",
	"spKhqoPg11q3yFVIqXgn2+UvvMNRZGt5g2p0dKtL3o4L7aQQLY4+WY0NNI0m/c7eF9jbIO/o3OkPs2PS",
	"Zy+OyT47CvvF98dkv5weBf7dF2WT7PCzVuOulySNfGA3sS1CyFv9EWNrPu4IDxM2nTrGGpzRyuHQG6T4",
	"d1wp9kCEIKkqPbS5izU0u3z921t2vpjDVpXd3vlizm6mEFVwKW96OjmdBO7aoOJGQgFnp9PTCWRgODWR",
	"br6pK+dG5jfTWJBOphfKiiY3F1BAKnyDF8+wvENC66B4P+CsrcU2ZrP5KwilQQENchFzU3PDnyd34k7m",
	"Au7qlG45DZm9mj7EPPfUaCs/J2M+APkw6Bi8xZz9jMtDSNzIk49xezzGVQpGRz9qsUwjVBGqeB/cmFaW",
	"kXj+waXZszvqW4sVFPBNvhvS+XpC5/vnWn//XQZucSE97fg8ZpPp/0Zi3UGRxX1hBRKXrWO6YtQg8zEB",
	"BducADGj4r6l/4xd+oLZQ8YrvDVYBnxcx2TgfNdxu4QCSoucMPdGcMIdwwyI1y5+duyWQg9ehfSHXZe3",
	"Yeiii5rXuKf73mwCBhc0GRpGEK1B3lLDHHHy7jkJZpG8VWzI8YmSaU/X+vakFOVhz1pYXaJzv8bQi4ar",
	"Gn9CFKNFvHh1wUqtnO/i6jNUM7FDlkpkFIYZK2OlVap0j6hBs3HS5qvwrPt8pUSo5y8p+qi2Hy/2H5Ka",
	"RRgVbjgzom+GWbRzzYD3VFvec8yW79Pt96t4GOxvSQ27cx1f9FAsciEf9a3LbcRYabdnPm/vGtB8zL76",
	"/p8AAAD//1/p8Hc8DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
