package graphqlv1

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"time"

	"github.com/sigmasee/sigmasee/customer/customer-api/graphql/v1/generated"
	"github.com/sigmasee/sigmasee/customer/customer-api/graphql/v1/models"
	enterpriseerrors "github.com/sigmasee/sigmasee/shared/enterprise/errors"
)

// CustomerVersion is the resolver for the customerVersion field.
func (r *queryResolver) CustomerVersion(ctx context.Context) (*models.Version, error) {
	start := time.Now()
	defer func(start time.Time) {
		r.logger.Infof("CustomerVersion - Execution time: %s", time.Since(start))
	}(start)

	return &models.Version{
		Major: "0",
		Minor: "1",
		Patch: "0",
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (customerDetails *models.CustomerDetails, err error) {
	start := time.Now()
	defer func(start time.Time) {
		r.logger.Infof("Me - Execution time: %s", time.Since(start))
	}(start)

	defer func() {
		if err != nil {
			r.logger.Errorf("Failed to excecute Me query. Error: %v", err)
		}
	}()

	ctx, err = r.addRequiredAttributesToContext(ctx)
	if err != nil {
		return
	}

	customer, err := r.customerService.GetMe(ctx)
	if err == enterpriseerrors.ErrCustomerNotFound {
		customerDetails = nil
		err = nil

		return
	} else if err != nil {
		return
	}

	customerDetails = r.mapper.CustomerToGraphQLCustomerDetails(customer)

	return
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
