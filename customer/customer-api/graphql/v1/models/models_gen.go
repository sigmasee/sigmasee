// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/sigmasee/sigmasee/customer/shared/entities"
)

type CustomerDetails struct {
	ID           string                    `json:"id"`
	CreatedAt    time.Time                 `json:"createdAt"`
	IntercomHash *string                   `json:"intercomHash,omitempty"`
	Email        *CustomerEmail            `json:"email,omitempty"`
	Designation  *string                   `json:"designation,omitempty"`
	Title        *string                   `json:"title,omitempty"`
	Name         *string                   `json:"name,omitempty"`
	GivenName    *string                   `json:"givenName,omitempty"`
	MiddleName   *string                   `json:"middleName,omitempty"`
	FamilyName   *string                   `json:"familyName,omitempty"`
	PhotoURL     *string                   `json:"photoUrl,omitempty"`
	PhotoURL24   *string                   `json:"photoUrl24,omitempty"`
	PhotoURL32   *string                   `json:"photoUrl32,omitempty"`
	PhotoURL48   *string                   `json:"photoUrl48,omitempty"`
	PhotoURL72   *string                   `json:"photoUrl72,omitempty"`
	PhotoURL192  *string                   `json:"photoUrl192,omitempty"`
	PhotoURL512  *string                   `json:"photoUrl512,omitempty"`
	Timezone     *string                   `json:"timezone,omitempty"`
	Locale       *string                   `json:"locale,omitempty"`
	Settings     *entities.CustomerSetting `json:"settings"`
}

func (CustomerDetails) IsNode() {}

type CustomerEmail struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Verified bool   `json:"verified"`
}

func (CustomerEmail) IsNode() {}

type Version struct {
	Major string `json:"major"`
	Minor string `json:"minor"`
	Patch string `json:"patch"`
}

type CustomerOutboxStatus string

const (
	CustomerOutboxStatusPending CustomerOutboxStatus = "PENDING"
	CustomerOutboxStatusFailed  CustomerOutboxStatus = "FAILED"
)

var AllCustomerOutboxStatus = []CustomerOutboxStatus{
	CustomerOutboxStatusPending,
	CustomerOutboxStatusFailed,
}

func (e CustomerOutboxStatus) IsValid() bool {
	switch e {
	case CustomerOutboxStatusPending, CustomerOutboxStatusFailed:
		return true
	}
	return false
}

func (e CustomerOutboxStatus) String() string {
	return string(e)
}

func (e *CustomerOutboxStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerOutboxStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerOutboxStatus", str)
	}
	return nil
}

func (e CustomerOutboxStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
