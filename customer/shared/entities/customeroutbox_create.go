// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customeroutbox"
)

// CustomerOutboxCreate is the builder for creating a CustomerOutbox entity.
type CustomerOutboxCreate struct {
	config
	mutation *CustomerOutboxMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTimestamp sets the "timestamp" field.
func (coc *CustomerOutboxCreate) SetTimestamp(t time.Time) *CustomerOutboxCreate {
	coc.mutation.SetTimestamp(t)
	return coc
}

// SetTopic sets the "topic" field.
func (coc *CustomerOutboxCreate) SetTopic(s string) *CustomerOutboxCreate {
	coc.mutation.SetTopic(s)
	return coc
}

// SetKey sets the "key" field.
func (coc *CustomerOutboxCreate) SetKey(b []byte) *CustomerOutboxCreate {
	coc.mutation.SetKey(b)
	return coc
}

// SetPayload sets the "payload" field.
func (coc *CustomerOutboxCreate) SetPayload(b []byte) *CustomerOutboxCreate {
	coc.mutation.SetPayload(b)
	return coc
}

// SetHeaders sets the "headers" field.
func (coc *CustomerOutboxCreate) SetHeaders(m map[string][]uint8) *CustomerOutboxCreate {
	coc.mutation.SetHeaders(m)
	return coc
}

// SetRetryCount sets the "retry_count" field.
func (coc *CustomerOutboxCreate) SetRetryCount(i int) *CustomerOutboxCreate {
	coc.mutation.SetRetryCount(i)
	return coc
}

// SetStatus sets the "status" field.
func (coc *CustomerOutboxCreate) SetStatus(c customeroutbox.Status) *CustomerOutboxCreate {
	coc.mutation.SetStatus(c)
	return coc
}

// SetLastRetry sets the "last_retry" field.
func (coc *CustomerOutboxCreate) SetLastRetry(t time.Time) *CustomerOutboxCreate {
	coc.mutation.SetLastRetry(t)
	return coc
}

// SetNillableLastRetry sets the "last_retry" field if the given value is not nil.
func (coc *CustomerOutboxCreate) SetNillableLastRetry(t *time.Time) *CustomerOutboxCreate {
	if t != nil {
		coc.SetLastRetry(*t)
	}
	return coc
}

// SetProcessingErrors sets the "processing_errors" field.
func (coc *CustomerOutboxCreate) SetProcessingErrors(s []string) *CustomerOutboxCreate {
	coc.mutation.SetProcessingErrors(s)
	return coc
}

// SetID sets the "id" field.
func (coc *CustomerOutboxCreate) SetID(s string) *CustomerOutboxCreate {
	coc.mutation.SetID(s)
	return coc
}

// Mutation returns the CustomerOutboxMutation object of the builder.
func (coc *CustomerOutboxCreate) Mutation() *CustomerOutboxMutation {
	return coc.mutation
}

// Save creates the CustomerOutbox in the database.
func (coc *CustomerOutboxCreate) Save(ctx context.Context) (*CustomerOutbox, error) {
	return withHooks(ctx, coc.sqlSave, coc.mutation, coc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (coc *CustomerOutboxCreate) SaveX(ctx context.Context) *CustomerOutbox {
	v, err := coc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (coc *CustomerOutboxCreate) Exec(ctx context.Context) error {
	_, err := coc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coc *CustomerOutboxCreate) ExecX(ctx context.Context) {
	if err := coc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (coc *CustomerOutboxCreate) check() error {
	if _, ok := coc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`entities: missing required field "CustomerOutbox.timestamp"`)}
	}
	if _, ok := coc.mutation.Topic(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`entities: missing required field "CustomerOutbox.topic"`)}
	}
	if _, ok := coc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`entities: missing required field "CustomerOutbox.key"`)}
	}
	if _, ok := coc.mutation.Payload(); !ok {
		return &ValidationError{Name: "payload", err: errors.New(`entities: missing required field "CustomerOutbox.payload"`)}
	}
	if _, ok := coc.mutation.Headers(); !ok {
		return &ValidationError{Name: "headers", err: errors.New(`entities: missing required field "CustomerOutbox.headers"`)}
	}
	if _, ok := coc.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`entities: missing required field "CustomerOutbox.retry_count"`)}
	}
	if _, ok := coc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`entities: missing required field "CustomerOutbox.status"`)}
	}
	if v, ok := coc.mutation.Status(); ok {
		if err := customeroutbox.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entities: validator failed for field "CustomerOutbox.status": %w`, err)}
		}
	}
	return nil
}

func (coc *CustomerOutboxCreate) sqlSave(ctx context.Context) (*CustomerOutbox, error) {
	if err := coc.check(); err != nil {
		return nil, err
	}
	_node, _spec := coc.createSpec()
	if err := sqlgraph.CreateNode(ctx, coc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CustomerOutbox.ID type: %T", _spec.ID.Value)
		}
	}
	coc.mutation.id = &_node.ID
	coc.mutation.done = true
	return _node, nil
}

func (coc *CustomerOutboxCreate) createSpec() (*CustomerOutbox, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerOutbox{config: coc.config}
		_spec = sqlgraph.NewCreateSpec(customeroutbox.Table, sqlgraph.NewFieldSpec(customeroutbox.FieldID, field.TypeString))
	)
	_spec.Schema = coc.schemaConfig.CustomerOutbox
	_spec.OnConflict = coc.conflict
	if id, ok := coc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := coc.mutation.Timestamp(); ok {
		_spec.SetField(customeroutbox.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := coc.mutation.Topic(); ok {
		_spec.SetField(customeroutbox.FieldTopic, field.TypeString, value)
		_node.Topic = value
	}
	if value, ok := coc.mutation.Key(); ok {
		_spec.SetField(customeroutbox.FieldKey, field.TypeBytes, value)
		_node.Key = value
	}
	if value, ok := coc.mutation.Payload(); ok {
		_spec.SetField(customeroutbox.FieldPayload, field.TypeBytes, value)
		_node.Payload = value
	}
	if value, ok := coc.mutation.Headers(); ok {
		_spec.SetField(customeroutbox.FieldHeaders, field.TypeJSON, value)
		_node.Headers = value
	}
	if value, ok := coc.mutation.RetryCount(); ok {
		_spec.SetField(customeroutbox.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := coc.mutation.Status(); ok {
		_spec.SetField(customeroutbox.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := coc.mutation.LastRetry(); ok {
		_spec.SetField(customeroutbox.FieldLastRetry, field.TypeTime, value)
		_node.LastRetry = value
	}
	if value, ok := coc.mutation.ProcessingErrors(); ok {
		_spec.SetField(customeroutbox.FieldProcessingErrors, field.TypeJSON, value)
		_node.ProcessingErrors = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerOutbox.Create().
//		SetTimestamp(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerOutboxUpsert) {
//			SetTimestamp(v+v).
//		}).
//		Exec(ctx)
func (coc *CustomerOutboxCreate) OnConflict(opts ...sql.ConflictOption) *CustomerOutboxUpsertOne {
	coc.conflict = opts
	return &CustomerOutboxUpsertOne{
		create: coc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerOutbox.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (coc *CustomerOutboxCreate) OnConflictColumns(columns ...string) *CustomerOutboxUpsertOne {
	coc.conflict = append(coc.conflict, sql.ConflictColumns(columns...))
	return &CustomerOutboxUpsertOne{
		create: coc,
	}
}

type (
	// CustomerOutboxUpsertOne is the builder for "upsert"-ing
	//  one CustomerOutbox node.
	CustomerOutboxUpsertOne struct {
		create *CustomerOutboxCreate
	}

	// CustomerOutboxUpsert is the "OnConflict" setter.
	CustomerOutboxUpsert struct {
		*sql.UpdateSet
	}
)

// SetTimestamp sets the "timestamp" field.
func (u *CustomerOutboxUpsert) SetTimestamp(v time.Time) *CustomerOutboxUpsert {
	u.Set(customeroutbox.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *CustomerOutboxUpsert) UpdateTimestamp() *CustomerOutboxUpsert {
	u.SetExcluded(customeroutbox.FieldTimestamp)
	return u
}

// SetTopic sets the "topic" field.
func (u *CustomerOutboxUpsert) SetTopic(v string) *CustomerOutboxUpsert {
	u.Set(customeroutbox.FieldTopic, v)
	return u
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *CustomerOutboxUpsert) UpdateTopic() *CustomerOutboxUpsert {
	u.SetExcluded(customeroutbox.FieldTopic)
	return u
}

// SetKey sets the "key" field.
func (u *CustomerOutboxUpsert) SetKey(v []byte) *CustomerOutboxUpsert {
	u.Set(customeroutbox.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *CustomerOutboxUpsert) UpdateKey() *CustomerOutboxUpsert {
	u.SetExcluded(customeroutbox.FieldKey)
	return u
}

// SetPayload sets the "payload" field.
func (u *CustomerOutboxUpsert) SetPayload(v []byte) *CustomerOutboxUpsert {
	u.Set(customeroutbox.FieldPayload, v)
	return u
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *CustomerOutboxUpsert) UpdatePayload() *CustomerOutboxUpsert {
	u.SetExcluded(customeroutbox.FieldPayload)
	return u
}

// SetHeaders sets the "headers" field.
func (u *CustomerOutboxUpsert) SetHeaders(v map[string][]uint8) *CustomerOutboxUpsert {
	u.Set(customeroutbox.FieldHeaders, v)
	return u
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *CustomerOutboxUpsert) UpdateHeaders() *CustomerOutboxUpsert {
	u.SetExcluded(customeroutbox.FieldHeaders)
	return u
}

// SetRetryCount sets the "retry_count" field.
func (u *CustomerOutboxUpsert) SetRetryCount(v int) *CustomerOutboxUpsert {
	u.Set(customeroutbox.FieldRetryCount, v)
	return u
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *CustomerOutboxUpsert) UpdateRetryCount() *CustomerOutboxUpsert {
	u.SetExcluded(customeroutbox.FieldRetryCount)
	return u
}

// AddRetryCount adds v to the "retry_count" field.
func (u *CustomerOutboxUpsert) AddRetryCount(v int) *CustomerOutboxUpsert {
	u.Add(customeroutbox.FieldRetryCount, v)
	return u
}

// SetStatus sets the "status" field.
func (u *CustomerOutboxUpsert) SetStatus(v customeroutbox.Status) *CustomerOutboxUpsert {
	u.Set(customeroutbox.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CustomerOutboxUpsert) UpdateStatus() *CustomerOutboxUpsert {
	u.SetExcluded(customeroutbox.FieldStatus)
	return u
}

// SetLastRetry sets the "last_retry" field.
func (u *CustomerOutboxUpsert) SetLastRetry(v time.Time) *CustomerOutboxUpsert {
	u.Set(customeroutbox.FieldLastRetry, v)
	return u
}

// UpdateLastRetry sets the "last_retry" field to the value that was provided on create.
func (u *CustomerOutboxUpsert) UpdateLastRetry() *CustomerOutboxUpsert {
	u.SetExcluded(customeroutbox.FieldLastRetry)
	return u
}

// ClearLastRetry clears the value of the "last_retry" field.
func (u *CustomerOutboxUpsert) ClearLastRetry() *CustomerOutboxUpsert {
	u.SetNull(customeroutbox.FieldLastRetry)
	return u
}

// SetProcessingErrors sets the "processing_errors" field.
func (u *CustomerOutboxUpsert) SetProcessingErrors(v []string) *CustomerOutboxUpsert {
	u.Set(customeroutbox.FieldProcessingErrors, v)
	return u
}

// UpdateProcessingErrors sets the "processing_errors" field to the value that was provided on create.
func (u *CustomerOutboxUpsert) UpdateProcessingErrors() *CustomerOutboxUpsert {
	u.SetExcluded(customeroutbox.FieldProcessingErrors)
	return u
}

// ClearProcessingErrors clears the value of the "processing_errors" field.
func (u *CustomerOutboxUpsert) ClearProcessingErrors() *CustomerOutboxUpsert {
	u.SetNull(customeroutbox.FieldProcessingErrors)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CustomerOutbox.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customeroutbox.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerOutboxUpsertOne) UpdateNewValues() *CustomerOutboxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(customeroutbox.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerOutbox.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerOutboxUpsertOne) Ignore() *CustomerOutboxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerOutboxUpsertOne) DoNothing() *CustomerOutboxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerOutboxCreate.OnConflict
// documentation for more info.
func (u *CustomerOutboxUpsertOne) Update(set func(*CustomerOutboxUpsert)) *CustomerOutboxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerOutboxUpsert{UpdateSet: update})
	}))
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *CustomerOutboxUpsertOne) SetTimestamp(v time.Time) *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *CustomerOutboxUpsertOne) UpdateTimestamp() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateTimestamp()
	})
}

// SetTopic sets the "topic" field.
func (u *CustomerOutboxUpsertOne) SetTopic(v string) *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetTopic(v)
	})
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *CustomerOutboxUpsertOne) UpdateTopic() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateTopic()
	})
}

// SetKey sets the "key" field.
func (u *CustomerOutboxUpsertOne) SetKey(v []byte) *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *CustomerOutboxUpsertOne) UpdateKey() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateKey()
	})
}

// SetPayload sets the "payload" field.
func (u *CustomerOutboxUpsertOne) SetPayload(v []byte) *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *CustomerOutboxUpsertOne) UpdatePayload() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdatePayload()
	})
}

// SetHeaders sets the "headers" field.
func (u *CustomerOutboxUpsertOne) SetHeaders(v map[string][]uint8) *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetHeaders(v)
	})
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *CustomerOutboxUpsertOne) UpdateHeaders() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateHeaders()
	})
}

// SetRetryCount sets the "retry_count" field.
func (u *CustomerOutboxUpsertOne) SetRetryCount(v int) *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetRetryCount(v)
	})
}

// AddRetryCount adds v to the "retry_count" field.
func (u *CustomerOutboxUpsertOne) AddRetryCount(v int) *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.AddRetryCount(v)
	})
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *CustomerOutboxUpsertOne) UpdateRetryCount() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateRetryCount()
	})
}

// SetStatus sets the "status" field.
func (u *CustomerOutboxUpsertOne) SetStatus(v customeroutbox.Status) *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CustomerOutboxUpsertOne) UpdateStatus() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateStatus()
	})
}

// SetLastRetry sets the "last_retry" field.
func (u *CustomerOutboxUpsertOne) SetLastRetry(v time.Time) *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetLastRetry(v)
	})
}

// UpdateLastRetry sets the "last_retry" field to the value that was provided on create.
func (u *CustomerOutboxUpsertOne) UpdateLastRetry() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateLastRetry()
	})
}

// ClearLastRetry clears the value of the "last_retry" field.
func (u *CustomerOutboxUpsertOne) ClearLastRetry() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.ClearLastRetry()
	})
}

// SetProcessingErrors sets the "processing_errors" field.
func (u *CustomerOutboxUpsertOne) SetProcessingErrors(v []string) *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetProcessingErrors(v)
	})
}

// UpdateProcessingErrors sets the "processing_errors" field to the value that was provided on create.
func (u *CustomerOutboxUpsertOne) UpdateProcessingErrors() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateProcessingErrors()
	})
}

// ClearProcessingErrors clears the value of the "processing_errors" field.
func (u *CustomerOutboxUpsertOne) ClearProcessingErrors() *CustomerOutboxUpsertOne {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.ClearProcessingErrors()
	})
}

// Exec executes the query.
func (u *CustomerOutboxUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for CustomerOutboxCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerOutboxUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerOutboxUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: CustomerOutboxUpsertOne.ID is not supported by MySQL driver. Use CustomerOutboxUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerOutboxUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerOutboxCreateBulk is the builder for creating many CustomerOutbox entities in bulk.
type CustomerOutboxCreateBulk struct {
	config
	err      error
	builders []*CustomerOutboxCreate
	conflict []sql.ConflictOption
}

// Save creates the CustomerOutbox entities in the database.
func (cocb *CustomerOutboxCreateBulk) Save(ctx context.Context) ([]*CustomerOutbox, error) {
	if cocb.err != nil {
		return nil, cocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cocb.builders))
	nodes := make([]*CustomerOutbox, len(cocb.builders))
	mutators := make([]Mutator, len(cocb.builders))
	for i := range cocb.builders {
		func(i int, root context.Context) {
			builder := cocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerOutboxMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cocb *CustomerOutboxCreateBulk) SaveX(ctx context.Context) []*CustomerOutbox {
	v, err := cocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cocb *CustomerOutboxCreateBulk) Exec(ctx context.Context) error {
	_, err := cocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocb *CustomerOutboxCreateBulk) ExecX(ctx context.Context) {
	if err := cocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerOutbox.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerOutboxUpsert) {
//			SetTimestamp(v+v).
//		}).
//		Exec(ctx)
func (cocb *CustomerOutboxCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerOutboxUpsertBulk {
	cocb.conflict = opts
	return &CustomerOutboxUpsertBulk{
		create: cocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerOutbox.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cocb *CustomerOutboxCreateBulk) OnConflictColumns(columns ...string) *CustomerOutboxUpsertBulk {
	cocb.conflict = append(cocb.conflict, sql.ConflictColumns(columns...))
	return &CustomerOutboxUpsertBulk{
		create: cocb,
	}
}

// CustomerOutboxUpsertBulk is the builder for "upsert"-ing
// a bulk of CustomerOutbox nodes.
type CustomerOutboxUpsertBulk struct {
	create *CustomerOutboxCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CustomerOutbox.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customeroutbox.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerOutboxUpsertBulk) UpdateNewValues() *CustomerOutboxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(customeroutbox.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerOutbox.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerOutboxUpsertBulk) Ignore() *CustomerOutboxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerOutboxUpsertBulk) DoNothing() *CustomerOutboxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerOutboxCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerOutboxUpsertBulk) Update(set func(*CustomerOutboxUpsert)) *CustomerOutboxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerOutboxUpsert{UpdateSet: update})
	}))
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *CustomerOutboxUpsertBulk) SetTimestamp(v time.Time) *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *CustomerOutboxUpsertBulk) UpdateTimestamp() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateTimestamp()
	})
}

// SetTopic sets the "topic" field.
func (u *CustomerOutboxUpsertBulk) SetTopic(v string) *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetTopic(v)
	})
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *CustomerOutboxUpsertBulk) UpdateTopic() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateTopic()
	})
}

// SetKey sets the "key" field.
func (u *CustomerOutboxUpsertBulk) SetKey(v []byte) *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *CustomerOutboxUpsertBulk) UpdateKey() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateKey()
	})
}

// SetPayload sets the "payload" field.
func (u *CustomerOutboxUpsertBulk) SetPayload(v []byte) *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *CustomerOutboxUpsertBulk) UpdatePayload() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdatePayload()
	})
}

// SetHeaders sets the "headers" field.
func (u *CustomerOutboxUpsertBulk) SetHeaders(v map[string][]uint8) *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetHeaders(v)
	})
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *CustomerOutboxUpsertBulk) UpdateHeaders() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateHeaders()
	})
}

// SetRetryCount sets the "retry_count" field.
func (u *CustomerOutboxUpsertBulk) SetRetryCount(v int) *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetRetryCount(v)
	})
}

// AddRetryCount adds v to the "retry_count" field.
func (u *CustomerOutboxUpsertBulk) AddRetryCount(v int) *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.AddRetryCount(v)
	})
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *CustomerOutboxUpsertBulk) UpdateRetryCount() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateRetryCount()
	})
}

// SetStatus sets the "status" field.
func (u *CustomerOutboxUpsertBulk) SetStatus(v customeroutbox.Status) *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CustomerOutboxUpsertBulk) UpdateStatus() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateStatus()
	})
}

// SetLastRetry sets the "last_retry" field.
func (u *CustomerOutboxUpsertBulk) SetLastRetry(v time.Time) *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetLastRetry(v)
	})
}

// UpdateLastRetry sets the "last_retry" field to the value that was provided on create.
func (u *CustomerOutboxUpsertBulk) UpdateLastRetry() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateLastRetry()
	})
}

// ClearLastRetry clears the value of the "last_retry" field.
func (u *CustomerOutboxUpsertBulk) ClearLastRetry() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.ClearLastRetry()
	})
}

// SetProcessingErrors sets the "processing_errors" field.
func (u *CustomerOutboxUpsertBulk) SetProcessingErrors(v []string) *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.SetProcessingErrors(v)
	})
}

// UpdateProcessingErrors sets the "processing_errors" field to the value that was provided on create.
func (u *CustomerOutboxUpsertBulk) UpdateProcessingErrors() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.UpdateProcessingErrors()
	})
}

// ClearProcessingErrors clears the value of the "processing_errors" field.
func (u *CustomerOutboxUpsertBulk) ClearProcessingErrors() *CustomerOutboxUpsertBulk {
	return u.Update(func(s *CustomerOutboxUpsert) {
		s.ClearProcessingErrors()
	})
}

// Exec executes the query.
func (u *CustomerOutboxUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the CustomerOutboxCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for CustomerOutboxCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerOutboxUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
