// Code generated by ent, DO NOT EDIT.

package customer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sigmasee/sigmasee/customer/shared/entities/predicate"

	"github.com/sigmasee/sigmasee/customer/shared/entities/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedAt, v))
}

// ModifiedAt applies equality check predicate on the "modified_at" field. It's identical to ModifiedAtEQ.
func ModifiedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldModifiedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldDeletedAt, v))
}

// Designation applies equality check predicate on the "designation" field. It's identical to DesignationEQ.
func Designation(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldDesignation, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldTitle, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldName, v))
}

// GivenName applies equality check predicate on the "given_name" field. It's identical to GivenNameEQ.
func GivenName(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldGivenName, v))
}

// MiddleName applies equality check predicate on the "middle_name" field. It's identical to MiddleNameEQ.
func MiddleName(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldMiddleName, v))
}

// FamilyName applies equality check predicate on the "family_name" field. It's identical to FamilyNameEQ.
func FamilyName(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldFamilyName, v))
}

// PhotoURL applies equality check predicate on the "photo_url" field. It's identical to PhotoURLEQ.
func PhotoURL(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL, v))
}

// PhotoURL24 applies equality check predicate on the "photo_url_24" field. It's identical to PhotoURL24EQ.
func PhotoURL24(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL24, v))
}

// PhotoURL32 applies equality check predicate on the "photo_url_32" field. It's identical to PhotoURL32EQ.
func PhotoURL32(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL32, v))
}

// PhotoURL48 applies equality check predicate on the "photo_url_48" field. It's identical to PhotoURL48EQ.
func PhotoURL48(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL48, v))
}

// PhotoURL72 applies equality check predicate on the "photo_url_72" field. It's identical to PhotoURL72EQ.
func PhotoURL72(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL72, v))
}

// PhotoURL192 applies equality check predicate on the "photo_url_192" field. It's identical to PhotoURL192EQ.
func PhotoURL192(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL192, v))
}

// PhotoURL512 applies equality check predicate on the "photo_url_512" field. It's identical to PhotoURL512EQ.
func PhotoURL512(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL512, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldTimezone, v))
}

// Locale applies equality check predicate on the "locale" field. It's identical to LocaleEQ.
func Locale(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldLocale, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCreatedAt, v))
}

// ModifiedAtEQ applies the EQ predicate on the "modified_at" field.
func ModifiedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldModifiedAt, v))
}

// ModifiedAtNEQ applies the NEQ predicate on the "modified_at" field.
func ModifiedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldModifiedAt, v))
}

// ModifiedAtIn applies the In predicate on the "modified_at" field.
func ModifiedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldModifiedAt, vs...))
}

// ModifiedAtNotIn applies the NotIn predicate on the "modified_at" field.
func ModifiedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldModifiedAt, vs...))
}

// ModifiedAtGT applies the GT predicate on the "modified_at" field.
func ModifiedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldModifiedAt, v))
}

// ModifiedAtGTE applies the GTE predicate on the "modified_at" field.
func ModifiedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldModifiedAt, v))
}

// ModifiedAtLT applies the LT predicate on the "modified_at" field.
func ModifiedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldModifiedAt, v))
}

// ModifiedAtLTE applies the LTE predicate on the "modified_at" field.
func ModifiedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldModifiedAt, v))
}

// ModifiedAtIsNil applies the IsNil predicate on the "modified_at" field.
func ModifiedAtIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldModifiedAt))
}

// ModifiedAtNotNil applies the NotNil predicate on the "modified_at" field.
func ModifiedAtNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldModifiedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldDeletedAt))
}

// DesignationEQ applies the EQ predicate on the "designation" field.
func DesignationEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldDesignation, v))
}

// DesignationNEQ applies the NEQ predicate on the "designation" field.
func DesignationNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldDesignation, v))
}

// DesignationIn applies the In predicate on the "designation" field.
func DesignationIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldDesignation, vs...))
}

// DesignationNotIn applies the NotIn predicate on the "designation" field.
func DesignationNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldDesignation, vs...))
}

// DesignationGT applies the GT predicate on the "designation" field.
func DesignationGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldDesignation, v))
}

// DesignationGTE applies the GTE predicate on the "designation" field.
func DesignationGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldDesignation, v))
}

// DesignationLT applies the LT predicate on the "designation" field.
func DesignationLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldDesignation, v))
}

// DesignationLTE applies the LTE predicate on the "designation" field.
func DesignationLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldDesignation, v))
}

// DesignationContains applies the Contains predicate on the "designation" field.
func DesignationContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldDesignation, v))
}

// DesignationHasPrefix applies the HasPrefix predicate on the "designation" field.
func DesignationHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldDesignation, v))
}

// DesignationHasSuffix applies the HasSuffix predicate on the "designation" field.
func DesignationHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldDesignation, v))
}

// DesignationIsNil applies the IsNil predicate on the "designation" field.
func DesignationIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldDesignation))
}

// DesignationNotNil applies the NotNil predicate on the "designation" field.
func DesignationNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldDesignation))
}

// DesignationEqualFold applies the EqualFold predicate on the "designation" field.
func DesignationEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldDesignation, v))
}

// DesignationContainsFold applies the ContainsFold predicate on the "designation" field.
func DesignationContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldDesignation, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldTitle, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldName, v))
}

// GivenNameEQ applies the EQ predicate on the "given_name" field.
func GivenNameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldGivenName, v))
}

// GivenNameNEQ applies the NEQ predicate on the "given_name" field.
func GivenNameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldGivenName, v))
}

// GivenNameIn applies the In predicate on the "given_name" field.
func GivenNameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldGivenName, vs...))
}

// GivenNameNotIn applies the NotIn predicate on the "given_name" field.
func GivenNameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldGivenName, vs...))
}

// GivenNameGT applies the GT predicate on the "given_name" field.
func GivenNameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldGivenName, v))
}

// GivenNameGTE applies the GTE predicate on the "given_name" field.
func GivenNameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldGivenName, v))
}

// GivenNameLT applies the LT predicate on the "given_name" field.
func GivenNameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldGivenName, v))
}

// GivenNameLTE applies the LTE predicate on the "given_name" field.
func GivenNameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldGivenName, v))
}

// GivenNameContains applies the Contains predicate on the "given_name" field.
func GivenNameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldGivenName, v))
}

// GivenNameHasPrefix applies the HasPrefix predicate on the "given_name" field.
func GivenNameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldGivenName, v))
}

// GivenNameHasSuffix applies the HasSuffix predicate on the "given_name" field.
func GivenNameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldGivenName, v))
}

// GivenNameIsNil applies the IsNil predicate on the "given_name" field.
func GivenNameIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldGivenName))
}

// GivenNameNotNil applies the NotNil predicate on the "given_name" field.
func GivenNameNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldGivenName))
}

// GivenNameEqualFold applies the EqualFold predicate on the "given_name" field.
func GivenNameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldGivenName, v))
}

// GivenNameContainsFold applies the ContainsFold predicate on the "given_name" field.
func GivenNameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldGivenName, v))
}

// MiddleNameEQ applies the EQ predicate on the "middle_name" field.
func MiddleNameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldMiddleName, v))
}

// MiddleNameNEQ applies the NEQ predicate on the "middle_name" field.
func MiddleNameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldMiddleName, v))
}

// MiddleNameIn applies the In predicate on the "middle_name" field.
func MiddleNameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldMiddleName, vs...))
}

// MiddleNameNotIn applies the NotIn predicate on the "middle_name" field.
func MiddleNameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldMiddleName, vs...))
}

// MiddleNameGT applies the GT predicate on the "middle_name" field.
func MiddleNameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldMiddleName, v))
}

// MiddleNameGTE applies the GTE predicate on the "middle_name" field.
func MiddleNameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldMiddleName, v))
}

// MiddleNameLT applies the LT predicate on the "middle_name" field.
func MiddleNameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldMiddleName, v))
}

// MiddleNameLTE applies the LTE predicate on the "middle_name" field.
func MiddleNameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldMiddleName, v))
}

// MiddleNameContains applies the Contains predicate on the "middle_name" field.
func MiddleNameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldMiddleName, v))
}

// MiddleNameHasPrefix applies the HasPrefix predicate on the "middle_name" field.
func MiddleNameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldMiddleName, v))
}

// MiddleNameHasSuffix applies the HasSuffix predicate on the "middle_name" field.
func MiddleNameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldMiddleName, v))
}

// MiddleNameIsNil applies the IsNil predicate on the "middle_name" field.
func MiddleNameIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldMiddleName))
}

// MiddleNameNotNil applies the NotNil predicate on the "middle_name" field.
func MiddleNameNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldMiddleName))
}

// MiddleNameEqualFold applies the EqualFold predicate on the "middle_name" field.
func MiddleNameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldMiddleName, v))
}

// MiddleNameContainsFold applies the ContainsFold predicate on the "middle_name" field.
func MiddleNameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldMiddleName, v))
}

// FamilyNameEQ applies the EQ predicate on the "family_name" field.
func FamilyNameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldFamilyName, v))
}

// FamilyNameNEQ applies the NEQ predicate on the "family_name" field.
func FamilyNameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldFamilyName, v))
}

// FamilyNameIn applies the In predicate on the "family_name" field.
func FamilyNameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldFamilyName, vs...))
}

// FamilyNameNotIn applies the NotIn predicate on the "family_name" field.
func FamilyNameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldFamilyName, vs...))
}

// FamilyNameGT applies the GT predicate on the "family_name" field.
func FamilyNameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldFamilyName, v))
}

// FamilyNameGTE applies the GTE predicate on the "family_name" field.
func FamilyNameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldFamilyName, v))
}

// FamilyNameLT applies the LT predicate on the "family_name" field.
func FamilyNameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldFamilyName, v))
}

// FamilyNameLTE applies the LTE predicate on the "family_name" field.
func FamilyNameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldFamilyName, v))
}

// FamilyNameContains applies the Contains predicate on the "family_name" field.
func FamilyNameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldFamilyName, v))
}

// FamilyNameHasPrefix applies the HasPrefix predicate on the "family_name" field.
func FamilyNameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldFamilyName, v))
}

// FamilyNameHasSuffix applies the HasSuffix predicate on the "family_name" field.
func FamilyNameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldFamilyName, v))
}

// FamilyNameIsNil applies the IsNil predicate on the "family_name" field.
func FamilyNameIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldFamilyName))
}

// FamilyNameNotNil applies the NotNil predicate on the "family_name" field.
func FamilyNameNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldFamilyName))
}

// FamilyNameEqualFold applies the EqualFold predicate on the "family_name" field.
func FamilyNameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldFamilyName, v))
}

// FamilyNameContainsFold applies the ContainsFold predicate on the "family_name" field.
func FamilyNameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldFamilyName, v))
}

// PhotoURLEQ applies the EQ predicate on the "photo_url" field.
func PhotoURLEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL, v))
}

// PhotoURLNEQ applies the NEQ predicate on the "photo_url" field.
func PhotoURLNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldPhotoURL, v))
}

// PhotoURLIn applies the In predicate on the "photo_url" field.
func PhotoURLIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldPhotoURL, vs...))
}

// PhotoURLNotIn applies the NotIn predicate on the "photo_url" field.
func PhotoURLNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldPhotoURL, vs...))
}

// PhotoURLGT applies the GT predicate on the "photo_url" field.
func PhotoURLGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldPhotoURL, v))
}

// PhotoURLGTE applies the GTE predicate on the "photo_url" field.
func PhotoURLGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldPhotoURL, v))
}

// PhotoURLLT applies the LT predicate on the "photo_url" field.
func PhotoURLLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldPhotoURL, v))
}

// PhotoURLLTE applies the LTE predicate on the "photo_url" field.
func PhotoURLLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldPhotoURL, v))
}

// PhotoURLContains applies the Contains predicate on the "photo_url" field.
func PhotoURLContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldPhotoURL, v))
}

// PhotoURLHasPrefix applies the HasPrefix predicate on the "photo_url" field.
func PhotoURLHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldPhotoURL, v))
}

// PhotoURLHasSuffix applies the HasSuffix predicate on the "photo_url" field.
func PhotoURLHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldPhotoURL, v))
}

// PhotoURLIsNil applies the IsNil predicate on the "photo_url" field.
func PhotoURLIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldPhotoURL))
}

// PhotoURLNotNil applies the NotNil predicate on the "photo_url" field.
func PhotoURLNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldPhotoURL))
}

// PhotoURLEqualFold applies the EqualFold predicate on the "photo_url" field.
func PhotoURLEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldPhotoURL, v))
}

// PhotoURLContainsFold applies the ContainsFold predicate on the "photo_url" field.
func PhotoURLContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldPhotoURL, v))
}

// PhotoURL24EQ applies the EQ predicate on the "photo_url_24" field.
func PhotoURL24EQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL24, v))
}

// PhotoURL24NEQ applies the NEQ predicate on the "photo_url_24" field.
func PhotoURL24NEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldPhotoURL24, v))
}

// PhotoURL24In applies the In predicate on the "photo_url_24" field.
func PhotoURL24In(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldPhotoURL24, vs...))
}

// PhotoURL24NotIn applies the NotIn predicate on the "photo_url_24" field.
func PhotoURL24NotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldPhotoURL24, vs...))
}

// PhotoURL24GT applies the GT predicate on the "photo_url_24" field.
func PhotoURL24GT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldPhotoURL24, v))
}

// PhotoURL24GTE applies the GTE predicate on the "photo_url_24" field.
func PhotoURL24GTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldPhotoURL24, v))
}

// PhotoURL24LT applies the LT predicate on the "photo_url_24" field.
func PhotoURL24LT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldPhotoURL24, v))
}

// PhotoURL24LTE applies the LTE predicate on the "photo_url_24" field.
func PhotoURL24LTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldPhotoURL24, v))
}

// PhotoURL24Contains applies the Contains predicate on the "photo_url_24" field.
func PhotoURL24Contains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldPhotoURL24, v))
}

// PhotoURL24HasPrefix applies the HasPrefix predicate on the "photo_url_24" field.
func PhotoURL24HasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldPhotoURL24, v))
}

// PhotoURL24HasSuffix applies the HasSuffix predicate on the "photo_url_24" field.
func PhotoURL24HasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldPhotoURL24, v))
}

// PhotoURL24IsNil applies the IsNil predicate on the "photo_url_24" field.
func PhotoURL24IsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldPhotoURL24))
}

// PhotoURL24NotNil applies the NotNil predicate on the "photo_url_24" field.
func PhotoURL24NotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldPhotoURL24))
}

// PhotoURL24EqualFold applies the EqualFold predicate on the "photo_url_24" field.
func PhotoURL24EqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldPhotoURL24, v))
}

// PhotoURL24ContainsFold applies the ContainsFold predicate on the "photo_url_24" field.
func PhotoURL24ContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldPhotoURL24, v))
}

// PhotoURL32EQ applies the EQ predicate on the "photo_url_32" field.
func PhotoURL32EQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL32, v))
}

// PhotoURL32NEQ applies the NEQ predicate on the "photo_url_32" field.
func PhotoURL32NEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldPhotoURL32, v))
}

// PhotoURL32In applies the In predicate on the "photo_url_32" field.
func PhotoURL32In(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldPhotoURL32, vs...))
}

// PhotoURL32NotIn applies the NotIn predicate on the "photo_url_32" field.
func PhotoURL32NotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldPhotoURL32, vs...))
}

// PhotoURL32GT applies the GT predicate on the "photo_url_32" field.
func PhotoURL32GT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldPhotoURL32, v))
}

// PhotoURL32GTE applies the GTE predicate on the "photo_url_32" field.
func PhotoURL32GTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldPhotoURL32, v))
}

// PhotoURL32LT applies the LT predicate on the "photo_url_32" field.
func PhotoURL32LT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldPhotoURL32, v))
}

// PhotoURL32LTE applies the LTE predicate on the "photo_url_32" field.
func PhotoURL32LTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldPhotoURL32, v))
}

// PhotoURL32Contains applies the Contains predicate on the "photo_url_32" field.
func PhotoURL32Contains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldPhotoURL32, v))
}

// PhotoURL32HasPrefix applies the HasPrefix predicate on the "photo_url_32" field.
func PhotoURL32HasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldPhotoURL32, v))
}

// PhotoURL32HasSuffix applies the HasSuffix predicate on the "photo_url_32" field.
func PhotoURL32HasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldPhotoURL32, v))
}

// PhotoURL32IsNil applies the IsNil predicate on the "photo_url_32" field.
func PhotoURL32IsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldPhotoURL32))
}

// PhotoURL32NotNil applies the NotNil predicate on the "photo_url_32" field.
func PhotoURL32NotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldPhotoURL32))
}

// PhotoURL32EqualFold applies the EqualFold predicate on the "photo_url_32" field.
func PhotoURL32EqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldPhotoURL32, v))
}

// PhotoURL32ContainsFold applies the ContainsFold predicate on the "photo_url_32" field.
func PhotoURL32ContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldPhotoURL32, v))
}

// PhotoURL48EQ applies the EQ predicate on the "photo_url_48" field.
func PhotoURL48EQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL48, v))
}

// PhotoURL48NEQ applies the NEQ predicate on the "photo_url_48" field.
func PhotoURL48NEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldPhotoURL48, v))
}

// PhotoURL48In applies the In predicate on the "photo_url_48" field.
func PhotoURL48In(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldPhotoURL48, vs...))
}

// PhotoURL48NotIn applies the NotIn predicate on the "photo_url_48" field.
func PhotoURL48NotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldPhotoURL48, vs...))
}

// PhotoURL48GT applies the GT predicate on the "photo_url_48" field.
func PhotoURL48GT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldPhotoURL48, v))
}

// PhotoURL48GTE applies the GTE predicate on the "photo_url_48" field.
func PhotoURL48GTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldPhotoURL48, v))
}

// PhotoURL48LT applies the LT predicate on the "photo_url_48" field.
func PhotoURL48LT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldPhotoURL48, v))
}

// PhotoURL48LTE applies the LTE predicate on the "photo_url_48" field.
func PhotoURL48LTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldPhotoURL48, v))
}

// PhotoURL48Contains applies the Contains predicate on the "photo_url_48" field.
func PhotoURL48Contains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldPhotoURL48, v))
}

// PhotoURL48HasPrefix applies the HasPrefix predicate on the "photo_url_48" field.
func PhotoURL48HasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldPhotoURL48, v))
}

// PhotoURL48HasSuffix applies the HasSuffix predicate on the "photo_url_48" field.
func PhotoURL48HasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldPhotoURL48, v))
}

// PhotoURL48IsNil applies the IsNil predicate on the "photo_url_48" field.
func PhotoURL48IsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldPhotoURL48))
}

// PhotoURL48NotNil applies the NotNil predicate on the "photo_url_48" field.
func PhotoURL48NotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldPhotoURL48))
}

// PhotoURL48EqualFold applies the EqualFold predicate on the "photo_url_48" field.
func PhotoURL48EqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldPhotoURL48, v))
}

// PhotoURL48ContainsFold applies the ContainsFold predicate on the "photo_url_48" field.
func PhotoURL48ContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldPhotoURL48, v))
}

// PhotoURL72EQ applies the EQ predicate on the "photo_url_72" field.
func PhotoURL72EQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL72, v))
}

// PhotoURL72NEQ applies the NEQ predicate on the "photo_url_72" field.
func PhotoURL72NEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldPhotoURL72, v))
}

// PhotoURL72In applies the In predicate on the "photo_url_72" field.
func PhotoURL72In(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldPhotoURL72, vs...))
}

// PhotoURL72NotIn applies the NotIn predicate on the "photo_url_72" field.
func PhotoURL72NotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldPhotoURL72, vs...))
}

// PhotoURL72GT applies the GT predicate on the "photo_url_72" field.
func PhotoURL72GT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldPhotoURL72, v))
}

// PhotoURL72GTE applies the GTE predicate on the "photo_url_72" field.
func PhotoURL72GTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldPhotoURL72, v))
}

// PhotoURL72LT applies the LT predicate on the "photo_url_72" field.
func PhotoURL72LT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldPhotoURL72, v))
}

// PhotoURL72LTE applies the LTE predicate on the "photo_url_72" field.
func PhotoURL72LTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldPhotoURL72, v))
}

// PhotoURL72Contains applies the Contains predicate on the "photo_url_72" field.
func PhotoURL72Contains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldPhotoURL72, v))
}

// PhotoURL72HasPrefix applies the HasPrefix predicate on the "photo_url_72" field.
func PhotoURL72HasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldPhotoURL72, v))
}

// PhotoURL72HasSuffix applies the HasSuffix predicate on the "photo_url_72" field.
func PhotoURL72HasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldPhotoURL72, v))
}

// PhotoURL72IsNil applies the IsNil predicate on the "photo_url_72" field.
func PhotoURL72IsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldPhotoURL72))
}

// PhotoURL72NotNil applies the NotNil predicate on the "photo_url_72" field.
func PhotoURL72NotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldPhotoURL72))
}

// PhotoURL72EqualFold applies the EqualFold predicate on the "photo_url_72" field.
func PhotoURL72EqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldPhotoURL72, v))
}

// PhotoURL72ContainsFold applies the ContainsFold predicate on the "photo_url_72" field.
func PhotoURL72ContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldPhotoURL72, v))
}

// PhotoURL192EQ applies the EQ predicate on the "photo_url_192" field.
func PhotoURL192EQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL192, v))
}

// PhotoURL192NEQ applies the NEQ predicate on the "photo_url_192" field.
func PhotoURL192NEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldPhotoURL192, v))
}

// PhotoURL192In applies the In predicate on the "photo_url_192" field.
func PhotoURL192In(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldPhotoURL192, vs...))
}

// PhotoURL192NotIn applies the NotIn predicate on the "photo_url_192" field.
func PhotoURL192NotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldPhotoURL192, vs...))
}

// PhotoURL192GT applies the GT predicate on the "photo_url_192" field.
func PhotoURL192GT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldPhotoURL192, v))
}

// PhotoURL192GTE applies the GTE predicate on the "photo_url_192" field.
func PhotoURL192GTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldPhotoURL192, v))
}

// PhotoURL192LT applies the LT predicate on the "photo_url_192" field.
func PhotoURL192LT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldPhotoURL192, v))
}

// PhotoURL192LTE applies the LTE predicate on the "photo_url_192" field.
func PhotoURL192LTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldPhotoURL192, v))
}

// PhotoURL192Contains applies the Contains predicate on the "photo_url_192" field.
func PhotoURL192Contains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldPhotoURL192, v))
}

// PhotoURL192HasPrefix applies the HasPrefix predicate on the "photo_url_192" field.
func PhotoURL192HasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldPhotoURL192, v))
}

// PhotoURL192HasSuffix applies the HasSuffix predicate on the "photo_url_192" field.
func PhotoURL192HasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldPhotoURL192, v))
}

// PhotoURL192IsNil applies the IsNil predicate on the "photo_url_192" field.
func PhotoURL192IsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldPhotoURL192))
}

// PhotoURL192NotNil applies the NotNil predicate on the "photo_url_192" field.
func PhotoURL192NotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldPhotoURL192))
}

// PhotoURL192EqualFold applies the EqualFold predicate on the "photo_url_192" field.
func PhotoURL192EqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldPhotoURL192, v))
}

// PhotoURL192ContainsFold applies the ContainsFold predicate on the "photo_url_192" field.
func PhotoURL192ContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldPhotoURL192, v))
}

// PhotoURL512EQ applies the EQ predicate on the "photo_url_512" field.
func PhotoURL512EQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPhotoURL512, v))
}

// PhotoURL512NEQ applies the NEQ predicate on the "photo_url_512" field.
func PhotoURL512NEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldPhotoURL512, v))
}

// PhotoURL512In applies the In predicate on the "photo_url_512" field.
func PhotoURL512In(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldPhotoURL512, vs...))
}

// PhotoURL512NotIn applies the NotIn predicate on the "photo_url_512" field.
func PhotoURL512NotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldPhotoURL512, vs...))
}

// PhotoURL512GT applies the GT predicate on the "photo_url_512" field.
func PhotoURL512GT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldPhotoURL512, v))
}

// PhotoURL512GTE applies the GTE predicate on the "photo_url_512" field.
func PhotoURL512GTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldPhotoURL512, v))
}

// PhotoURL512LT applies the LT predicate on the "photo_url_512" field.
func PhotoURL512LT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldPhotoURL512, v))
}

// PhotoURL512LTE applies the LTE predicate on the "photo_url_512" field.
func PhotoURL512LTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldPhotoURL512, v))
}

// PhotoURL512Contains applies the Contains predicate on the "photo_url_512" field.
func PhotoURL512Contains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldPhotoURL512, v))
}

// PhotoURL512HasPrefix applies the HasPrefix predicate on the "photo_url_512" field.
func PhotoURL512HasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldPhotoURL512, v))
}

// PhotoURL512HasSuffix applies the HasSuffix predicate on the "photo_url_512" field.
func PhotoURL512HasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldPhotoURL512, v))
}

// PhotoURL512IsNil applies the IsNil predicate on the "photo_url_512" field.
func PhotoURL512IsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldPhotoURL512))
}

// PhotoURL512NotNil applies the NotNil predicate on the "photo_url_512" field.
func PhotoURL512NotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldPhotoURL512))
}

// PhotoURL512EqualFold applies the EqualFold predicate on the "photo_url_512" field.
func PhotoURL512EqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldPhotoURL512, v))
}

// PhotoURL512ContainsFold applies the ContainsFold predicate on the "photo_url_512" field.
func PhotoURL512ContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldPhotoURL512, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldTimezone, v))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldTimezone, v))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldTimezone, v))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldTimezone, v))
}

// TimezoneIsNil applies the IsNil predicate on the "timezone" field.
func TimezoneIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldTimezone))
}

// TimezoneNotNil applies the NotNil predicate on the "timezone" field.
func TimezoneNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldTimezone))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldTimezone, v))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldTimezone, v))
}

// LocaleEQ applies the EQ predicate on the "locale" field.
func LocaleEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldLocale, v))
}

// LocaleNEQ applies the NEQ predicate on the "locale" field.
func LocaleNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldLocale, v))
}

// LocaleIn applies the In predicate on the "locale" field.
func LocaleIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldLocale, vs...))
}

// LocaleNotIn applies the NotIn predicate on the "locale" field.
func LocaleNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldLocale, vs...))
}

// LocaleGT applies the GT predicate on the "locale" field.
func LocaleGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldLocale, v))
}

// LocaleGTE applies the GTE predicate on the "locale" field.
func LocaleGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldLocale, v))
}

// LocaleLT applies the LT predicate on the "locale" field.
func LocaleLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldLocale, v))
}

// LocaleLTE applies the LTE predicate on the "locale" field.
func LocaleLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldLocale, v))
}

// LocaleContains applies the Contains predicate on the "locale" field.
func LocaleContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldLocale, v))
}

// LocaleHasPrefix applies the HasPrefix predicate on the "locale" field.
func LocaleHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldLocale, v))
}

// LocaleHasSuffix applies the HasSuffix predicate on the "locale" field.
func LocaleHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldLocale, v))
}

// LocaleIsNil applies the IsNil predicate on the "locale" field.
func LocaleIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldLocale))
}

// LocaleNotNil applies the NotNil predicate on the "locale" field.
func LocaleNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldLocale))
}

// LocaleEqualFold applies the EqualFold predicate on the "locale" field.
func LocaleEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldLocale, v))
}

// LocaleContainsFold applies the ContainsFold predicate on the "locale" field.
func LocaleContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldLocale, v))
}

// HasIdentities applies the HasEdge predicate on the "identities" edge.
func HasIdentities() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IdentitiesTable, IdentitiesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Identity
		step.Edge.Schema = schemaConfig.Identity
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIdentitiesWith applies the HasEdge predicate on the "identities" edge with a given conditions (other predicates).
func HasIdentitiesWith(preds ...predicate.Identity) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newIdentitiesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Identity
		step.Edge.Schema = schemaConfig.Identity
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomerSettings applies the HasEdge predicate on the "customer_settings" edge.
func HasCustomerSettings() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CustomerSettingsTable, CustomerSettingsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.CustomerSetting
		step.Edge.Schema = schemaConfig.CustomerSetting
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerSettingsWith applies the HasEdge predicate on the "customer_settings" edge with a given conditions (other predicates).
func HasCustomerSettingsWith(preds ...predicate.CustomerSetting) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newCustomerSettingsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.CustomerSetting
		step.Edge.Schema = schemaConfig.CustomerSetting
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.NotPredicates(p))
}
