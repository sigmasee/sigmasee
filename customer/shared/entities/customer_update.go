// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customer"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customersetting"
	"github.com/sigmasee/sigmasee/customer/shared/entities/identity"
	"github.com/sigmasee/sigmasee/customer/shared/entities/predicate"

	"github.com/sigmasee/sigmasee/customer/shared/entities/internal"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CustomerUpdate) SetCreatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetModifiedAt sets the "modified_at" field.
func (cu *CustomerUpdate) SetModifiedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetModifiedAt(t)
	return cu
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableModifiedAt(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetModifiedAt(*t)
	}
	return cu
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (cu *CustomerUpdate) ClearModifiedAt() *CustomerUpdate {
	cu.mutation.ClearModifiedAt()
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CustomerUpdate) SetDeletedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableDeletedAt(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CustomerUpdate) ClearDeletedAt() *CustomerUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetDesignation sets the "designation" field.
func (cu *CustomerUpdate) SetDesignation(s string) *CustomerUpdate {
	cu.mutation.SetDesignation(s)
	return cu
}

// SetNillableDesignation sets the "designation" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableDesignation(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetDesignation(*s)
	}
	return cu
}

// ClearDesignation clears the value of the "designation" field.
func (cu *CustomerUpdate) ClearDesignation() *CustomerUpdate {
	cu.mutation.ClearDesignation()
	return cu
}

// SetTitle sets the "title" field.
func (cu *CustomerUpdate) SetTitle(s string) *CustomerUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableTitle(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// ClearTitle clears the value of the "title" field.
func (cu *CustomerUpdate) ClearTitle() *CustomerUpdate {
	cu.mutation.ClearTitle()
	return cu
}

// SetName sets the "name" field.
func (cu *CustomerUpdate) SetName(s string) *CustomerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *CustomerUpdate) ClearName() *CustomerUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetGivenName sets the "given_name" field.
func (cu *CustomerUpdate) SetGivenName(s string) *CustomerUpdate {
	cu.mutation.SetGivenName(s)
	return cu
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableGivenName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetGivenName(*s)
	}
	return cu
}

// ClearGivenName clears the value of the "given_name" field.
func (cu *CustomerUpdate) ClearGivenName() *CustomerUpdate {
	cu.mutation.ClearGivenName()
	return cu
}

// SetMiddleName sets the "middle_name" field.
func (cu *CustomerUpdate) SetMiddleName(s string) *CustomerUpdate {
	cu.mutation.SetMiddleName(s)
	return cu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableMiddleName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetMiddleName(*s)
	}
	return cu
}

// ClearMiddleName clears the value of the "middle_name" field.
func (cu *CustomerUpdate) ClearMiddleName() *CustomerUpdate {
	cu.mutation.ClearMiddleName()
	return cu
}

// SetFamilyName sets the "family_name" field.
func (cu *CustomerUpdate) SetFamilyName(s string) *CustomerUpdate {
	cu.mutation.SetFamilyName(s)
	return cu
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableFamilyName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetFamilyName(*s)
	}
	return cu
}

// ClearFamilyName clears the value of the "family_name" field.
func (cu *CustomerUpdate) ClearFamilyName() *CustomerUpdate {
	cu.mutation.ClearFamilyName()
	return cu
}

// SetPhotoURL sets the "photo_url" field.
func (cu *CustomerUpdate) SetPhotoURL(s string) *CustomerUpdate {
	cu.mutation.SetPhotoURL(s)
	return cu
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePhotoURL(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPhotoURL(*s)
	}
	return cu
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (cu *CustomerUpdate) ClearPhotoURL() *CustomerUpdate {
	cu.mutation.ClearPhotoURL()
	return cu
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (cu *CustomerUpdate) SetPhotoURL24(s string) *CustomerUpdate {
	cu.mutation.SetPhotoURL24(s)
	return cu
}

// SetNillablePhotoURL24 sets the "photo_url_24" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePhotoURL24(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPhotoURL24(*s)
	}
	return cu
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (cu *CustomerUpdate) ClearPhotoURL24() *CustomerUpdate {
	cu.mutation.ClearPhotoURL24()
	return cu
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (cu *CustomerUpdate) SetPhotoURL32(s string) *CustomerUpdate {
	cu.mutation.SetPhotoURL32(s)
	return cu
}

// SetNillablePhotoURL32 sets the "photo_url_32" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePhotoURL32(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPhotoURL32(*s)
	}
	return cu
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (cu *CustomerUpdate) ClearPhotoURL32() *CustomerUpdate {
	cu.mutation.ClearPhotoURL32()
	return cu
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (cu *CustomerUpdate) SetPhotoURL48(s string) *CustomerUpdate {
	cu.mutation.SetPhotoURL48(s)
	return cu
}

// SetNillablePhotoURL48 sets the "photo_url_48" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePhotoURL48(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPhotoURL48(*s)
	}
	return cu
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (cu *CustomerUpdate) ClearPhotoURL48() *CustomerUpdate {
	cu.mutation.ClearPhotoURL48()
	return cu
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (cu *CustomerUpdate) SetPhotoURL72(s string) *CustomerUpdate {
	cu.mutation.SetPhotoURL72(s)
	return cu
}

// SetNillablePhotoURL72 sets the "photo_url_72" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePhotoURL72(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPhotoURL72(*s)
	}
	return cu
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (cu *CustomerUpdate) ClearPhotoURL72() *CustomerUpdate {
	cu.mutation.ClearPhotoURL72()
	return cu
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (cu *CustomerUpdate) SetPhotoURL192(s string) *CustomerUpdate {
	cu.mutation.SetPhotoURL192(s)
	return cu
}

// SetNillablePhotoURL192 sets the "photo_url_192" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePhotoURL192(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPhotoURL192(*s)
	}
	return cu
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (cu *CustomerUpdate) ClearPhotoURL192() *CustomerUpdate {
	cu.mutation.ClearPhotoURL192()
	return cu
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (cu *CustomerUpdate) SetPhotoURL512(s string) *CustomerUpdate {
	cu.mutation.SetPhotoURL512(s)
	return cu
}

// SetNillablePhotoURL512 sets the "photo_url_512" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePhotoURL512(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPhotoURL512(*s)
	}
	return cu
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (cu *CustomerUpdate) ClearPhotoURL512() *CustomerUpdate {
	cu.mutation.ClearPhotoURL512()
	return cu
}

// SetTimezone sets the "timezone" field.
func (cu *CustomerUpdate) SetTimezone(s string) *CustomerUpdate {
	cu.mutation.SetTimezone(s)
	return cu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableTimezone(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetTimezone(*s)
	}
	return cu
}

// ClearTimezone clears the value of the "timezone" field.
func (cu *CustomerUpdate) ClearTimezone() *CustomerUpdate {
	cu.mutation.ClearTimezone()
	return cu
}

// SetLocale sets the "locale" field.
func (cu *CustomerUpdate) SetLocale(s string) *CustomerUpdate {
	cu.mutation.SetLocale(s)
	return cu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableLocale(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetLocale(*s)
	}
	return cu
}

// ClearLocale clears the value of the "locale" field.
func (cu *CustomerUpdate) ClearLocale() *CustomerUpdate {
	cu.mutation.ClearLocale()
	return cu
}

// AddIdentityIDs adds the "identities" edge to the Identity entity by IDs.
func (cu *CustomerUpdate) AddIdentityIDs(ids ...string) *CustomerUpdate {
	cu.mutation.AddIdentityIDs(ids...)
	return cu
}

// AddIdentities adds the "identities" edges to the Identity entity.
func (cu *CustomerUpdate) AddIdentities(i ...*Identity) *CustomerUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.AddIdentityIDs(ids...)
}

// SetCustomerSettingsID sets the "customer_settings" edge to the CustomerSetting entity by ID.
func (cu *CustomerUpdate) SetCustomerSettingsID(id string) *CustomerUpdate {
	cu.mutation.SetCustomerSettingsID(id)
	return cu
}

// SetNillableCustomerSettingsID sets the "customer_settings" edge to the CustomerSetting entity by ID if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerSettingsID(id *string) *CustomerUpdate {
	if id != nil {
		cu = cu.SetCustomerSettingsID(*id)
	}
	return cu
}

// SetCustomerSettings sets the "customer_settings" edge to the CustomerSetting entity.
func (cu *CustomerUpdate) SetCustomerSettings(c *CustomerSetting) *CustomerUpdate {
	return cu.SetCustomerSettingsID(c.ID)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearIdentities clears all "identities" edges to the Identity entity.
func (cu *CustomerUpdate) ClearIdentities() *CustomerUpdate {
	cu.mutation.ClearIdentities()
	return cu
}

// RemoveIdentityIDs removes the "identities" edge to Identity entities by IDs.
func (cu *CustomerUpdate) RemoveIdentityIDs(ids ...string) *CustomerUpdate {
	cu.mutation.RemoveIdentityIDs(ids...)
	return cu
}

// RemoveIdentities removes "identities" edges to Identity entities.
func (cu *CustomerUpdate) RemoveIdentities(i ...*Identity) *CustomerUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.RemoveIdentityIDs(ids...)
}

// ClearCustomerSettings clears the "customer_settings" edge to the CustomerSetting entity.
func (cu *CustomerUpdate) ClearCustomerSettings() *CustomerUpdate {
	cu.mutation.ClearCustomerSettings()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CustomerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.ModifiedAt(); ok {
		_spec.SetField(customer.FieldModifiedAt, field.TypeTime, value)
	}
	if cu.mutation.ModifiedAtCleared() {
		_spec.ClearField(customer.FieldModifiedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(customer.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(customer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Designation(); ok {
		_spec.SetField(customer.FieldDesignation, field.TypeString, value)
	}
	if cu.mutation.DesignationCleared() {
		_spec.ClearField(customer.FieldDesignation, field.TypeString)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(customer.FieldTitle, field.TypeString, value)
	}
	if cu.mutation.TitleCleared() {
		_spec.ClearField(customer.FieldTitle, field.TypeString)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(customer.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.GivenName(); ok {
		_spec.SetField(customer.FieldGivenName, field.TypeString, value)
	}
	if cu.mutation.GivenNameCleared() {
		_spec.ClearField(customer.FieldGivenName, field.TypeString)
	}
	if value, ok := cu.mutation.MiddleName(); ok {
		_spec.SetField(customer.FieldMiddleName, field.TypeString, value)
	}
	if cu.mutation.MiddleNameCleared() {
		_spec.ClearField(customer.FieldMiddleName, field.TypeString)
	}
	if value, ok := cu.mutation.FamilyName(); ok {
		_spec.SetField(customer.FieldFamilyName, field.TypeString, value)
	}
	if cu.mutation.FamilyNameCleared() {
		_spec.ClearField(customer.FieldFamilyName, field.TypeString)
	}
	if value, ok := cu.mutation.PhotoURL(); ok {
		_spec.SetField(customer.FieldPhotoURL, field.TypeString, value)
	}
	if cu.mutation.PhotoURLCleared() {
		_spec.ClearField(customer.FieldPhotoURL, field.TypeString)
	}
	if value, ok := cu.mutation.PhotoURL24(); ok {
		_spec.SetField(customer.FieldPhotoURL24, field.TypeString, value)
	}
	if cu.mutation.PhotoURL24Cleared() {
		_spec.ClearField(customer.FieldPhotoURL24, field.TypeString)
	}
	if value, ok := cu.mutation.PhotoURL32(); ok {
		_spec.SetField(customer.FieldPhotoURL32, field.TypeString, value)
	}
	if cu.mutation.PhotoURL32Cleared() {
		_spec.ClearField(customer.FieldPhotoURL32, field.TypeString)
	}
	if value, ok := cu.mutation.PhotoURL48(); ok {
		_spec.SetField(customer.FieldPhotoURL48, field.TypeString, value)
	}
	if cu.mutation.PhotoURL48Cleared() {
		_spec.ClearField(customer.FieldPhotoURL48, field.TypeString)
	}
	if value, ok := cu.mutation.PhotoURL72(); ok {
		_spec.SetField(customer.FieldPhotoURL72, field.TypeString, value)
	}
	if cu.mutation.PhotoURL72Cleared() {
		_spec.ClearField(customer.FieldPhotoURL72, field.TypeString)
	}
	if value, ok := cu.mutation.PhotoURL192(); ok {
		_spec.SetField(customer.FieldPhotoURL192, field.TypeString, value)
	}
	if cu.mutation.PhotoURL192Cleared() {
		_spec.ClearField(customer.FieldPhotoURL192, field.TypeString)
	}
	if value, ok := cu.mutation.PhotoURL512(); ok {
		_spec.SetField(customer.FieldPhotoURL512, field.TypeString, value)
	}
	if cu.mutation.PhotoURL512Cleared() {
		_spec.ClearField(customer.FieldPhotoURL512, field.TypeString)
	}
	if value, ok := cu.mutation.Timezone(); ok {
		_spec.SetField(customer.FieldTimezone, field.TypeString, value)
	}
	if cu.mutation.TimezoneCleared() {
		_spec.ClearField(customer.FieldTimezone, field.TypeString)
	}
	if value, ok := cu.mutation.Locale(); ok {
		_spec.SetField(customer.FieldLocale, field.TypeString, value)
	}
	if cu.mutation.LocaleCleared() {
		_spec.ClearField(customer.FieldLocale, field.TypeString)
	}
	if cu.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.IdentitiesTable,
			Columns: []string{customer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.Identity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedIdentitiesIDs(); len(nodes) > 0 && !cu.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.IdentitiesTable,
			Columns: []string{customer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.Identity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.IdentitiesTable,
			Columns: []string{customer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.Identity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomerSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.CustomerSettingsTable,
			Columns: []string{customer.CustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.CustomerSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.CustomerSettingsTable,
			Columns: []string{customer.CustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.CustomerSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cu.schemaConfig.Customer
	ctx = internal.NewSchemaConfigContext(ctx, cu.schemaConfig)
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CustomerUpdateOne) SetCreatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetModifiedAt sets the "modified_at" field.
func (cuo *CustomerUpdateOne) SetModifiedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetModifiedAt(t)
	return cuo
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableModifiedAt(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetModifiedAt(*t)
	}
	return cuo
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (cuo *CustomerUpdateOne) ClearModifiedAt() *CustomerUpdateOne {
	cuo.mutation.ClearModifiedAt()
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CustomerUpdateOne) SetDeletedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableDeletedAt(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CustomerUpdateOne) ClearDeletedAt() *CustomerUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetDesignation sets the "designation" field.
func (cuo *CustomerUpdateOne) SetDesignation(s string) *CustomerUpdateOne {
	cuo.mutation.SetDesignation(s)
	return cuo
}

// SetNillableDesignation sets the "designation" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableDesignation(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetDesignation(*s)
	}
	return cuo
}

// ClearDesignation clears the value of the "designation" field.
func (cuo *CustomerUpdateOne) ClearDesignation() *CustomerUpdateOne {
	cuo.mutation.ClearDesignation()
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *CustomerUpdateOne) SetTitle(s string) *CustomerUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableTitle(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// ClearTitle clears the value of the "title" field.
func (cuo *CustomerUpdateOne) ClearTitle() *CustomerUpdateOne {
	cuo.mutation.ClearTitle()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CustomerUpdateOne) SetName(s string) *CustomerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *CustomerUpdateOne) ClearName() *CustomerUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetGivenName sets the "given_name" field.
func (cuo *CustomerUpdateOne) SetGivenName(s string) *CustomerUpdateOne {
	cuo.mutation.SetGivenName(s)
	return cuo
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableGivenName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetGivenName(*s)
	}
	return cuo
}

// ClearGivenName clears the value of the "given_name" field.
func (cuo *CustomerUpdateOne) ClearGivenName() *CustomerUpdateOne {
	cuo.mutation.ClearGivenName()
	return cuo
}

// SetMiddleName sets the "middle_name" field.
func (cuo *CustomerUpdateOne) SetMiddleName(s string) *CustomerUpdateOne {
	cuo.mutation.SetMiddleName(s)
	return cuo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableMiddleName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetMiddleName(*s)
	}
	return cuo
}

// ClearMiddleName clears the value of the "middle_name" field.
func (cuo *CustomerUpdateOne) ClearMiddleName() *CustomerUpdateOne {
	cuo.mutation.ClearMiddleName()
	return cuo
}

// SetFamilyName sets the "family_name" field.
func (cuo *CustomerUpdateOne) SetFamilyName(s string) *CustomerUpdateOne {
	cuo.mutation.SetFamilyName(s)
	return cuo
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableFamilyName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetFamilyName(*s)
	}
	return cuo
}

// ClearFamilyName clears the value of the "family_name" field.
func (cuo *CustomerUpdateOne) ClearFamilyName() *CustomerUpdateOne {
	cuo.mutation.ClearFamilyName()
	return cuo
}

// SetPhotoURL sets the "photo_url" field.
func (cuo *CustomerUpdateOne) SetPhotoURL(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhotoURL(s)
	return cuo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePhotoURL(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPhotoURL(*s)
	}
	return cuo
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (cuo *CustomerUpdateOne) ClearPhotoURL() *CustomerUpdateOne {
	cuo.mutation.ClearPhotoURL()
	return cuo
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (cuo *CustomerUpdateOne) SetPhotoURL24(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhotoURL24(s)
	return cuo
}

// SetNillablePhotoURL24 sets the "photo_url_24" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePhotoURL24(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPhotoURL24(*s)
	}
	return cuo
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (cuo *CustomerUpdateOne) ClearPhotoURL24() *CustomerUpdateOne {
	cuo.mutation.ClearPhotoURL24()
	return cuo
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (cuo *CustomerUpdateOne) SetPhotoURL32(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhotoURL32(s)
	return cuo
}

// SetNillablePhotoURL32 sets the "photo_url_32" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePhotoURL32(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPhotoURL32(*s)
	}
	return cuo
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (cuo *CustomerUpdateOne) ClearPhotoURL32() *CustomerUpdateOne {
	cuo.mutation.ClearPhotoURL32()
	return cuo
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (cuo *CustomerUpdateOne) SetPhotoURL48(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhotoURL48(s)
	return cuo
}

// SetNillablePhotoURL48 sets the "photo_url_48" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePhotoURL48(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPhotoURL48(*s)
	}
	return cuo
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (cuo *CustomerUpdateOne) ClearPhotoURL48() *CustomerUpdateOne {
	cuo.mutation.ClearPhotoURL48()
	return cuo
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (cuo *CustomerUpdateOne) SetPhotoURL72(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhotoURL72(s)
	return cuo
}

// SetNillablePhotoURL72 sets the "photo_url_72" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePhotoURL72(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPhotoURL72(*s)
	}
	return cuo
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (cuo *CustomerUpdateOne) ClearPhotoURL72() *CustomerUpdateOne {
	cuo.mutation.ClearPhotoURL72()
	return cuo
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (cuo *CustomerUpdateOne) SetPhotoURL192(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhotoURL192(s)
	return cuo
}

// SetNillablePhotoURL192 sets the "photo_url_192" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePhotoURL192(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPhotoURL192(*s)
	}
	return cuo
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (cuo *CustomerUpdateOne) ClearPhotoURL192() *CustomerUpdateOne {
	cuo.mutation.ClearPhotoURL192()
	return cuo
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (cuo *CustomerUpdateOne) SetPhotoURL512(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhotoURL512(s)
	return cuo
}

// SetNillablePhotoURL512 sets the "photo_url_512" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePhotoURL512(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPhotoURL512(*s)
	}
	return cuo
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (cuo *CustomerUpdateOne) ClearPhotoURL512() *CustomerUpdateOne {
	cuo.mutation.ClearPhotoURL512()
	return cuo
}

// SetTimezone sets the "timezone" field.
func (cuo *CustomerUpdateOne) SetTimezone(s string) *CustomerUpdateOne {
	cuo.mutation.SetTimezone(s)
	return cuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableTimezone(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetTimezone(*s)
	}
	return cuo
}

// ClearTimezone clears the value of the "timezone" field.
func (cuo *CustomerUpdateOne) ClearTimezone() *CustomerUpdateOne {
	cuo.mutation.ClearTimezone()
	return cuo
}

// SetLocale sets the "locale" field.
func (cuo *CustomerUpdateOne) SetLocale(s string) *CustomerUpdateOne {
	cuo.mutation.SetLocale(s)
	return cuo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableLocale(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetLocale(*s)
	}
	return cuo
}

// ClearLocale clears the value of the "locale" field.
func (cuo *CustomerUpdateOne) ClearLocale() *CustomerUpdateOne {
	cuo.mutation.ClearLocale()
	return cuo
}

// AddIdentityIDs adds the "identities" edge to the Identity entity by IDs.
func (cuo *CustomerUpdateOne) AddIdentityIDs(ids ...string) *CustomerUpdateOne {
	cuo.mutation.AddIdentityIDs(ids...)
	return cuo
}

// AddIdentities adds the "identities" edges to the Identity entity.
func (cuo *CustomerUpdateOne) AddIdentities(i ...*Identity) *CustomerUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.AddIdentityIDs(ids...)
}

// SetCustomerSettingsID sets the "customer_settings" edge to the CustomerSetting entity by ID.
func (cuo *CustomerUpdateOne) SetCustomerSettingsID(id string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerSettingsID(id)
	return cuo
}

// SetNillableCustomerSettingsID sets the "customer_settings" edge to the CustomerSetting entity by ID if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerSettingsID(id *string) *CustomerUpdateOne {
	if id != nil {
		cuo = cuo.SetCustomerSettingsID(*id)
	}
	return cuo
}

// SetCustomerSettings sets the "customer_settings" edge to the CustomerSetting entity.
func (cuo *CustomerUpdateOne) SetCustomerSettings(c *CustomerSetting) *CustomerUpdateOne {
	return cuo.SetCustomerSettingsID(c.ID)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearIdentities clears all "identities" edges to the Identity entity.
func (cuo *CustomerUpdateOne) ClearIdentities() *CustomerUpdateOne {
	cuo.mutation.ClearIdentities()
	return cuo
}

// RemoveIdentityIDs removes the "identities" edge to Identity entities by IDs.
func (cuo *CustomerUpdateOne) RemoveIdentityIDs(ids ...string) *CustomerUpdateOne {
	cuo.mutation.RemoveIdentityIDs(ids...)
	return cuo
}

// RemoveIdentities removes "identities" edges to Identity entities.
func (cuo *CustomerUpdateOne) RemoveIdentities(i ...*Identity) *CustomerUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.RemoveIdentityIDs(ids...)
}

// ClearCustomerSettings clears the "customer_settings" edge to the CustomerSetting entity.
func (cuo *CustomerUpdateOne) ClearCustomerSettings() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerSettings()
	return cuo
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CustomerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.ModifiedAt(); ok {
		_spec.SetField(customer.FieldModifiedAt, field.TypeTime, value)
	}
	if cuo.mutation.ModifiedAtCleared() {
		_spec.ClearField(customer.FieldModifiedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(customer.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(customer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Designation(); ok {
		_spec.SetField(customer.FieldDesignation, field.TypeString, value)
	}
	if cuo.mutation.DesignationCleared() {
		_spec.ClearField(customer.FieldDesignation, field.TypeString)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(customer.FieldTitle, field.TypeString, value)
	}
	if cuo.mutation.TitleCleared() {
		_spec.ClearField(customer.FieldTitle, field.TypeString)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(customer.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.GivenName(); ok {
		_spec.SetField(customer.FieldGivenName, field.TypeString, value)
	}
	if cuo.mutation.GivenNameCleared() {
		_spec.ClearField(customer.FieldGivenName, field.TypeString)
	}
	if value, ok := cuo.mutation.MiddleName(); ok {
		_spec.SetField(customer.FieldMiddleName, field.TypeString, value)
	}
	if cuo.mutation.MiddleNameCleared() {
		_spec.ClearField(customer.FieldMiddleName, field.TypeString)
	}
	if value, ok := cuo.mutation.FamilyName(); ok {
		_spec.SetField(customer.FieldFamilyName, field.TypeString, value)
	}
	if cuo.mutation.FamilyNameCleared() {
		_spec.ClearField(customer.FieldFamilyName, field.TypeString)
	}
	if value, ok := cuo.mutation.PhotoURL(); ok {
		_spec.SetField(customer.FieldPhotoURL, field.TypeString, value)
	}
	if cuo.mutation.PhotoURLCleared() {
		_spec.ClearField(customer.FieldPhotoURL, field.TypeString)
	}
	if value, ok := cuo.mutation.PhotoURL24(); ok {
		_spec.SetField(customer.FieldPhotoURL24, field.TypeString, value)
	}
	if cuo.mutation.PhotoURL24Cleared() {
		_spec.ClearField(customer.FieldPhotoURL24, field.TypeString)
	}
	if value, ok := cuo.mutation.PhotoURL32(); ok {
		_spec.SetField(customer.FieldPhotoURL32, field.TypeString, value)
	}
	if cuo.mutation.PhotoURL32Cleared() {
		_spec.ClearField(customer.FieldPhotoURL32, field.TypeString)
	}
	if value, ok := cuo.mutation.PhotoURL48(); ok {
		_spec.SetField(customer.FieldPhotoURL48, field.TypeString, value)
	}
	if cuo.mutation.PhotoURL48Cleared() {
		_spec.ClearField(customer.FieldPhotoURL48, field.TypeString)
	}
	if value, ok := cuo.mutation.PhotoURL72(); ok {
		_spec.SetField(customer.FieldPhotoURL72, field.TypeString, value)
	}
	if cuo.mutation.PhotoURL72Cleared() {
		_spec.ClearField(customer.FieldPhotoURL72, field.TypeString)
	}
	if value, ok := cuo.mutation.PhotoURL192(); ok {
		_spec.SetField(customer.FieldPhotoURL192, field.TypeString, value)
	}
	if cuo.mutation.PhotoURL192Cleared() {
		_spec.ClearField(customer.FieldPhotoURL192, field.TypeString)
	}
	if value, ok := cuo.mutation.PhotoURL512(); ok {
		_spec.SetField(customer.FieldPhotoURL512, field.TypeString, value)
	}
	if cuo.mutation.PhotoURL512Cleared() {
		_spec.ClearField(customer.FieldPhotoURL512, field.TypeString)
	}
	if value, ok := cuo.mutation.Timezone(); ok {
		_spec.SetField(customer.FieldTimezone, field.TypeString, value)
	}
	if cuo.mutation.TimezoneCleared() {
		_spec.ClearField(customer.FieldTimezone, field.TypeString)
	}
	if value, ok := cuo.mutation.Locale(); ok {
		_spec.SetField(customer.FieldLocale, field.TypeString, value)
	}
	if cuo.mutation.LocaleCleared() {
		_spec.ClearField(customer.FieldLocale, field.TypeString)
	}
	if cuo.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.IdentitiesTable,
			Columns: []string{customer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.Identity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedIdentitiesIDs(); len(nodes) > 0 && !cuo.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.IdentitiesTable,
			Columns: []string{customer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.Identity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.IdentitiesTable,
			Columns: []string{customer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.Identity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomerSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.CustomerSettingsTable,
			Columns: []string{customer.CustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.CustomerSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.CustomerSettingsTable,
			Columns: []string{customer.CustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.CustomerSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cuo.schemaConfig.Customer
	ctx = internal.NewSchemaConfigContext(ctx, cuo.schemaConfig)
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
