// Code generated by ent, DO NOT EDIT.

package entities

import (
	"github.com/sigmasee/sigmasee/customer/shared/entities/customer"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customeroutbox"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customersetting"
	"github.com/sigmasee/sigmasee/customer/shared/entities/identity"
	"github.com/sigmasee/sigmasee/customer/shared/entities/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 4)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   customer.Table,
			Columns: customer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: customer.FieldID,
			},
		},
		Type: "Customer",
		Fields: map[string]*sqlgraph.FieldSpec{
			customer.FieldCreatedAt:   {Type: field.TypeTime, Column: customer.FieldCreatedAt},
			customer.FieldModifiedAt:  {Type: field.TypeTime, Column: customer.FieldModifiedAt},
			customer.FieldDeletedAt:   {Type: field.TypeTime, Column: customer.FieldDeletedAt},
			customer.FieldDesignation: {Type: field.TypeString, Column: customer.FieldDesignation},
			customer.FieldTitle:       {Type: field.TypeString, Column: customer.FieldTitle},
			customer.FieldName:        {Type: field.TypeString, Column: customer.FieldName},
			customer.FieldGivenName:   {Type: field.TypeString, Column: customer.FieldGivenName},
			customer.FieldMiddleName:  {Type: field.TypeString, Column: customer.FieldMiddleName},
			customer.FieldFamilyName:  {Type: field.TypeString, Column: customer.FieldFamilyName},
			customer.FieldPhotoURL:    {Type: field.TypeString, Column: customer.FieldPhotoURL},
			customer.FieldPhotoURL24:  {Type: field.TypeString, Column: customer.FieldPhotoURL24},
			customer.FieldPhotoURL32:  {Type: field.TypeString, Column: customer.FieldPhotoURL32},
			customer.FieldPhotoURL48:  {Type: field.TypeString, Column: customer.FieldPhotoURL48},
			customer.FieldPhotoURL72:  {Type: field.TypeString, Column: customer.FieldPhotoURL72},
			customer.FieldPhotoURL192: {Type: field.TypeString, Column: customer.FieldPhotoURL192},
			customer.FieldPhotoURL512: {Type: field.TypeString, Column: customer.FieldPhotoURL512},
			customer.FieldTimezone:    {Type: field.TypeString, Column: customer.FieldTimezone},
			customer.FieldLocale:      {Type: field.TypeString, Column: customer.FieldLocale},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   customeroutbox.Table,
			Columns: customeroutbox.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: customeroutbox.FieldID,
			},
		},
		Type: "CustomerOutbox",
		Fields: map[string]*sqlgraph.FieldSpec{
			customeroutbox.FieldTimestamp:        {Type: field.TypeTime, Column: customeroutbox.FieldTimestamp},
			customeroutbox.FieldTopic:            {Type: field.TypeString, Column: customeroutbox.FieldTopic},
			customeroutbox.FieldKey:              {Type: field.TypeBytes, Column: customeroutbox.FieldKey},
			customeroutbox.FieldPayload:          {Type: field.TypeBytes, Column: customeroutbox.FieldPayload},
			customeroutbox.FieldHeaders:          {Type: field.TypeJSON, Column: customeroutbox.FieldHeaders},
			customeroutbox.FieldRetryCount:       {Type: field.TypeInt, Column: customeroutbox.FieldRetryCount},
			customeroutbox.FieldStatus:           {Type: field.TypeEnum, Column: customeroutbox.FieldStatus},
			customeroutbox.FieldLastRetry:        {Type: field.TypeTime, Column: customeroutbox.FieldLastRetry},
			customeroutbox.FieldProcessingErrors: {Type: field.TypeJSON, Column: customeroutbox.FieldProcessingErrors},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   customersetting.Table,
			Columns: customersetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: customersetting.FieldID,
			},
		},
		Type: "CustomerSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			customersetting.FieldCreatedAt:  {Type: field.TypeTime, Column: customersetting.FieldCreatedAt},
			customersetting.FieldModifiedAt: {Type: field.TypeTime, Column: customersetting.FieldModifiedAt},
			customersetting.FieldDeletedAt:  {Type: field.TypeTime, Column: customersetting.FieldDeletedAt},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   identity.Table,
			Columns: identity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: identity.FieldID,
			},
		},
		Type: "Identity",
		Fields: map[string]*sqlgraph.FieldSpec{
			identity.FieldCreatedAt:     {Type: field.TypeTime, Column: identity.FieldCreatedAt},
			identity.FieldModifiedAt:    {Type: field.TypeTime, Column: identity.FieldModifiedAt},
			identity.FieldDeletedAt:     {Type: field.TypeTime, Column: identity.FieldDeletedAt},
			identity.FieldEmail:         {Type: field.TypeString, Column: identity.FieldEmail},
			identity.FieldEmailVerified: {Type: field.TypeBool, Column: identity.FieldEmailVerified},
		},
	}
	graph.MustAddE(
		"identities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.IdentitiesTable,
			Columns: []string{customer.IdentitiesColumn},
			Bidi:    false,
		},
		"Customer",
		"Identity",
	)
	graph.MustAddE(
		"customer_settings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.CustomerSettingsTable,
			Columns: []string{customer.CustomerSettingsColumn},
			Bidi:    false,
		},
		"Customer",
		"CustomerSetting",
	)
	graph.MustAddE(
		"customer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customersetting.CustomerTable,
			Columns: []string{customersetting.CustomerColumn},
			Bidi:    false,
		},
		"CustomerSetting",
		"Customer",
	)
	graph.MustAddE(
		"customer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identity.CustomerTable,
			Columns: []string{identity.CustomerColumn},
			Bidi:    false,
		},
		"Identity",
		"Customer",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CustomerQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CustomerQuery builder.
func (cq *CustomerQuery) Filter() *CustomerFilter {
	return &CustomerFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CustomerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CustomerMutation builder.
func (m *CustomerMutation) Filter() *CustomerFilter {
	return &CustomerFilter{config: m.config, predicateAdder: m}
}

// CustomerFilter provides a generic filtering capability at runtime for CustomerQuery.
type CustomerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CustomerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CustomerFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(customer.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CustomerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(customer.FieldCreatedAt))
}

// WhereModifiedAt applies the entql time.Time predicate on the modified_at field.
func (f *CustomerFilter) WhereModifiedAt(p entql.TimeP) {
	f.Where(p.Field(customer.FieldModifiedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CustomerFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(customer.FieldDeletedAt))
}

// WhereDesignation applies the entql string predicate on the designation field.
func (f *CustomerFilter) WhereDesignation(p entql.StringP) {
	f.Where(p.Field(customer.FieldDesignation))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *CustomerFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(customer.FieldTitle))
}

// WhereName applies the entql string predicate on the name field.
func (f *CustomerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(customer.FieldName))
}

// WhereGivenName applies the entql string predicate on the given_name field.
func (f *CustomerFilter) WhereGivenName(p entql.StringP) {
	f.Where(p.Field(customer.FieldGivenName))
}

// WhereMiddleName applies the entql string predicate on the middle_name field.
func (f *CustomerFilter) WhereMiddleName(p entql.StringP) {
	f.Where(p.Field(customer.FieldMiddleName))
}

// WhereFamilyName applies the entql string predicate on the family_name field.
func (f *CustomerFilter) WhereFamilyName(p entql.StringP) {
	f.Where(p.Field(customer.FieldFamilyName))
}

// WherePhotoURL applies the entql string predicate on the photo_url field.
func (f *CustomerFilter) WherePhotoURL(p entql.StringP) {
	f.Where(p.Field(customer.FieldPhotoURL))
}

// WherePhotoURL24 applies the entql string predicate on the photo_url_24 field.
func (f *CustomerFilter) WherePhotoURL24(p entql.StringP) {
	f.Where(p.Field(customer.FieldPhotoURL24))
}

// WherePhotoURL32 applies the entql string predicate on the photo_url_32 field.
func (f *CustomerFilter) WherePhotoURL32(p entql.StringP) {
	f.Where(p.Field(customer.FieldPhotoURL32))
}

// WherePhotoURL48 applies the entql string predicate on the photo_url_48 field.
func (f *CustomerFilter) WherePhotoURL48(p entql.StringP) {
	f.Where(p.Field(customer.FieldPhotoURL48))
}

// WherePhotoURL72 applies the entql string predicate on the photo_url_72 field.
func (f *CustomerFilter) WherePhotoURL72(p entql.StringP) {
	f.Where(p.Field(customer.FieldPhotoURL72))
}

// WherePhotoURL192 applies the entql string predicate on the photo_url_192 field.
func (f *CustomerFilter) WherePhotoURL192(p entql.StringP) {
	f.Where(p.Field(customer.FieldPhotoURL192))
}

// WherePhotoURL512 applies the entql string predicate on the photo_url_512 field.
func (f *CustomerFilter) WherePhotoURL512(p entql.StringP) {
	f.Where(p.Field(customer.FieldPhotoURL512))
}

// WhereTimezone applies the entql string predicate on the timezone field.
func (f *CustomerFilter) WhereTimezone(p entql.StringP) {
	f.Where(p.Field(customer.FieldTimezone))
}

// WhereLocale applies the entql string predicate on the locale field.
func (f *CustomerFilter) WhereLocale(p entql.StringP) {
	f.Where(p.Field(customer.FieldLocale))
}

// WhereHasIdentities applies a predicate to check if query has an edge identities.
func (f *CustomerFilter) WhereHasIdentities() {
	f.Where(entql.HasEdge("identities"))
}

// WhereHasIdentitiesWith applies a predicate to check if query has an edge identities with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasIdentitiesWith(preds ...predicate.Identity) {
	f.Where(entql.HasEdgeWith("identities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCustomerSettings applies a predicate to check if query has an edge customer_settings.
func (f *CustomerFilter) WhereHasCustomerSettings() {
	f.Where(entql.HasEdge("customer_settings"))
}

// WhereHasCustomerSettingsWith applies a predicate to check if query has an edge customer_settings with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasCustomerSettingsWith(preds ...predicate.CustomerSetting) {
	f.Where(entql.HasEdgeWith("customer_settings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (coq *CustomerOutboxQuery) addPredicate(pred func(s *sql.Selector)) {
	coq.predicates = append(coq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CustomerOutboxQuery builder.
func (coq *CustomerOutboxQuery) Filter() *CustomerOutboxFilter {
	return &CustomerOutboxFilter{config: coq.config, predicateAdder: coq}
}

// addPredicate implements the predicateAdder interface.
func (m *CustomerOutboxMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CustomerOutboxMutation builder.
func (m *CustomerOutboxMutation) Filter() *CustomerOutboxFilter {
	return &CustomerOutboxFilter{config: m.config, predicateAdder: m}
}

// CustomerOutboxFilter provides a generic filtering capability at runtime for CustomerOutboxQuery.
type CustomerOutboxFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CustomerOutboxFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CustomerOutboxFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(customeroutbox.FieldID))
}

// WhereTimestamp applies the entql time.Time predicate on the timestamp field.
func (f *CustomerOutboxFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(customeroutbox.FieldTimestamp))
}

// WhereTopic applies the entql string predicate on the topic field.
func (f *CustomerOutboxFilter) WhereTopic(p entql.StringP) {
	f.Where(p.Field(customeroutbox.FieldTopic))
}

// WhereKey applies the entql []byte predicate on the key field.
func (f *CustomerOutboxFilter) WhereKey(p entql.BytesP) {
	f.Where(p.Field(customeroutbox.FieldKey))
}

// WherePayload applies the entql []byte predicate on the payload field.
func (f *CustomerOutboxFilter) WherePayload(p entql.BytesP) {
	f.Where(p.Field(customeroutbox.FieldPayload))
}

// WhereHeaders applies the entql json.RawMessage predicate on the headers field.
func (f *CustomerOutboxFilter) WhereHeaders(p entql.BytesP) {
	f.Where(p.Field(customeroutbox.FieldHeaders))
}

// WhereRetryCount applies the entql int predicate on the retry_count field.
func (f *CustomerOutboxFilter) WhereRetryCount(p entql.IntP) {
	f.Where(p.Field(customeroutbox.FieldRetryCount))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *CustomerOutboxFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(customeroutbox.FieldStatus))
}

// WhereLastRetry applies the entql time.Time predicate on the last_retry field.
func (f *CustomerOutboxFilter) WhereLastRetry(p entql.TimeP) {
	f.Where(p.Field(customeroutbox.FieldLastRetry))
}

// WhereProcessingErrors applies the entql json.RawMessage predicate on the processing_errors field.
func (f *CustomerOutboxFilter) WhereProcessingErrors(p entql.BytesP) {
	f.Where(p.Field(customeroutbox.FieldProcessingErrors))
}

// addPredicate implements the predicateAdder interface.
func (csq *CustomerSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	csq.predicates = append(csq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CustomerSettingQuery builder.
func (csq *CustomerSettingQuery) Filter() *CustomerSettingFilter {
	return &CustomerSettingFilter{config: csq.config, predicateAdder: csq}
}

// addPredicate implements the predicateAdder interface.
func (m *CustomerSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CustomerSettingMutation builder.
func (m *CustomerSettingMutation) Filter() *CustomerSettingFilter {
	return &CustomerSettingFilter{config: m.config, predicateAdder: m}
}

// CustomerSettingFilter provides a generic filtering capability at runtime for CustomerSettingQuery.
type CustomerSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CustomerSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CustomerSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(customersetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CustomerSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(customersetting.FieldCreatedAt))
}

// WhereModifiedAt applies the entql time.Time predicate on the modified_at field.
func (f *CustomerSettingFilter) WhereModifiedAt(p entql.TimeP) {
	f.Where(p.Field(customersetting.FieldModifiedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CustomerSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(customersetting.FieldDeletedAt))
}

// WhereHasCustomer applies a predicate to check if query has an edge customer.
func (f *CustomerSettingFilter) WhereHasCustomer() {
	f.Where(entql.HasEdge("customer"))
}

// WhereHasCustomerWith applies a predicate to check if query has an edge customer with a given conditions (other predicates).
func (f *CustomerSettingFilter) WhereHasCustomerWith(preds ...predicate.Customer) {
	f.Where(entql.HasEdgeWith("customer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iq *IdentityQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IdentityQuery builder.
func (iq *IdentityQuery) Filter() *IdentityFilter {
	return &IdentityFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *IdentityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IdentityMutation builder.
func (m *IdentityMutation) Filter() *IdentityFilter {
	return &IdentityFilter{config: m.config, predicateAdder: m}
}

// IdentityFilter provides a generic filtering capability at runtime for IdentityQuery.
type IdentityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IdentityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *IdentityFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(identity.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IdentityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(identity.FieldCreatedAt))
}

// WhereModifiedAt applies the entql time.Time predicate on the modified_at field.
func (f *IdentityFilter) WhereModifiedAt(p entql.TimeP) {
	f.Where(p.Field(identity.FieldModifiedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *IdentityFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(identity.FieldDeletedAt))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *IdentityFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(identity.FieldEmail))
}

// WhereEmailVerified applies the entql bool predicate on the email_verified field.
func (f *IdentityFilter) WhereEmailVerified(p entql.BoolP) {
	f.Where(p.Field(identity.FieldEmailVerified))
}

// WhereHasCustomer applies a predicate to check if query has an edge customer.
func (f *IdentityFilter) WhereHasCustomer() {
	f.Where(entql.HasEdge("customer"))
}

// WhereHasCustomerWith applies a predicate to check if query has an edge customer with a given conditions (other predicates).
func (f *IdentityFilter) WhereHasCustomerWith(preds ...predicate.Customer) {
	f.Where(entql.HasEdgeWith("customer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
