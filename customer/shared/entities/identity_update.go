// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customer"
	"github.com/sigmasee/sigmasee/customer/shared/entities/identity"
	"github.com/sigmasee/sigmasee/customer/shared/entities/predicate"

	"github.com/sigmasee/sigmasee/customer/shared/entities/internal"
)

// IdentityUpdate is the builder for updating Identity entities.
type IdentityUpdate struct {
	config
	hooks     []Hook
	mutation  *IdentityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IdentityUpdate builder.
func (iu *IdentityUpdate) Where(ps ...predicate.Identity) *IdentityUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *IdentityUpdate) SetCreatedAt(t time.Time) *IdentityUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetModifiedAt sets the "modified_at" field.
func (iu *IdentityUpdate) SetModifiedAt(t time.Time) *IdentityUpdate {
	iu.mutation.SetModifiedAt(t)
	return iu
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableModifiedAt(t *time.Time) *IdentityUpdate {
	if t != nil {
		iu.SetModifiedAt(*t)
	}
	return iu
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (iu *IdentityUpdate) ClearModifiedAt() *IdentityUpdate {
	iu.mutation.ClearModifiedAt()
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *IdentityUpdate) SetDeletedAt(t time.Time) *IdentityUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableDeletedAt(t *time.Time) *IdentityUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *IdentityUpdate) ClearDeletedAt() *IdentityUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetEmail sets the "email" field.
func (iu *IdentityUpdate) SetEmail(s string) *IdentityUpdate {
	iu.mutation.SetEmail(s)
	return iu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableEmail(s *string) *IdentityUpdate {
	if s != nil {
		iu.SetEmail(*s)
	}
	return iu
}

// ClearEmail clears the value of the "email" field.
func (iu *IdentityUpdate) ClearEmail() *IdentityUpdate {
	iu.mutation.ClearEmail()
	return iu
}

// SetEmailVerified sets the "email_verified" field.
func (iu *IdentityUpdate) SetEmailVerified(b bool) *IdentityUpdate {
	iu.mutation.SetEmailVerified(b)
	return iu
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableEmailVerified(b *bool) *IdentityUpdate {
	if b != nil {
		iu.SetEmailVerified(*b)
	}
	return iu
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (iu *IdentityUpdate) ClearEmailVerified() *IdentityUpdate {
	iu.mutation.ClearEmailVerified()
	return iu
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (iu *IdentityUpdate) SetCustomerID(id string) *IdentityUpdate {
	iu.mutation.SetCustomerID(id)
	return iu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (iu *IdentityUpdate) SetCustomer(c *Customer) *IdentityUpdate {
	return iu.SetCustomerID(c.ID)
}

// Mutation returns the IdentityMutation object of the builder.
func (iu *IdentityUpdate) Mutation() *IdentityMutation {
	return iu.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (iu *IdentityUpdate) ClearCustomer() *IdentityUpdate {
	iu.mutation.ClearCustomer()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IdentityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IdentityUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IdentityUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IdentityUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IdentityUpdate) check() error {
	if _, ok := iu.mutation.CustomerID(); iu.mutation.CustomerCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "Identity.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *IdentityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IdentityUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *IdentityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(identity.Table, identity.Columns, sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(identity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.ModifiedAt(); ok {
		_spec.SetField(identity.FieldModifiedAt, field.TypeTime, value)
	}
	if iu.mutation.ModifiedAtCleared() {
		_spec.ClearField(identity.FieldModifiedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(identity.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(identity.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.Email(); ok {
		_spec.SetField(identity.FieldEmail, field.TypeString, value)
	}
	if iu.mutation.EmailCleared() {
		_spec.ClearField(identity.FieldEmail, field.TypeString)
	}
	if value, ok := iu.mutation.EmailVerified(); ok {
		_spec.SetField(identity.FieldEmailVerified, field.TypeBool, value)
	}
	if iu.mutation.EmailVerifiedCleared() {
		_spec.ClearField(identity.FieldEmailVerified, field.TypeBool)
	}
	if iu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identity.CustomerTable,
			Columns: []string{identity.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		edge.Schema = iu.schemaConfig.Identity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identity.CustomerTable,
			Columns: []string{identity.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		edge.Schema = iu.schemaConfig.Identity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iu.schemaConfig.Identity
	ctx = internal.NewSchemaConfigContext(ctx, iu.schemaConfig)
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IdentityUpdateOne is the builder for updating a single Identity entity.
type IdentityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IdentityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (iuo *IdentityUpdateOne) SetCreatedAt(t time.Time) *IdentityUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetModifiedAt sets the "modified_at" field.
func (iuo *IdentityUpdateOne) SetModifiedAt(t time.Time) *IdentityUpdateOne {
	iuo.mutation.SetModifiedAt(t)
	return iuo
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableModifiedAt(t *time.Time) *IdentityUpdateOne {
	if t != nil {
		iuo.SetModifiedAt(*t)
	}
	return iuo
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (iuo *IdentityUpdateOne) ClearModifiedAt() *IdentityUpdateOne {
	iuo.mutation.ClearModifiedAt()
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *IdentityUpdateOne) SetDeletedAt(t time.Time) *IdentityUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableDeletedAt(t *time.Time) *IdentityUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *IdentityUpdateOne) ClearDeletedAt() *IdentityUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetEmail sets the "email" field.
func (iuo *IdentityUpdateOne) SetEmail(s string) *IdentityUpdateOne {
	iuo.mutation.SetEmail(s)
	return iuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableEmail(s *string) *IdentityUpdateOne {
	if s != nil {
		iuo.SetEmail(*s)
	}
	return iuo
}

// ClearEmail clears the value of the "email" field.
func (iuo *IdentityUpdateOne) ClearEmail() *IdentityUpdateOne {
	iuo.mutation.ClearEmail()
	return iuo
}

// SetEmailVerified sets the "email_verified" field.
func (iuo *IdentityUpdateOne) SetEmailVerified(b bool) *IdentityUpdateOne {
	iuo.mutation.SetEmailVerified(b)
	return iuo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableEmailVerified(b *bool) *IdentityUpdateOne {
	if b != nil {
		iuo.SetEmailVerified(*b)
	}
	return iuo
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (iuo *IdentityUpdateOne) ClearEmailVerified() *IdentityUpdateOne {
	iuo.mutation.ClearEmailVerified()
	return iuo
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (iuo *IdentityUpdateOne) SetCustomerID(id string) *IdentityUpdateOne {
	iuo.mutation.SetCustomerID(id)
	return iuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (iuo *IdentityUpdateOne) SetCustomer(c *Customer) *IdentityUpdateOne {
	return iuo.SetCustomerID(c.ID)
}

// Mutation returns the IdentityMutation object of the builder.
func (iuo *IdentityUpdateOne) Mutation() *IdentityMutation {
	return iuo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (iuo *IdentityUpdateOne) ClearCustomer() *IdentityUpdateOne {
	iuo.mutation.ClearCustomer()
	return iuo
}

// Where appends a list predicates to the IdentityUpdate builder.
func (iuo *IdentityUpdateOne) Where(ps ...predicate.Identity) *IdentityUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IdentityUpdateOne) Select(field string, fields ...string) *IdentityUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Identity entity.
func (iuo *IdentityUpdateOne) Save(ctx context.Context) (*Identity, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IdentityUpdateOne) SaveX(ctx context.Context) *Identity {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IdentityUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IdentityUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IdentityUpdateOne) check() error {
	if _, ok := iuo.mutation.CustomerID(); iuo.mutation.CustomerCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "Identity.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *IdentityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IdentityUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *IdentityUpdateOne) sqlSave(ctx context.Context) (_node *Identity, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(identity.Table, identity.Columns, sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "Identity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identity.FieldID)
		for _, f := range fields {
			if !identity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != identity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(identity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.ModifiedAt(); ok {
		_spec.SetField(identity.FieldModifiedAt, field.TypeTime, value)
	}
	if iuo.mutation.ModifiedAtCleared() {
		_spec.ClearField(identity.FieldModifiedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(identity.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(identity.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.Email(); ok {
		_spec.SetField(identity.FieldEmail, field.TypeString, value)
	}
	if iuo.mutation.EmailCleared() {
		_spec.ClearField(identity.FieldEmail, field.TypeString)
	}
	if value, ok := iuo.mutation.EmailVerified(); ok {
		_spec.SetField(identity.FieldEmailVerified, field.TypeBool, value)
	}
	if iuo.mutation.EmailVerifiedCleared() {
		_spec.ClearField(identity.FieldEmailVerified, field.TypeBool)
	}
	if iuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identity.CustomerTable,
			Columns: []string{identity.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		edge.Schema = iuo.schemaConfig.Identity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identity.CustomerTable,
			Columns: []string{identity.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		edge.Schema = iuo.schemaConfig.Identity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iuo.schemaConfig.Identity
	ctx = internal.NewSchemaConfigContext(ctx, iuo.schemaConfig)
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Identity{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
