// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customer"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customersetting"
	"github.com/sigmasee/sigmasee/customer/shared/entities/predicate"

	"github.com/sigmasee/sigmasee/customer/shared/entities/internal"
)

// CustomerSettingUpdate is the builder for updating CustomerSetting entities.
type CustomerSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerSettingUpdate builder.
func (csu *CustomerSettingUpdate) Where(ps ...predicate.CustomerSetting) *CustomerSettingUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetCreatedAt sets the "created_at" field.
func (csu *CustomerSettingUpdate) SetCreatedAt(t time.Time) *CustomerSettingUpdate {
	csu.mutation.SetCreatedAt(t)
	return csu
}

// SetModifiedAt sets the "modified_at" field.
func (csu *CustomerSettingUpdate) SetModifiedAt(t time.Time) *CustomerSettingUpdate {
	csu.mutation.SetModifiedAt(t)
	return csu
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (csu *CustomerSettingUpdate) SetNillableModifiedAt(t *time.Time) *CustomerSettingUpdate {
	if t != nil {
		csu.SetModifiedAt(*t)
	}
	return csu
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (csu *CustomerSettingUpdate) ClearModifiedAt() *CustomerSettingUpdate {
	csu.mutation.ClearModifiedAt()
	return csu
}

// SetDeletedAt sets the "deleted_at" field.
func (csu *CustomerSettingUpdate) SetDeletedAt(t time.Time) *CustomerSettingUpdate {
	csu.mutation.SetDeletedAt(t)
	return csu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csu *CustomerSettingUpdate) SetNillableDeletedAt(t *time.Time) *CustomerSettingUpdate {
	if t != nil {
		csu.SetDeletedAt(*t)
	}
	return csu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (csu *CustomerSettingUpdate) ClearDeletedAt() *CustomerSettingUpdate {
	csu.mutation.ClearDeletedAt()
	return csu
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (csu *CustomerSettingUpdate) SetCustomerID(id string) *CustomerSettingUpdate {
	csu.mutation.SetCustomerID(id)
	return csu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (csu *CustomerSettingUpdate) SetCustomer(c *Customer) *CustomerSettingUpdate {
	return csu.SetCustomerID(c.ID)
}

// Mutation returns the CustomerSettingMutation object of the builder.
func (csu *CustomerSettingUpdate) Mutation() *CustomerSettingMutation {
	return csu.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (csu *CustomerSettingUpdate) ClearCustomer() *CustomerSettingUpdate {
	csu.mutation.ClearCustomer()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CustomerSettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CustomerSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CustomerSettingUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CustomerSettingUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CustomerSettingUpdate) check() error {
	if _, ok := csu.mutation.CustomerID(); csu.mutation.CustomerCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "CustomerSetting.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csu *CustomerSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerSettingUpdate {
	csu.modifiers = append(csu.modifiers, modifiers...)
	return csu
}

func (csu *CustomerSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customersetting.Table, customersetting.Columns, sqlgraph.NewFieldSpec(customersetting.FieldID, field.TypeString))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.CreatedAt(); ok {
		_spec.SetField(customersetting.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := csu.mutation.ModifiedAt(); ok {
		_spec.SetField(customersetting.FieldModifiedAt, field.TypeTime, value)
	}
	if csu.mutation.ModifiedAtCleared() {
		_spec.ClearField(customersetting.FieldModifiedAt, field.TypeTime)
	}
	if value, ok := csu.mutation.DeletedAt(); ok {
		_spec.SetField(customersetting.FieldDeletedAt, field.TypeTime, value)
	}
	if csu.mutation.DeletedAtCleared() {
		_spec.ClearField(customersetting.FieldDeletedAt, field.TypeTime)
	}
	if csu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customersetting.CustomerTable,
			Columns: []string{customersetting.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		edge.Schema = csu.schemaConfig.CustomerSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customersetting.CustomerTable,
			Columns: []string{customersetting.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		edge.Schema = csu.schemaConfig.CustomerSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = csu.schemaConfig.CustomerSetting
	ctx = internal.NewSchemaConfigContext(ctx, csu.schemaConfig)
	_spec.AddModifiers(csu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CustomerSettingUpdateOne is the builder for updating a single CustomerSetting entity.
type CustomerSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (csuo *CustomerSettingUpdateOne) SetCreatedAt(t time.Time) *CustomerSettingUpdateOne {
	csuo.mutation.SetCreatedAt(t)
	return csuo
}

// SetModifiedAt sets the "modified_at" field.
func (csuo *CustomerSettingUpdateOne) SetModifiedAt(t time.Time) *CustomerSettingUpdateOne {
	csuo.mutation.SetModifiedAt(t)
	return csuo
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (csuo *CustomerSettingUpdateOne) SetNillableModifiedAt(t *time.Time) *CustomerSettingUpdateOne {
	if t != nil {
		csuo.SetModifiedAt(*t)
	}
	return csuo
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (csuo *CustomerSettingUpdateOne) ClearModifiedAt() *CustomerSettingUpdateOne {
	csuo.mutation.ClearModifiedAt()
	return csuo
}

// SetDeletedAt sets the "deleted_at" field.
func (csuo *CustomerSettingUpdateOne) SetDeletedAt(t time.Time) *CustomerSettingUpdateOne {
	csuo.mutation.SetDeletedAt(t)
	return csuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csuo *CustomerSettingUpdateOne) SetNillableDeletedAt(t *time.Time) *CustomerSettingUpdateOne {
	if t != nil {
		csuo.SetDeletedAt(*t)
	}
	return csuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (csuo *CustomerSettingUpdateOne) ClearDeletedAt() *CustomerSettingUpdateOne {
	csuo.mutation.ClearDeletedAt()
	return csuo
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (csuo *CustomerSettingUpdateOne) SetCustomerID(id string) *CustomerSettingUpdateOne {
	csuo.mutation.SetCustomerID(id)
	return csuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (csuo *CustomerSettingUpdateOne) SetCustomer(c *Customer) *CustomerSettingUpdateOne {
	return csuo.SetCustomerID(c.ID)
}

// Mutation returns the CustomerSettingMutation object of the builder.
func (csuo *CustomerSettingUpdateOne) Mutation() *CustomerSettingMutation {
	return csuo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (csuo *CustomerSettingUpdateOne) ClearCustomer() *CustomerSettingUpdateOne {
	csuo.mutation.ClearCustomer()
	return csuo
}

// Where appends a list predicates to the CustomerSettingUpdate builder.
func (csuo *CustomerSettingUpdateOne) Where(ps ...predicate.CustomerSetting) *CustomerSettingUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CustomerSettingUpdateOne) Select(field string, fields ...string) *CustomerSettingUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CustomerSetting entity.
func (csuo *CustomerSettingUpdateOne) Save(ctx context.Context) (*CustomerSetting, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CustomerSettingUpdateOne) SaveX(ctx context.Context) *CustomerSetting {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CustomerSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CustomerSettingUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CustomerSettingUpdateOne) check() error {
	if _, ok := csuo.mutation.CustomerID(); csuo.mutation.CustomerCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "CustomerSetting.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csuo *CustomerSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerSettingUpdateOne {
	csuo.modifiers = append(csuo.modifiers, modifiers...)
	return csuo
}

func (csuo *CustomerSettingUpdateOne) sqlSave(ctx context.Context) (_node *CustomerSetting, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customersetting.Table, customersetting.Columns, sqlgraph.NewFieldSpec(customersetting.FieldID, field.TypeString))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "CustomerSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customersetting.FieldID)
		for _, f := range fields {
			if !customersetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != customersetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.CreatedAt(); ok {
		_spec.SetField(customersetting.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.ModifiedAt(); ok {
		_spec.SetField(customersetting.FieldModifiedAt, field.TypeTime, value)
	}
	if csuo.mutation.ModifiedAtCleared() {
		_spec.ClearField(customersetting.FieldModifiedAt, field.TypeTime)
	}
	if value, ok := csuo.mutation.DeletedAt(); ok {
		_spec.SetField(customersetting.FieldDeletedAt, field.TypeTime, value)
	}
	if csuo.mutation.DeletedAtCleared() {
		_spec.ClearField(customersetting.FieldDeletedAt, field.TypeTime)
	}
	if csuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customersetting.CustomerTable,
			Columns: []string{customersetting.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		edge.Schema = csuo.schemaConfig.CustomerSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   customersetting.CustomerTable,
			Columns: []string{customersetting.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		edge.Schema = csuo.schemaConfig.CustomerSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = csuo.schemaConfig.CustomerSetting
	ctx = internal.NewSchemaConfigContext(ctx, csuo.schemaConfig)
	_spec.AddModifiers(csuo.modifiers...)
	_node = &CustomerSetting{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
