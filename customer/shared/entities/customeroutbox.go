// Code generated by ent, DO NOT EDIT.

package entities

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customeroutbox"
)

// CustomerOutbox is the model entity for the CustomerOutbox schema.
type CustomerOutbox struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Topic holds the value of the "topic" field.
	Topic string `json:"topic,omitempty"`
	// Key holds the value of the "key" field.
	Key []byte `json:"key,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload []byte `json:"payload,omitempty"`
	// Headers holds the value of the "headers" field.
	Headers map[string][]uint8 `json:"headers,omitempty"`
	// RetryCount holds the value of the "retry_count" field.
	RetryCount int `json:"retry_count,omitempty"`
	// Status holds the value of the "status" field.
	Status customeroutbox.Status `json:"status,omitempty"`
	// LastRetry holds the value of the "last_retry" field.
	LastRetry time.Time `json:"last_retry,omitempty"`
	// ProcessingErrors holds the value of the "processing_errors" field.
	ProcessingErrors []string `json:"processing_errors,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerOutbox) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customeroutbox.FieldKey, customeroutbox.FieldPayload, customeroutbox.FieldHeaders, customeroutbox.FieldProcessingErrors:
			values[i] = new([]byte)
		case customeroutbox.FieldRetryCount:
			values[i] = new(sql.NullInt64)
		case customeroutbox.FieldID, customeroutbox.FieldTopic, customeroutbox.FieldStatus:
			values[i] = new(sql.NullString)
		case customeroutbox.FieldTimestamp, customeroutbox.FieldLastRetry:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerOutbox fields.
func (co *CustomerOutbox) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customeroutbox.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				co.ID = value.String
			}
		case customeroutbox.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				co.Timestamp = value.Time
			}
		case customeroutbox.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				co.Topic = value.String
			}
		case customeroutbox.FieldKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value != nil {
				co.Key = *value
			}
		case customeroutbox.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil {
				co.Payload = *value
			}
		case customeroutbox.FieldHeaders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field headers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &co.Headers); err != nil {
					return fmt.Errorf("unmarshal field headers: %w", err)
				}
			}
		case customeroutbox.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				co.RetryCount = int(value.Int64)
			}
		case customeroutbox.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				co.Status = customeroutbox.Status(value.String)
			}
		case customeroutbox.FieldLastRetry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_retry", values[i])
			} else if value.Valid {
				co.LastRetry = value.Time
			}
		case customeroutbox.FieldProcessingErrors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field processing_errors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &co.ProcessingErrors); err != nil {
					return fmt.Errorf("unmarshal field processing_errors: %w", err)
				}
			}
		default:
			co.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomerOutbox.
// This includes values selected through modifiers, order, etc.
func (co *CustomerOutbox) Value(name string) (ent.Value, error) {
	return co.selectValues.Get(name)
}

// Update returns a builder for updating this CustomerOutbox.
// Note that you need to call CustomerOutbox.Unwrap() before calling this method if this CustomerOutbox
// was returned from a transaction, and the transaction was committed or rolled back.
func (co *CustomerOutbox) Update() *CustomerOutboxUpdateOne {
	return NewCustomerOutboxClient(co.config).UpdateOne(co)
}

// Unwrap unwraps the CustomerOutbox entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (co *CustomerOutbox) Unwrap() *CustomerOutbox {
	_tx, ok := co.config.driver.(*txDriver)
	if !ok {
		panic("entities: CustomerOutbox is not a transactional entity")
	}
	co.config.driver = _tx.drv
	return co
}

// String implements the fmt.Stringer.
func (co *CustomerOutbox) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerOutbox(")
	builder.WriteString(fmt.Sprintf("id=%v, ", co.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(co.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("topic=")
	builder.WriteString(co.Topic)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(fmt.Sprintf("%v", co.Key))
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", co.Payload))
	builder.WriteString(", ")
	builder.WriteString("headers=")
	builder.WriteString(fmt.Sprintf("%v", co.Headers))
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", co.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", co.Status))
	builder.WriteString(", ")
	builder.WriteString("last_retry=")
	builder.WriteString(co.LastRetry.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("processing_errors=")
	builder.WriteString(fmt.Sprintf("%v", co.ProcessingErrors))
	builder.WriteByte(')')
	return builder.String()
}

// CustomerOutboxes is a parsable slice of CustomerOutbox.
type CustomerOutboxes []*CustomerOutbox
