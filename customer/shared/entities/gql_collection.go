// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customer"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customeroutbox"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customersetting"
	"github.com/sigmasee/sigmasee/customer/shared/entities/identity"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CustomerQuery) CollectFields(ctx context.Context, satisfies ...string) (*CustomerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CustomerQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(customer.Columns))
		selectedFields = []string{customer.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "identities":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&IdentityClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedIdentities(alias, func(wq *IdentityQuery) {
				*wq = *query
			})
		case "customerSettings":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerSettingClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.withCustomerSettings = query
		case "createdAt":
			if _, ok := fieldSeen[customer.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldCreatedAt)
				fieldSeen[customer.FieldCreatedAt] = struct{}{}
			}
		case "modifiedAt":
			if _, ok := fieldSeen[customer.FieldModifiedAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldModifiedAt)
				fieldSeen[customer.FieldModifiedAt] = struct{}{}
			}
		case "deletedAt":
			if _, ok := fieldSeen[customer.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldDeletedAt)
				fieldSeen[customer.FieldDeletedAt] = struct{}{}
			}
		case "designation":
			if _, ok := fieldSeen[customer.FieldDesignation]; !ok {
				selectedFields = append(selectedFields, customer.FieldDesignation)
				fieldSeen[customer.FieldDesignation] = struct{}{}
			}
		case "title":
			if _, ok := fieldSeen[customer.FieldTitle]; !ok {
				selectedFields = append(selectedFields, customer.FieldTitle)
				fieldSeen[customer.FieldTitle] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[customer.FieldName]; !ok {
				selectedFields = append(selectedFields, customer.FieldName)
				fieldSeen[customer.FieldName] = struct{}{}
			}
		case "givenName":
			if _, ok := fieldSeen[customer.FieldGivenName]; !ok {
				selectedFields = append(selectedFields, customer.FieldGivenName)
				fieldSeen[customer.FieldGivenName] = struct{}{}
			}
		case "middleName":
			if _, ok := fieldSeen[customer.FieldMiddleName]; !ok {
				selectedFields = append(selectedFields, customer.FieldMiddleName)
				fieldSeen[customer.FieldMiddleName] = struct{}{}
			}
		case "familyName":
			if _, ok := fieldSeen[customer.FieldFamilyName]; !ok {
				selectedFields = append(selectedFields, customer.FieldFamilyName)
				fieldSeen[customer.FieldFamilyName] = struct{}{}
			}
		case "photoURL":
			if _, ok := fieldSeen[customer.FieldPhotoURL]; !ok {
				selectedFields = append(selectedFields, customer.FieldPhotoURL)
				fieldSeen[customer.FieldPhotoURL] = struct{}{}
			}
		case "photoURL24":
			if _, ok := fieldSeen[customer.FieldPhotoURL24]; !ok {
				selectedFields = append(selectedFields, customer.FieldPhotoURL24)
				fieldSeen[customer.FieldPhotoURL24] = struct{}{}
			}
		case "photoURL32":
			if _, ok := fieldSeen[customer.FieldPhotoURL32]; !ok {
				selectedFields = append(selectedFields, customer.FieldPhotoURL32)
				fieldSeen[customer.FieldPhotoURL32] = struct{}{}
			}
		case "photoURL48":
			if _, ok := fieldSeen[customer.FieldPhotoURL48]; !ok {
				selectedFields = append(selectedFields, customer.FieldPhotoURL48)
				fieldSeen[customer.FieldPhotoURL48] = struct{}{}
			}
		case "photoURL72":
			if _, ok := fieldSeen[customer.FieldPhotoURL72]; !ok {
				selectedFields = append(selectedFields, customer.FieldPhotoURL72)
				fieldSeen[customer.FieldPhotoURL72] = struct{}{}
			}
		case "photoURL192":
			if _, ok := fieldSeen[customer.FieldPhotoURL192]; !ok {
				selectedFields = append(selectedFields, customer.FieldPhotoURL192)
				fieldSeen[customer.FieldPhotoURL192] = struct{}{}
			}
		case "photoURL512":
			if _, ok := fieldSeen[customer.FieldPhotoURL512]; !ok {
				selectedFields = append(selectedFields, customer.FieldPhotoURL512)
				fieldSeen[customer.FieldPhotoURL512] = struct{}{}
			}
		case "timezone":
			if _, ok := fieldSeen[customer.FieldTimezone]; !ok {
				selectedFields = append(selectedFields, customer.FieldTimezone)
				fieldSeen[customer.FieldTimezone] = struct{}{}
			}
		case "locale":
			if _, ok := fieldSeen[customer.FieldLocale]; !ok {
				selectedFields = append(selectedFields, customer.FieldLocale)
				fieldSeen[customer.FieldLocale] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type customerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CustomerPaginateOption
}

func newCustomerPaginateArgs(rv map[string]any) *customerPaginateArgs {
	args := &customerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &CustomerOrder{Field: &CustomerOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCustomerOrder(order))
			}
		case *CustomerOrder:
			if v != nil {
				args.opts = append(args.opts, WithCustomerOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*CustomerWhereInput); ok {
		args.opts = append(args.opts, WithCustomerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (co *CustomerOutboxQuery) CollectFields(ctx context.Context, satisfies ...string) (*CustomerOutboxQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return co, nil
	}
	if err := co.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return co, nil
}

func (co *CustomerOutboxQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(customeroutbox.Columns))
		selectedFields = []string{customeroutbox.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "timestamp":
			if _, ok := fieldSeen[customeroutbox.FieldTimestamp]; !ok {
				selectedFields = append(selectedFields, customeroutbox.FieldTimestamp)
				fieldSeen[customeroutbox.FieldTimestamp] = struct{}{}
			}
		case "topic":
			if _, ok := fieldSeen[customeroutbox.FieldTopic]; !ok {
				selectedFields = append(selectedFields, customeroutbox.FieldTopic)
				fieldSeen[customeroutbox.FieldTopic] = struct{}{}
			}
		case "key":
			if _, ok := fieldSeen[customeroutbox.FieldKey]; !ok {
				selectedFields = append(selectedFields, customeroutbox.FieldKey)
				fieldSeen[customeroutbox.FieldKey] = struct{}{}
			}
		case "payload":
			if _, ok := fieldSeen[customeroutbox.FieldPayload]; !ok {
				selectedFields = append(selectedFields, customeroutbox.FieldPayload)
				fieldSeen[customeroutbox.FieldPayload] = struct{}{}
			}
		case "headers":
			if _, ok := fieldSeen[customeroutbox.FieldHeaders]; !ok {
				selectedFields = append(selectedFields, customeroutbox.FieldHeaders)
				fieldSeen[customeroutbox.FieldHeaders] = struct{}{}
			}
		case "retryCount":
			if _, ok := fieldSeen[customeroutbox.FieldRetryCount]; !ok {
				selectedFields = append(selectedFields, customeroutbox.FieldRetryCount)
				fieldSeen[customeroutbox.FieldRetryCount] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[customeroutbox.FieldStatus]; !ok {
				selectedFields = append(selectedFields, customeroutbox.FieldStatus)
				fieldSeen[customeroutbox.FieldStatus] = struct{}{}
			}
		case "lastRetry":
			if _, ok := fieldSeen[customeroutbox.FieldLastRetry]; !ok {
				selectedFields = append(selectedFields, customeroutbox.FieldLastRetry)
				fieldSeen[customeroutbox.FieldLastRetry] = struct{}{}
			}
		case "processingErrors":
			if _, ok := fieldSeen[customeroutbox.FieldProcessingErrors]; !ok {
				selectedFields = append(selectedFields, customeroutbox.FieldProcessingErrors)
				fieldSeen[customeroutbox.FieldProcessingErrors] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		co.Select(selectedFields...)
	}
	return nil
}

type customeroutboxPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CustomerOutboxPaginateOption
}

func newCustomerOutboxPaginateArgs(rv map[string]any) *customeroutboxPaginateArgs {
	args := &customeroutboxPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &CustomerOutboxOrder{Field: &CustomerOutboxOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCustomerOutboxOrder(order))
			}
		case *CustomerOutboxOrder:
			if v != nil {
				args.opts = append(args.opts, WithCustomerOutboxOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*CustomerOutboxWhereInput); ok {
		args.opts = append(args.opts, WithCustomerOutboxFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cs *CustomerSettingQuery) CollectFields(ctx context.Context, satisfies ...string) (*CustomerSettingQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return cs, nil
	}
	if err := cs.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return cs, nil
}

func (cs *CustomerSettingQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(customersetting.Columns))
		selectedFields = []string{customersetting.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "customer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: cs.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			cs.withCustomer = query
		case "createdAt":
			if _, ok := fieldSeen[customersetting.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, customersetting.FieldCreatedAt)
				fieldSeen[customersetting.FieldCreatedAt] = struct{}{}
			}
		case "modifiedAt":
			if _, ok := fieldSeen[customersetting.FieldModifiedAt]; !ok {
				selectedFields = append(selectedFields, customersetting.FieldModifiedAt)
				fieldSeen[customersetting.FieldModifiedAt] = struct{}{}
			}
		case "deletedAt":
			if _, ok := fieldSeen[customersetting.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, customersetting.FieldDeletedAt)
				fieldSeen[customersetting.FieldDeletedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		cs.Select(selectedFields...)
	}
	return nil
}

type customersettingPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CustomerSettingPaginateOption
}

func newCustomerSettingPaginateArgs(rv map[string]any) *customersettingPaginateArgs {
	args := &customersettingPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &CustomerSettingOrder{Field: &CustomerSettingOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCustomerSettingOrder(order))
			}
		case *CustomerSettingOrder:
			if v != nil {
				args.opts = append(args.opts, WithCustomerSettingOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*CustomerSettingWhereInput); ok {
		args.opts = append(args.opts, WithCustomerSettingFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *IdentityQuery) CollectFields(ctx context.Context, satisfies ...string) (*IdentityQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return i, nil
	}
	if err := i.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return i, nil
}

func (i *IdentityQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(identity.Columns))
		selectedFields = []string{identity.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "customer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.withCustomer = query
		case "createdAt":
			if _, ok := fieldSeen[identity.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, identity.FieldCreatedAt)
				fieldSeen[identity.FieldCreatedAt] = struct{}{}
			}
		case "modifiedAt":
			if _, ok := fieldSeen[identity.FieldModifiedAt]; !ok {
				selectedFields = append(selectedFields, identity.FieldModifiedAt)
				fieldSeen[identity.FieldModifiedAt] = struct{}{}
			}
		case "deletedAt":
			if _, ok := fieldSeen[identity.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, identity.FieldDeletedAt)
				fieldSeen[identity.FieldDeletedAt] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[identity.FieldEmail]; !ok {
				selectedFields = append(selectedFields, identity.FieldEmail)
				fieldSeen[identity.FieldEmail] = struct{}{}
			}
		case "emailVerified":
			if _, ok := fieldSeen[identity.FieldEmailVerified]; !ok {
				selectedFields = append(selectedFields, identity.FieldEmailVerified)
				fieldSeen[identity.FieldEmailVerified] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		i.Select(selectedFields...)
	}
	return nil
}

type identityPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []IdentityPaginateOption
}

func newIdentityPaginateArgs(rv map[string]any) *identityPaginateArgs {
	args := &identityPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &IdentityOrder{Field: &IdentityOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithIdentityOrder(order))
			}
		case *IdentityOrder:
			if v != nil {
				args.opts = append(args.opts, WithIdentityOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*IdentityWhereInput); ok {
		args.opts = append(args.opts, WithIdentityFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
