// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customer"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customeroutbox"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customersetting"
	"github.com/sigmasee/sigmasee/customer/shared/entities/identity"
	"github.com/sigmasee/sigmasee/customer/shared/entities/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCustomer        = "Customer"
	TypeCustomerOutbox  = "CustomerOutbox"
	TypeCustomerSetting = "CustomerSetting"
	TypeIdentity        = "Identity"
)

// CustomerMutation represents an operation that mutates the Customer nodes in the graph.
type CustomerMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	created_at               *time.Time
	modified_at              *time.Time
	deleted_at               *time.Time
	designation              *string
	title                    *string
	name                     *string
	given_name               *string
	middle_name              *string
	family_name              *string
	photo_url                *string
	photo_url_24             *string
	photo_url_32             *string
	photo_url_48             *string
	photo_url_72             *string
	photo_url_192            *string
	photo_url_512            *string
	timezone                 *string
	locale                   *string
	clearedFields            map[string]struct{}
	identities               map[string]struct{}
	removedidentities        map[string]struct{}
	clearedidentities        bool
	customer_settings        *string
	clearedcustomer_settings bool
	done                     bool
	oldValue                 func(context.Context) (*Customer, error)
	predicates               []predicate.Customer
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows management of the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for the Customer entity.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the ID field of the mutation.
func withCustomerID(id string) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Customer entities.
func (m *CustomerMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Customer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CustomerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CustomerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CustomerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *CustomerMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *CustomerMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (m *CustomerMutation) ClearModifiedAt() {
	m.modified_at = nil
	m.clearedFields[customer.FieldModifiedAt] = struct{}{}
}

// ModifiedAtCleared returns if the "modified_at" field was cleared in this mutation.
func (m *CustomerMutation) ModifiedAtCleared() bool {
	_, ok := m.clearedFields[customer.FieldModifiedAt]
	return ok
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *CustomerMutation) ResetModifiedAt() {
	m.modified_at = nil
	delete(m.clearedFields, customer.FieldModifiedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CustomerMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CustomerMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *CustomerMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[customer.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *CustomerMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[customer.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CustomerMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, customer.FieldDeletedAt)
}

// SetDesignation sets the "designation" field.
func (m *CustomerMutation) SetDesignation(s string) {
	m.designation = &s
}

// Designation returns the value of the "designation" field in the mutation.
func (m *CustomerMutation) Designation() (r string, exists bool) {
	v := m.designation
	if v == nil {
		return
	}
	return *v, true
}

// OldDesignation returns the old "designation" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldDesignation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesignation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesignation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesignation: %w", err)
	}
	return oldValue.Designation, nil
}

// ClearDesignation clears the value of the "designation" field.
func (m *CustomerMutation) ClearDesignation() {
	m.designation = nil
	m.clearedFields[customer.FieldDesignation] = struct{}{}
}

// DesignationCleared returns if the "designation" field was cleared in this mutation.
func (m *CustomerMutation) DesignationCleared() bool {
	_, ok := m.clearedFields[customer.FieldDesignation]
	return ok
}

// ResetDesignation resets all changes to the "designation" field.
func (m *CustomerMutation) ResetDesignation() {
	m.designation = nil
	delete(m.clearedFields, customer.FieldDesignation)
}

// SetTitle sets the "title" field.
func (m *CustomerMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *CustomerMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *CustomerMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[customer.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *CustomerMutation) TitleCleared() bool {
	_, ok := m.clearedFields[customer.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *CustomerMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, customer.FieldTitle)
}

// SetName sets the "name" field.
func (m *CustomerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CustomerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *CustomerMutation) ClearName() {
	m.name = nil
	m.clearedFields[customer.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *CustomerMutation) NameCleared() bool {
	_, ok := m.clearedFields[customer.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *CustomerMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, customer.FieldName)
}

// SetGivenName sets the "given_name" field.
func (m *CustomerMutation) SetGivenName(s string) {
	m.given_name = &s
}

// GivenName returns the value of the "given_name" field in the mutation.
func (m *CustomerMutation) GivenName() (r string, exists bool) {
	v := m.given_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGivenName returns the old "given_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldGivenName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGivenName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGivenName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGivenName: %w", err)
	}
	return oldValue.GivenName, nil
}

// ClearGivenName clears the value of the "given_name" field.
func (m *CustomerMutation) ClearGivenName() {
	m.given_name = nil
	m.clearedFields[customer.FieldGivenName] = struct{}{}
}

// GivenNameCleared returns if the "given_name" field was cleared in this mutation.
func (m *CustomerMutation) GivenNameCleared() bool {
	_, ok := m.clearedFields[customer.FieldGivenName]
	return ok
}

// ResetGivenName resets all changes to the "given_name" field.
func (m *CustomerMutation) ResetGivenName() {
	m.given_name = nil
	delete(m.clearedFields, customer.FieldGivenName)
}

// SetMiddleName sets the "middle_name" field.
func (m *CustomerMutation) SetMiddleName(s string) {
	m.middle_name = &s
}

// MiddleName returns the value of the "middle_name" field in the mutation.
func (m *CustomerMutation) MiddleName() (r string, exists bool) {
	v := m.middle_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMiddleName returns the old "middle_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldMiddleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMiddleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMiddleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMiddleName: %w", err)
	}
	return oldValue.MiddleName, nil
}

// ClearMiddleName clears the value of the "middle_name" field.
func (m *CustomerMutation) ClearMiddleName() {
	m.middle_name = nil
	m.clearedFields[customer.FieldMiddleName] = struct{}{}
}

// MiddleNameCleared returns if the "middle_name" field was cleared in this mutation.
func (m *CustomerMutation) MiddleNameCleared() bool {
	_, ok := m.clearedFields[customer.FieldMiddleName]
	return ok
}

// ResetMiddleName resets all changes to the "middle_name" field.
func (m *CustomerMutation) ResetMiddleName() {
	m.middle_name = nil
	delete(m.clearedFields, customer.FieldMiddleName)
}

// SetFamilyName sets the "family_name" field.
func (m *CustomerMutation) SetFamilyName(s string) {
	m.family_name = &s
}

// FamilyName returns the value of the "family_name" field in the mutation.
func (m *CustomerMutation) FamilyName() (r string, exists bool) {
	v := m.family_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFamilyName returns the old "family_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldFamilyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFamilyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFamilyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFamilyName: %w", err)
	}
	return oldValue.FamilyName, nil
}

// ClearFamilyName clears the value of the "family_name" field.
func (m *CustomerMutation) ClearFamilyName() {
	m.family_name = nil
	m.clearedFields[customer.FieldFamilyName] = struct{}{}
}

// FamilyNameCleared returns if the "family_name" field was cleared in this mutation.
func (m *CustomerMutation) FamilyNameCleared() bool {
	_, ok := m.clearedFields[customer.FieldFamilyName]
	return ok
}

// ResetFamilyName resets all changes to the "family_name" field.
func (m *CustomerMutation) ResetFamilyName() {
	m.family_name = nil
	delete(m.clearedFields, customer.FieldFamilyName)
}

// SetPhotoURL sets the "photo_url" field.
func (m *CustomerMutation) SetPhotoURL(s string) {
	m.photo_url = &s
}

// PhotoURL returns the value of the "photo_url" field in the mutation.
func (m *CustomerMutation) PhotoURL() (r string, exists bool) {
	v := m.photo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL returns the old "photo_url" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldPhotoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL: %w", err)
	}
	return oldValue.PhotoURL, nil
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (m *CustomerMutation) ClearPhotoURL() {
	m.photo_url = nil
	m.clearedFields[customer.FieldPhotoURL] = struct{}{}
}

// PhotoURLCleared returns if the "photo_url" field was cleared in this mutation.
func (m *CustomerMutation) PhotoURLCleared() bool {
	_, ok := m.clearedFields[customer.FieldPhotoURL]
	return ok
}

// ResetPhotoURL resets all changes to the "photo_url" field.
func (m *CustomerMutation) ResetPhotoURL() {
	m.photo_url = nil
	delete(m.clearedFields, customer.FieldPhotoURL)
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (m *CustomerMutation) SetPhotoURL24(s string) {
	m.photo_url_24 = &s
}

// PhotoURL24 returns the value of the "photo_url_24" field in the mutation.
func (m *CustomerMutation) PhotoURL24() (r string, exists bool) {
	v := m.photo_url_24
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL24 returns the old "photo_url_24" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldPhotoURL24(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL24 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL24 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL24: %w", err)
	}
	return oldValue.PhotoURL24, nil
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (m *CustomerMutation) ClearPhotoURL24() {
	m.photo_url_24 = nil
	m.clearedFields[customer.FieldPhotoURL24] = struct{}{}
}

// PhotoURL24Cleared returns if the "photo_url_24" field was cleared in this mutation.
func (m *CustomerMutation) PhotoURL24Cleared() bool {
	_, ok := m.clearedFields[customer.FieldPhotoURL24]
	return ok
}

// ResetPhotoURL24 resets all changes to the "photo_url_24" field.
func (m *CustomerMutation) ResetPhotoURL24() {
	m.photo_url_24 = nil
	delete(m.clearedFields, customer.FieldPhotoURL24)
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (m *CustomerMutation) SetPhotoURL32(s string) {
	m.photo_url_32 = &s
}

// PhotoURL32 returns the value of the "photo_url_32" field in the mutation.
func (m *CustomerMutation) PhotoURL32() (r string, exists bool) {
	v := m.photo_url_32
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL32 returns the old "photo_url_32" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldPhotoURL32(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL32 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL32 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL32: %w", err)
	}
	return oldValue.PhotoURL32, nil
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (m *CustomerMutation) ClearPhotoURL32() {
	m.photo_url_32 = nil
	m.clearedFields[customer.FieldPhotoURL32] = struct{}{}
}

// PhotoURL32Cleared returns if the "photo_url_32" field was cleared in this mutation.
func (m *CustomerMutation) PhotoURL32Cleared() bool {
	_, ok := m.clearedFields[customer.FieldPhotoURL32]
	return ok
}

// ResetPhotoURL32 resets all changes to the "photo_url_32" field.
func (m *CustomerMutation) ResetPhotoURL32() {
	m.photo_url_32 = nil
	delete(m.clearedFields, customer.FieldPhotoURL32)
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (m *CustomerMutation) SetPhotoURL48(s string) {
	m.photo_url_48 = &s
}

// PhotoURL48 returns the value of the "photo_url_48" field in the mutation.
func (m *CustomerMutation) PhotoURL48() (r string, exists bool) {
	v := m.photo_url_48
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL48 returns the old "photo_url_48" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldPhotoURL48(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL48 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL48 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL48: %w", err)
	}
	return oldValue.PhotoURL48, nil
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (m *CustomerMutation) ClearPhotoURL48() {
	m.photo_url_48 = nil
	m.clearedFields[customer.FieldPhotoURL48] = struct{}{}
}

// PhotoURL48Cleared returns if the "photo_url_48" field was cleared in this mutation.
func (m *CustomerMutation) PhotoURL48Cleared() bool {
	_, ok := m.clearedFields[customer.FieldPhotoURL48]
	return ok
}

// ResetPhotoURL48 resets all changes to the "photo_url_48" field.
func (m *CustomerMutation) ResetPhotoURL48() {
	m.photo_url_48 = nil
	delete(m.clearedFields, customer.FieldPhotoURL48)
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (m *CustomerMutation) SetPhotoURL72(s string) {
	m.photo_url_72 = &s
}

// PhotoURL72 returns the value of the "photo_url_72" field in the mutation.
func (m *CustomerMutation) PhotoURL72() (r string, exists bool) {
	v := m.photo_url_72
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL72 returns the old "photo_url_72" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldPhotoURL72(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL72 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL72 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL72: %w", err)
	}
	return oldValue.PhotoURL72, nil
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (m *CustomerMutation) ClearPhotoURL72() {
	m.photo_url_72 = nil
	m.clearedFields[customer.FieldPhotoURL72] = struct{}{}
}

// PhotoURL72Cleared returns if the "photo_url_72" field was cleared in this mutation.
func (m *CustomerMutation) PhotoURL72Cleared() bool {
	_, ok := m.clearedFields[customer.FieldPhotoURL72]
	return ok
}

// ResetPhotoURL72 resets all changes to the "photo_url_72" field.
func (m *CustomerMutation) ResetPhotoURL72() {
	m.photo_url_72 = nil
	delete(m.clearedFields, customer.FieldPhotoURL72)
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (m *CustomerMutation) SetPhotoURL192(s string) {
	m.photo_url_192 = &s
}

// PhotoURL192 returns the value of the "photo_url_192" field in the mutation.
func (m *CustomerMutation) PhotoURL192() (r string, exists bool) {
	v := m.photo_url_192
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL192 returns the old "photo_url_192" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldPhotoURL192(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL192 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL192 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL192: %w", err)
	}
	return oldValue.PhotoURL192, nil
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (m *CustomerMutation) ClearPhotoURL192() {
	m.photo_url_192 = nil
	m.clearedFields[customer.FieldPhotoURL192] = struct{}{}
}

// PhotoURL192Cleared returns if the "photo_url_192" field was cleared in this mutation.
func (m *CustomerMutation) PhotoURL192Cleared() bool {
	_, ok := m.clearedFields[customer.FieldPhotoURL192]
	return ok
}

// ResetPhotoURL192 resets all changes to the "photo_url_192" field.
func (m *CustomerMutation) ResetPhotoURL192() {
	m.photo_url_192 = nil
	delete(m.clearedFields, customer.FieldPhotoURL192)
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (m *CustomerMutation) SetPhotoURL512(s string) {
	m.photo_url_512 = &s
}

// PhotoURL512 returns the value of the "photo_url_512" field in the mutation.
func (m *CustomerMutation) PhotoURL512() (r string, exists bool) {
	v := m.photo_url_512
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL512 returns the old "photo_url_512" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldPhotoURL512(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL512 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL512 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL512: %w", err)
	}
	return oldValue.PhotoURL512, nil
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (m *CustomerMutation) ClearPhotoURL512() {
	m.photo_url_512 = nil
	m.clearedFields[customer.FieldPhotoURL512] = struct{}{}
}

// PhotoURL512Cleared returns if the "photo_url_512" field was cleared in this mutation.
func (m *CustomerMutation) PhotoURL512Cleared() bool {
	_, ok := m.clearedFields[customer.FieldPhotoURL512]
	return ok
}

// ResetPhotoURL512 resets all changes to the "photo_url_512" field.
func (m *CustomerMutation) ResetPhotoURL512() {
	m.photo_url_512 = nil
	delete(m.clearedFields, customer.FieldPhotoURL512)
}

// SetTimezone sets the "timezone" field.
func (m *CustomerMutation) SetTimezone(s string) {
	m.timezone = &s
}

// Timezone returns the value of the "timezone" field in the mutation.
func (m *CustomerMutation) Timezone() (r string, exists bool) {
	v := m.timezone
	if v == nil {
		return
	}
	return *v, true
}

// OldTimezone returns the old "timezone" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldTimezone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimezone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimezone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimezone: %w", err)
	}
	return oldValue.Timezone, nil
}

// ClearTimezone clears the value of the "timezone" field.
func (m *CustomerMutation) ClearTimezone() {
	m.timezone = nil
	m.clearedFields[customer.FieldTimezone] = struct{}{}
}

// TimezoneCleared returns if the "timezone" field was cleared in this mutation.
func (m *CustomerMutation) TimezoneCleared() bool {
	_, ok := m.clearedFields[customer.FieldTimezone]
	return ok
}

// ResetTimezone resets all changes to the "timezone" field.
func (m *CustomerMutation) ResetTimezone() {
	m.timezone = nil
	delete(m.clearedFields, customer.FieldTimezone)
}

// SetLocale sets the "locale" field.
func (m *CustomerMutation) SetLocale(s string) {
	m.locale = &s
}

// Locale returns the value of the "locale" field in the mutation.
func (m *CustomerMutation) Locale() (r string, exists bool) {
	v := m.locale
	if v == nil {
		return
	}
	return *v, true
}

// OldLocale returns the old "locale" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldLocale(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocale: %w", err)
	}
	return oldValue.Locale, nil
}

// ClearLocale clears the value of the "locale" field.
func (m *CustomerMutation) ClearLocale() {
	m.locale = nil
	m.clearedFields[customer.FieldLocale] = struct{}{}
}

// LocaleCleared returns if the "locale" field was cleared in this mutation.
func (m *CustomerMutation) LocaleCleared() bool {
	_, ok := m.clearedFields[customer.FieldLocale]
	return ok
}

// ResetLocale resets all changes to the "locale" field.
func (m *CustomerMutation) ResetLocale() {
	m.locale = nil
	delete(m.clearedFields, customer.FieldLocale)
}

// AddIdentityIDs adds the "identities" edge to the Identity entity by ids.
func (m *CustomerMutation) AddIdentityIDs(ids ...string) {
	if m.identities == nil {
		m.identities = make(map[string]struct{})
	}
	for i := range ids {
		m.identities[ids[i]] = struct{}{}
	}
}

// ClearIdentities clears the "identities" edge to the Identity entity.
func (m *CustomerMutation) ClearIdentities() {
	m.clearedidentities = true
}

// IdentitiesCleared reports if the "identities" edge to the Identity entity was cleared.
func (m *CustomerMutation) IdentitiesCleared() bool {
	return m.clearedidentities
}

// RemoveIdentityIDs removes the "identities" edge to the Identity entity by IDs.
func (m *CustomerMutation) RemoveIdentityIDs(ids ...string) {
	if m.removedidentities == nil {
		m.removedidentities = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.identities, ids[i])
		m.removedidentities[ids[i]] = struct{}{}
	}
}

// RemovedIdentities returns the removed IDs of the "identities" edge to the Identity entity.
func (m *CustomerMutation) RemovedIdentitiesIDs() (ids []string) {
	for id := range m.removedidentities {
		ids = append(ids, id)
	}
	return
}

// IdentitiesIDs returns the "identities" edge IDs in the mutation.
func (m *CustomerMutation) IdentitiesIDs() (ids []string) {
	for id := range m.identities {
		ids = append(ids, id)
	}
	return
}

// ResetIdentities resets all changes to the "identities" edge.
func (m *CustomerMutation) ResetIdentities() {
	m.identities = nil
	m.clearedidentities = false
	m.removedidentities = nil
}

// SetCustomerSettingsID sets the "customer_settings" edge to the CustomerSetting entity by id.
func (m *CustomerMutation) SetCustomerSettingsID(id string) {
	m.customer_settings = &id
}

// ClearCustomerSettings clears the "customer_settings" edge to the CustomerSetting entity.
func (m *CustomerMutation) ClearCustomerSettings() {
	m.clearedcustomer_settings = true
}

// CustomerSettingsCleared reports if the "customer_settings" edge to the CustomerSetting entity was cleared.
func (m *CustomerMutation) CustomerSettingsCleared() bool {
	return m.clearedcustomer_settings
}

// CustomerSettingsID returns the "customer_settings" edge ID in the mutation.
func (m *CustomerMutation) CustomerSettingsID() (id string, exists bool) {
	if m.customer_settings != nil {
		return *m.customer_settings, true
	}
	return
}

// CustomerSettingsIDs returns the "customer_settings" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerSettingsID instead. It exists only for internal usage by the builders.
func (m *CustomerMutation) CustomerSettingsIDs() (ids []string) {
	if id := m.customer_settings; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomerSettings resets all changes to the "customer_settings" edge.
func (m *CustomerMutation) ResetCustomerSettings() {
	m.customer_settings = nil
	m.clearedcustomer_settings = false
}

// Where appends a list predicates to the CustomerMutation builder.
func (m *CustomerMutation) Where(ps ...predicate.Customer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CustomerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CustomerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Customer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CustomerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.created_at != nil {
		fields = append(fields, customer.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, customer.FieldModifiedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, customer.FieldDeletedAt)
	}
	if m.designation != nil {
		fields = append(fields, customer.FieldDesignation)
	}
	if m.title != nil {
		fields = append(fields, customer.FieldTitle)
	}
	if m.name != nil {
		fields = append(fields, customer.FieldName)
	}
	if m.given_name != nil {
		fields = append(fields, customer.FieldGivenName)
	}
	if m.middle_name != nil {
		fields = append(fields, customer.FieldMiddleName)
	}
	if m.family_name != nil {
		fields = append(fields, customer.FieldFamilyName)
	}
	if m.photo_url != nil {
		fields = append(fields, customer.FieldPhotoURL)
	}
	if m.photo_url_24 != nil {
		fields = append(fields, customer.FieldPhotoURL24)
	}
	if m.photo_url_32 != nil {
		fields = append(fields, customer.FieldPhotoURL32)
	}
	if m.photo_url_48 != nil {
		fields = append(fields, customer.FieldPhotoURL48)
	}
	if m.photo_url_72 != nil {
		fields = append(fields, customer.FieldPhotoURL72)
	}
	if m.photo_url_192 != nil {
		fields = append(fields, customer.FieldPhotoURL192)
	}
	if m.photo_url_512 != nil {
		fields = append(fields, customer.FieldPhotoURL512)
	}
	if m.timezone != nil {
		fields = append(fields, customer.FieldTimezone)
	}
	if m.locale != nil {
		fields = append(fields, customer.FieldLocale)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldCreatedAt:
		return m.CreatedAt()
	case customer.FieldModifiedAt:
		return m.ModifiedAt()
	case customer.FieldDeletedAt:
		return m.DeletedAt()
	case customer.FieldDesignation:
		return m.Designation()
	case customer.FieldTitle:
		return m.Title()
	case customer.FieldName:
		return m.Name()
	case customer.FieldGivenName:
		return m.GivenName()
	case customer.FieldMiddleName:
		return m.MiddleName()
	case customer.FieldFamilyName:
		return m.FamilyName()
	case customer.FieldPhotoURL:
		return m.PhotoURL()
	case customer.FieldPhotoURL24:
		return m.PhotoURL24()
	case customer.FieldPhotoURL32:
		return m.PhotoURL32()
	case customer.FieldPhotoURL48:
		return m.PhotoURL48()
	case customer.FieldPhotoURL72:
		return m.PhotoURL72()
	case customer.FieldPhotoURL192:
		return m.PhotoURL192()
	case customer.FieldPhotoURL512:
		return m.PhotoURL512()
	case customer.FieldTimezone:
		return m.Timezone()
	case customer.FieldLocale:
		return m.Locale()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case customer.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	case customer.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case customer.FieldDesignation:
		return m.OldDesignation(ctx)
	case customer.FieldTitle:
		return m.OldTitle(ctx)
	case customer.FieldName:
		return m.OldName(ctx)
	case customer.FieldGivenName:
		return m.OldGivenName(ctx)
	case customer.FieldMiddleName:
		return m.OldMiddleName(ctx)
	case customer.FieldFamilyName:
		return m.OldFamilyName(ctx)
	case customer.FieldPhotoURL:
		return m.OldPhotoURL(ctx)
	case customer.FieldPhotoURL24:
		return m.OldPhotoURL24(ctx)
	case customer.FieldPhotoURL32:
		return m.OldPhotoURL32(ctx)
	case customer.FieldPhotoURL48:
		return m.OldPhotoURL48(ctx)
	case customer.FieldPhotoURL72:
		return m.OldPhotoURL72(ctx)
	case customer.FieldPhotoURL192:
		return m.OldPhotoURL192(ctx)
	case customer.FieldPhotoURL512:
		return m.OldPhotoURL512(ctx)
	case customer.FieldTimezone:
		return m.OldTimezone(ctx)
	case customer.FieldLocale:
		return m.OldLocale(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case customer.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	case customer.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case customer.FieldDesignation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesignation(v)
		return nil
	case customer.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case customer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case customer.FieldGivenName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGivenName(v)
		return nil
	case customer.FieldMiddleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMiddleName(v)
		return nil
	case customer.FieldFamilyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFamilyName(v)
		return nil
	case customer.FieldPhotoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL(v)
		return nil
	case customer.FieldPhotoURL24:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL24(v)
		return nil
	case customer.FieldPhotoURL32:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL32(v)
		return nil
	case customer.FieldPhotoURL48:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL48(v)
		return nil
	case customer.FieldPhotoURL72:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL72(v)
		return nil
	case customer.FieldPhotoURL192:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL192(v)
		return nil
	case customer.FieldPhotoURL512:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL512(v)
		return nil
	case customer.FieldTimezone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimezone(v)
		return nil
	case customer.FieldLocale:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocale(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(customer.FieldModifiedAt) {
		fields = append(fields, customer.FieldModifiedAt)
	}
	if m.FieldCleared(customer.FieldDeletedAt) {
		fields = append(fields, customer.FieldDeletedAt)
	}
	if m.FieldCleared(customer.FieldDesignation) {
		fields = append(fields, customer.FieldDesignation)
	}
	if m.FieldCleared(customer.FieldTitle) {
		fields = append(fields, customer.FieldTitle)
	}
	if m.FieldCleared(customer.FieldName) {
		fields = append(fields, customer.FieldName)
	}
	if m.FieldCleared(customer.FieldGivenName) {
		fields = append(fields, customer.FieldGivenName)
	}
	if m.FieldCleared(customer.FieldMiddleName) {
		fields = append(fields, customer.FieldMiddleName)
	}
	if m.FieldCleared(customer.FieldFamilyName) {
		fields = append(fields, customer.FieldFamilyName)
	}
	if m.FieldCleared(customer.FieldPhotoURL) {
		fields = append(fields, customer.FieldPhotoURL)
	}
	if m.FieldCleared(customer.FieldPhotoURL24) {
		fields = append(fields, customer.FieldPhotoURL24)
	}
	if m.FieldCleared(customer.FieldPhotoURL32) {
		fields = append(fields, customer.FieldPhotoURL32)
	}
	if m.FieldCleared(customer.FieldPhotoURL48) {
		fields = append(fields, customer.FieldPhotoURL48)
	}
	if m.FieldCleared(customer.FieldPhotoURL72) {
		fields = append(fields, customer.FieldPhotoURL72)
	}
	if m.FieldCleared(customer.FieldPhotoURL192) {
		fields = append(fields, customer.FieldPhotoURL192)
	}
	if m.FieldCleared(customer.FieldPhotoURL512) {
		fields = append(fields, customer.FieldPhotoURL512)
	}
	if m.FieldCleared(customer.FieldTimezone) {
		fields = append(fields, customer.FieldTimezone)
	}
	if m.FieldCleared(customer.FieldLocale) {
		fields = append(fields, customer.FieldLocale)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	switch name {
	case customer.FieldModifiedAt:
		m.ClearModifiedAt()
		return nil
	case customer.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case customer.FieldDesignation:
		m.ClearDesignation()
		return nil
	case customer.FieldTitle:
		m.ClearTitle()
		return nil
	case customer.FieldName:
		m.ClearName()
		return nil
	case customer.FieldGivenName:
		m.ClearGivenName()
		return nil
	case customer.FieldMiddleName:
		m.ClearMiddleName()
		return nil
	case customer.FieldFamilyName:
		m.ClearFamilyName()
		return nil
	case customer.FieldPhotoURL:
		m.ClearPhotoURL()
		return nil
	case customer.FieldPhotoURL24:
		m.ClearPhotoURL24()
		return nil
	case customer.FieldPhotoURL32:
		m.ClearPhotoURL32()
		return nil
	case customer.FieldPhotoURL48:
		m.ClearPhotoURL48()
		return nil
	case customer.FieldPhotoURL72:
		m.ClearPhotoURL72()
		return nil
	case customer.FieldPhotoURL192:
		m.ClearPhotoURL192()
		return nil
	case customer.FieldPhotoURL512:
		m.ClearPhotoURL512()
		return nil
	case customer.FieldTimezone:
		m.ClearTimezone()
		return nil
	case customer.FieldLocale:
		m.ClearLocale()
		return nil
	}
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case customer.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	case customer.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case customer.FieldDesignation:
		m.ResetDesignation()
		return nil
	case customer.FieldTitle:
		m.ResetTitle()
		return nil
	case customer.FieldName:
		m.ResetName()
		return nil
	case customer.FieldGivenName:
		m.ResetGivenName()
		return nil
	case customer.FieldMiddleName:
		m.ResetMiddleName()
		return nil
	case customer.FieldFamilyName:
		m.ResetFamilyName()
		return nil
	case customer.FieldPhotoURL:
		m.ResetPhotoURL()
		return nil
	case customer.FieldPhotoURL24:
		m.ResetPhotoURL24()
		return nil
	case customer.FieldPhotoURL32:
		m.ResetPhotoURL32()
		return nil
	case customer.FieldPhotoURL48:
		m.ResetPhotoURL48()
		return nil
	case customer.FieldPhotoURL72:
		m.ResetPhotoURL72()
		return nil
	case customer.FieldPhotoURL192:
		m.ResetPhotoURL192()
		return nil
	case customer.FieldPhotoURL512:
		m.ResetPhotoURL512()
		return nil
	case customer.FieldTimezone:
		m.ResetTimezone()
		return nil
	case customer.FieldLocale:
		m.ResetLocale()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.identities != nil {
		edges = append(edges, customer.EdgeIdentities)
	}
	if m.customer_settings != nil {
		edges = append(edges, customer.EdgeCustomerSettings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeIdentities:
		ids := make([]ent.Value, 0, len(m.identities))
		for id := range m.identities {
			ids = append(ids, id)
		}
		return ids
	case customer.EdgeCustomerSettings:
		if id := m.customer_settings; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedidentities != nil {
		edges = append(edges, customer.EdgeIdentities)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeIdentities:
		ids := make([]ent.Value, 0, len(m.removedidentities))
		for id := range m.removedidentities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedidentities {
		edges = append(edges, customer.EdgeIdentities)
	}
	if m.clearedcustomer_settings {
		edges = append(edges, customer.EdgeCustomerSettings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case customer.EdgeIdentities:
		return m.clearedidentities
	case customer.EdgeCustomerSettings:
		return m.clearedcustomer_settings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	case customer.EdgeCustomerSettings:
		m.ClearCustomerSettings()
		return nil
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeIdentities:
		m.ResetIdentities()
		return nil
	case customer.EdgeCustomerSettings:
		m.ResetCustomerSettings()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// CustomerOutboxMutation represents an operation that mutates the CustomerOutbox nodes in the graph.
type CustomerOutboxMutation struct {
	config
	op                      Op
	typ                     string
	id                      *string
	timestamp               *time.Time
	topic                   *string
	key                     *[]byte
	payload                 *[]byte
	headers                 *map[string][]uint8
	retry_count             *int
	addretry_count          *int
	status                  *customeroutbox.Status
	last_retry              *time.Time
	processing_errors       *[]string
	appendprocessing_errors []string
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*CustomerOutbox, error)
	predicates              []predicate.CustomerOutbox
}

var _ ent.Mutation = (*CustomerOutboxMutation)(nil)

// customeroutboxOption allows management of the mutation configuration using functional options.
type customeroutboxOption func(*CustomerOutboxMutation)

// newCustomerOutboxMutation creates new mutation for the CustomerOutbox entity.
func newCustomerOutboxMutation(c config, op Op, opts ...customeroutboxOption) *CustomerOutboxMutation {
	m := &CustomerOutboxMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomerOutbox,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerOutboxID sets the ID field of the mutation.
func withCustomerOutboxID(id string) customeroutboxOption {
	return func(m *CustomerOutboxMutation) {
		var (
			err   error
			once  sync.Once
			value *CustomerOutbox
		)
		m.oldValue = func(ctx context.Context) (*CustomerOutbox, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CustomerOutbox.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomerOutbox sets the old CustomerOutbox of the mutation.
func withCustomerOutbox(node *CustomerOutbox) customeroutboxOption {
	return func(m *CustomerOutboxMutation) {
		m.oldValue = func(context.Context) (*CustomerOutbox, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerOutboxMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerOutboxMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CustomerOutbox entities.
func (m *CustomerOutboxMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerOutboxMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerOutboxMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CustomerOutbox.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTimestamp sets the "timestamp" field.
func (m *CustomerOutboxMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *CustomerOutboxMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the CustomerOutbox entity.
// If the CustomerOutbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerOutboxMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *CustomerOutboxMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetTopic sets the "topic" field.
func (m *CustomerOutboxMutation) SetTopic(s string) {
	m.topic = &s
}

// Topic returns the value of the "topic" field in the mutation.
func (m *CustomerOutboxMutation) Topic() (r string, exists bool) {
	v := m.topic
	if v == nil {
		return
	}
	return *v, true
}

// OldTopic returns the old "topic" field's value of the CustomerOutbox entity.
// If the CustomerOutbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerOutboxMutation) OldTopic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopic: %w", err)
	}
	return oldValue.Topic, nil
}

// ResetTopic resets all changes to the "topic" field.
func (m *CustomerOutboxMutation) ResetTopic() {
	m.topic = nil
}

// SetKey sets the "key" field.
func (m *CustomerOutboxMutation) SetKey(b []byte) {
	m.key = &b
}

// Key returns the value of the "key" field in the mutation.
func (m *CustomerOutboxMutation) Key() (r []byte, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the CustomerOutbox entity.
// If the CustomerOutbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerOutboxMutation) OldKey(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *CustomerOutboxMutation) ResetKey() {
	m.key = nil
}

// SetPayload sets the "payload" field.
func (m *CustomerOutboxMutation) SetPayload(b []byte) {
	m.payload = &b
}

// Payload returns the value of the "payload" field in the mutation.
func (m *CustomerOutboxMutation) Payload() (r []byte, exists bool) {
	v := m.payload
	if v == nil {
		return
	}
	return *v, true
}

// OldPayload returns the old "payload" field's value of the CustomerOutbox entity.
// If the CustomerOutbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerOutboxMutation) OldPayload(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayload: %w", err)
	}
	return oldValue.Payload, nil
}

// ResetPayload resets all changes to the "payload" field.
func (m *CustomerOutboxMutation) ResetPayload() {
	m.payload = nil
}

// SetHeaders sets the "headers" field.
func (m *CustomerOutboxMutation) SetHeaders(value map[string][]uint8) {
	m.headers = &value
}

// Headers returns the value of the "headers" field in the mutation.
func (m *CustomerOutboxMutation) Headers() (r map[string][]uint8, exists bool) {
	v := m.headers
	if v == nil {
		return
	}
	return *v, true
}

// OldHeaders returns the old "headers" field's value of the CustomerOutbox entity.
// If the CustomerOutbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerOutboxMutation) OldHeaders(ctx context.Context) (v map[string][]uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeaders is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeaders requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeaders: %w", err)
	}
	return oldValue.Headers, nil
}

// ResetHeaders resets all changes to the "headers" field.
func (m *CustomerOutboxMutation) ResetHeaders() {
	m.headers = nil
}

// SetRetryCount sets the "retry_count" field.
func (m *CustomerOutboxMutation) SetRetryCount(i int) {
	m.retry_count = &i
	m.addretry_count = nil
}

// RetryCount returns the value of the "retry_count" field in the mutation.
func (m *CustomerOutboxMutation) RetryCount() (r int, exists bool) {
	v := m.retry_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRetryCount returns the old "retry_count" field's value of the CustomerOutbox entity.
// If the CustomerOutbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerOutboxMutation) OldRetryCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetryCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetryCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetryCount: %w", err)
	}
	return oldValue.RetryCount, nil
}

// AddRetryCount adds i to the "retry_count" field.
func (m *CustomerOutboxMutation) AddRetryCount(i int) {
	if m.addretry_count != nil {
		*m.addretry_count += i
	} else {
		m.addretry_count = &i
	}
}

// AddedRetryCount returns the value that was added to the "retry_count" field in this mutation.
func (m *CustomerOutboxMutation) AddedRetryCount() (r int, exists bool) {
	v := m.addretry_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetryCount resets all changes to the "retry_count" field.
func (m *CustomerOutboxMutation) ResetRetryCount() {
	m.retry_count = nil
	m.addretry_count = nil
}

// SetStatus sets the "status" field.
func (m *CustomerOutboxMutation) SetStatus(c customeroutbox.Status) {
	m.status = &c
}

// Status returns the value of the "status" field in the mutation.
func (m *CustomerOutboxMutation) Status() (r customeroutbox.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the CustomerOutbox entity.
// If the CustomerOutbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerOutboxMutation) OldStatus(ctx context.Context) (v customeroutbox.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CustomerOutboxMutation) ResetStatus() {
	m.status = nil
}

// SetLastRetry sets the "last_retry" field.
func (m *CustomerOutboxMutation) SetLastRetry(t time.Time) {
	m.last_retry = &t
}

// LastRetry returns the value of the "last_retry" field in the mutation.
func (m *CustomerOutboxMutation) LastRetry() (r time.Time, exists bool) {
	v := m.last_retry
	if v == nil {
		return
	}
	return *v, true
}

// OldLastRetry returns the old "last_retry" field's value of the CustomerOutbox entity.
// If the CustomerOutbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerOutboxMutation) OldLastRetry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastRetry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastRetry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastRetry: %w", err)
	}
	return oldValue.LastRetry, nil
}

// ClearLastRetry clears the value of the "last_retry" field.
func (m *CustomerOutboxMutation) ClearLastRetry() {
	m.last_retry = nil
	m.clearedFields[customeroutbox.FieldLastRetry] = struct{}{}
}

// LastRetryCleared returns if the "last_retry" field was cleared in this mutation.
func (m *CustomerOutboxMutation) LastRetryCleared() bool {
	_, ok := m.clearedFields[customeroutbox.FieldLastRetry]
	return ok
}

// ResetLastRetry resets all changes to the "last_retry" field.
func (m *CustomerOutboxMutation) ResetLastRetry() {
	m.last_retry = nil
	delete(m.clearedFields, customeroutbox.FieldLastRetry)
}

// SetProcessingErrors sets the "processing_errors" field.
func (m *CustomerOutboxMutation) SetProcessingErrors(s []string) {
	m.processing_errors = &s
	m.appendprocessing_errors = nil
}

// ProcessingErrors returns the value of the "processing_errors" field in the mutation.
func (m *CustomerOutboxMutation) ProcessingErrors() (r []string, exists bool) {
	v := m.processing_errors
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessingErrors returns the old "processing_errors" field's value of the CustomerOutbox entity.
// If the CustomerOutbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerOutboxMutation) OldProcessingErrors(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessingErrors is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessingErrors requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessingErrors: %w", err)
	}
	return oldValue.ProcessingErrors, nil
}

// AppendProcessingErrors adds s to the "processing_errors" field.
func (m *CustomerOutboxMutation) AppendProcessingErrors(s []string) {
	m.appendprocessing_errors = append(m.appendprocessing_errors, s...)
}

// AppendedProcessingErrors returns the list of values that were appended to the "processing_errors" field in this mutation.
func (m *CustomerOutboxMutation) AppendedProcessingErrors() ([]string, bool) {
	if len(m.appendprocessing_errors) == 0 {
		return nil, false
	}
	return m.appendprocessing_errors, true
}

// ClearProcessingErrors clears the value of the "processing_errors" field.
func (m *CustomerOutboxMutation) ClearProcessingErrors() {
	m.processing_errors = nil
	m.appendprocessing_errors = nil
	m.clearedFields[customeroutbox.FieldProcessingErrors] = struct{}{}
}

// ProcessingErrorsCleared returns if the "processing_errors" field was cleared in this mutation.
func (m *CustomerOutboxMutation) ProcessingErrorsCleared() bool {
	_, ok := m.clearedFields[customeroutbox.FieldProcessingErrors]
	return ok
}

// ResetProcessingErrors resets all changes to the "processing_errors" field.
func (m *CustomerOutboxMutation) ResetProcessingErrors() {
	m.processing_errors = nil
	m.appendprocessing_errors = nil
	delete(m.clearedFields, customeroutbox.FieldProcessingErrors)
}

// Where appends a list predicates to the CustomerOutboxMutation builder.
func (m *CustomerOutboxMutation) Where(ps ...predicate.CustomerOutbox) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CustomerOutboxMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CustomerOutboxMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CustomerOutbox, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CustomerOutboxMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CustomerOutboxMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CustomerOutbox).
func (m *CustomerOutboxMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerOutboxMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.timestamp != nil {
		fields = append(fields, customeroutbox.FieldTimestamp)
	}
	if m.topic != nil {
		fields = append(fields, customeroutbox.FieldTopic)
	}
	if m.key != nil {
		fields = append(fields, customeroutbox.FieldKey)
	}
	if m.payload != nil {
		fields = append(fields, customeroutbox.FieldPayload)
	}
	if m.headers != nil {
		fields = append(fields, customeroutbox.FieldHeaders)
	}
	if m.retry_count != nil {
		fields = append(fields, customeroutbox.FieldRetryCount)
	}
	if m.status != nil {
		fields = append(fields, customeroutbox.FieldStatus)
	}
	if m.last_retry != nil {
		fields = append(fields, customeroutbox.FieldLastRetry)
	}
	if m.processing_errors != nil {
		fields = append(fields, customeroutbox.FieldProcessingErrors)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerOutboxMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customeroutbox.FieldTimestamp:
		return m.Timestamp()
	case customeroutbox.FieldTopic:
		return m.Topic()
	case customeroutbox.FieldKey:
		return m.Key()
	case customeroutbox.FieldPayload:
		return m.Payload()
	case customeroutbox.FieldHeaders:
		return m.Headers()
	case customeroutbox.FieldRetryCount:
		return m.RetryCount()
	case customeroutbox.FieldStatus:
		return m.Status()
	case customeroutbox.FieldLastRetry:
		return m.LastRetry()
	case customeroutbox.FieldProcessingErrors:
		return m.ProcessingErrors()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerOutboxMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customeroutbox.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case customeroutbox.FieldTopic:
		return m.OldTopic(ctx)
	case customeroutbox.FieldKey:
		return m.OldKey(ctx)
	case customeroutbox.FieldPayload:
		return m.OldPayload(ctx)
	case customeroutbox.FieldHeaders:
		return m.OldHeaders(ctx)
	case customeroutbox.FieldRetryCount:
		return m.OldRetryCount(ctx)
	case customeroutbox.FieldStatus:
		return m.OldStatus(ctx)
	case customeroutbox.FieldLastRetry:
		return m.OldLastRetry(ctx)
	case customeroutbox.FieldProcessingErrors:
		return m.OldProcessingErrors(ctx)
	}
	return nil, fmt.Errorf("unknown CustomerOutbox field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerOutboxMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customeroutbox.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case customeroutbox.FieldTopic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopic(v)
		return nil
	case customeroutbox.FieldKey:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case customeroutbox.FieldPayload:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayload(v)
		return nil
	case customeroutbox.FieldHeaders:
		v, ok := value.(map[string][]uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeaders(v)
		return nil
	case customeroutbox.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetryCount(v)
		return nil
	case customeroutbox.FieldStatus:
		v, ok := value.(customeroutbox.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case customeroutbox.FieldLastRetry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastRetry(v)
		return nil
	case customeroutbox.FieldProcessingErrors:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessingErrors(v)
		return nil
	}
	return fmt.Errorf("unknown CustomerOutbox field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerOutboxMutation) AddedFields() []string {
	var fields []string
	if m.addretry_count != nil {
		fields = append(fields, customeroutbox.FieldRetryCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerOutboxMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case customeroutbox.FieldRetryCount:
		return m.AddedRetryCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerOutboxMutation) AddField(name string, value ent.Value) error {
	switch name {
	case customeroutbox.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetryCount(v)
		return nil
	}
	return fmt.Errorf("unknown CustomerOutbox numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerOutboxMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(customeroutbox.FieldLastRetry) {
		fields = append(fields, customeroutbox.FieldLastRetry)
	}
	if m.FieldCleared(customeroutbox.FieldProcessingErrors) {
		fields = append(fields, customeroutbox.FieldProcessingErrors)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerOutboxMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerOutboxMutation) ClearField(name string) error {
	switch name {
	case customeroutbox.FieldLastRetry:
		m.ClearLastRetry()
		return nil
	case customeroutbox.FieldProcessingErrors:
		m.ClearProcessingErrors()
		return nil
	}
	return fmt.Errorf("unknown CustomerOutbox nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerOutboxMutation) ResetField(name string) error {
	switch name {
	case customeroutbox.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case customeroutbox.FieldTopic:
		m.ResetTopic()
		return nil
	case customeroutbox.FieldKey:
		m.ResetKey()
		return nil
	case customeroutbox.FieldPayload:
		m.ResetPayload()
		return nil
	case customeroutbox.FieldHeaders:
		m.ResetHeaders()
		return nil
	case customeroutbox.FieldRetryCount:
		m.ResetRetryCount()
		return nil
	case customeroutbox.FieldStatus:
		m.ResetStatus()
		return nil
	case customeroutbox.FieldLastRetry:
		m.ResetLastRetry()
		return nil
	case customeroutbox.FieldProcessingErrors:
		m.ResetProcessingErrors()
		return nil
	}
	return fmt.Errorf("unknown CustomerOutbox field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerOutboxMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerOutboxMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerOutboxMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerOutboxMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerOutboxMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerOutboxMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerOutboxMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CustomerOutbox unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerOutboxMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CustomerOutbox edge %s", name)
}

// CustomerSettingMutation represents an operation that mutates the CustomerSetting nodes in the graph.
type CustomerSettingMutation struct {
	config
	op              Op
	typ             string
	id              *string
	created_at      *time.Time
	modified_at     *time.Time
	deleted_at      *time.Time
	clearedFields   map[string]struct{}
	customer        *string
	clearedcustomer bool
	done            bool
	oldValue        func(context.Context) (*CustomerSetting, error)
	predicates      []predicate.CustomerSetting
}

var _ ent.Mutation = (*CustomerSettingMutation)(nil)

// customersettingOption allows management of the mutation configuration using functional options.
type customersettingOption func(*CustomerSettingMutation)

// newCustomerSettingMutation creates new mutation for the CustomerSetting entity.
func newCustomerSettingMutation(c config, op Op, opts ...customersettingOption) *CustomerSettingMutation {
	m := &CustomerSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomerSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerSettingID sets the ID field of the mutation.
func withCustomerSettingID(id string) customersettingOption {
	return func(m *CustomerSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *CustomerSetting
		)
		m.oldValue = func(ctx context.Context) (*CustomerSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CustomerSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomerSetting sets the old CustomerSetting of the mutation.
func withCustomerSetting(node *CustomerSetting) customersettingOption {
	return func(m *CustomerSettingMutation) {
		m.oldValue = func(context.Context) (*CustomerSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CustomerSetting entities.
func (m *CustomerSettingMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerSettingMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerSettingMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CustomerSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CustomerSettingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CustomerSettingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CustomerSetting entity.
// If the CustomerSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerSettingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CustomerSettingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *CustomerSettingMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *CustomerSettingMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the CustomerSetting entity.
// If the CustomerSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerSettingMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (m *CustomerSettingMutation) ClearModifiedAt() {
	m.modified_at = nil
	m.clearedFields[customersetting.FieldModifiedAt] = struct{}{}
}

// ModifiedAtCleared returns if the "modified_at" field was cleared in this mutation.
func (m *CustomerSettingMutation) ModifiedAtCleared() bool {
	_, ok := m.clearedFields[customersetting.FieldModifiedAt]
	return ok
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *CustomerSettingMutation) ResetModifiedAt() {
	m.modified_at = nil
	delete(m.clearedFields, customersetting.FieldModifiedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CustomerSettingMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CustomerSettingMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CustomerSetting entity.
// If the CustomerSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerSettingMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *CustomerSettingMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[customersetting.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *CustomerSettingMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[customersetting.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CustomerSettingMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, customersetting.FieldDeletedAt)
}

// SetCustomerID sets the "customer" edge to the Customer entity by id.
func (m *CustomerSettingMutation) SetCustomerID(id string) {
	m.customer = &id
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (m *CustomerSettingMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared reports if the "customer" edge to the Customer entity was cleared.
func (m *CustomerSettingMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// CustomerID returns the "customer" edge ID in the mutation.
func (m *CustomerSettingMutation) CustomerID() (id string, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the "customer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *CustomerSettingMutation) CustomerIDs() (ids []string) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer resets all changes to the "customer" edge.
func (m *CustomerSettingMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// Where appends a list predicates to the CustomerSettingMutation builder.
func (m *CustomerSettingMutation) Where(ps ...predicate.CustomerSetting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CustomerSettingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CustomerSettingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CustomerSetting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CustomerSettingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CustomerSettingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CustomerSetting).
func (m *CustomerSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerSettingMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, customersetting.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, customersetting.FieldModifiedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, customersetting.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customersetting.FieldCreatedAt:
		return m.CreatedAt()
	case customersetting.FieldModifiedAt:
		return m.ModifiedAt()
	case customersetting.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customersetting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case customersetting.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	case customersetting.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CustomerSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customersetting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case customersetting.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	case customersetting.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CustomerSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerSettingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerSettingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CustomerSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerSettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(customersetting.FieldModifiedAt) {
		fields = append(fields, customersetting.FieldModifiedAt)
	}
	if m.FieldCleared(customersetting.FieldDeletedAt) {
		fields = append(fields, customersetting.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerSettingMutation) ClearField(name string) error {
	switch name {
	case customersetting.FieldModifiedAt:
		m.ClearModifiedAt()
		return nil
	case customersetting.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown CustomerSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerSettingMutation) ResetField(name string) error {
	switch name {
	case customersetting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case customersetting.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	case customersetting.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown CustomerSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.customer != nil {
		edges = append(edges, customersetting.EdgeCustomer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerSettingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customersetting.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcustomer {
		edges = append(edges, customersetting.EdgeCustomer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerSettingMutation) EdgeCleared(name string) bool {
	switch name {
	case customersetting.EdgeCustomer:
		return m.clearedcustomer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerSettingMutation) ClearEdge(name string) error {
	switch name {
	case customersetting.EdgeCustomer:
		m.ClearCustomer()
		return nil
	}
	return fmt.Errorf("unknown CustomerSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerSettingMutation) ResetEdge(name string) error {
	switch name {
	case customersetting.EdgeCustomer:
		m.ResetCustomer()
		return nil
	}
	return fmt.Errorf("unknown CustomerSetting edge %s", name)
}

// IdentityMutation represents an operation that mutates the Identity nodes in the graph.
type IdentityMutation struct {
	config
	op              Op
	typ             string
	id              *string
	created_at      *time.Time
	modified_at     *time.Time
	deleted_at      *time.Time
	email           *string
	email_verified  *bool
	clearedFields   map[string]struct{}
	customer        *string
	clearedcustomer bool
	done            bool
	oldValue        func(context.Context) (*Identity, error)
	predicates      []predicate.Identity
}

var _ ent.Mutation = (*IdentityMutation)(nil)

// identityOption allows management of the mutation configuration using functional options.
type identityOption func(*IdentityMutation)

// newIdentityMutation creates new mutation for the Identity entity.
func newIdentityMutation(c config, op Op, opts ...identityOption) *IdentityMutation {
	m := &IdentityMutation{
		config:        c,
		op:            op,
		typ:           TypeIdentity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIdentityID sets the ID field of the mutation.
func withIdentityID(id string) identityOption {
	return func(m *IdentityMutation) {
		var (
			err   error
			once  sync.Once
			value *Identity
		)
		m.oldValue = func(ctx context.Context) (*Identity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Identity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIdentity sets the old Identity of the mutation.
func withIdentity(node *Identity) identityOption {
	return func(m *IdentityMutation) {
		m.oldValue = func(context.Context) (*Identity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IdentityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IdentityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Identity entities.
func (m *IdentityMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IdentityMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IdentityMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Identity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *IdentityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IdentityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Identity entity.
// If the Identity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IdentityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *IdentityMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *IdentityMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the Identity entity.
// If the Identity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (m *IdentityMutation) ClearModifiedAt() {
	m.modified_at = nil
	m.clearedFields[identity.FieldModifiedAt] = struct{}{}
}

// ModifiedAtCleared returns if the "modified_at" field was cleared in this mutation.
func (m *IdentityMutation) ModifiedAtCleared() bool {
	_, ok := m.clearedFields[identity.FieldModifiedAt]
	return ok
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *IdentityMutation) ResetModifiedAt() {
	m.modified_at = nil
	delete(m.clearedFields, identity.FieldModifiedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *IdentityMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *IdentityMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Identity entity.
// If the Identity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *IdentityMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[identity.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *IdentityMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[identity.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *IdentityMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, identity.FieldDeletedAt)
}

// SetEmail sets the "email" field.
func (m *IdentityMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *IdentityMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Identity entity.
// If the Identity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *IdentityMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[identity.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *IdentityMutation) EmailCleared() bool {
	_, ok := m.clearedFields[identity.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *IdentityMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, identity.FieldEmail)
}

// SetEmailVerified sets the "email_verified" field.
func (m *IdentityMutation) SetEmailVerified(b bool) {
	m.email_verified = &b
}

// EmailVerified returns the value of the "email_verified" field in the mutation.
func (m *IdentityMutation) EmailVerified() (r bool, exists bool) {
	v := m.email_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerified returns the old "email_verified" field's value of the Identity entity.
// If the Identity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityMutation) OldEmailVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerified: %w", err)
	}
	return oldValue.EmailVerified, nil
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (m *IdentityMutation) ClearEmailVerified() {
	m.email_verified = nil
	m.clearedFields[identity.FieldEmailVerified] = struct{}{}
}

// EmailVerifiedCleared returns if the "email_verified" field was cleared in this mutation.
func (m *IdentityMutation) EmailVerifiedCleared() bool {
	_, ok := m.clearedFields[identity.FieldEmailVerified]
	return ok
}

// ResetEmailVerified resets all changes to the "email_verified" field.
func (m *IdentityMutation) ResetEmailVerified() {
	m.email_verified = nil
	delete(m.clearedFields, identity.FieldEmailVerified)
}

// SetCustomerID sets the "customer" edge to the Customer entity by id.
func (m *IdentityMutation) SetCustomerID(id string) {
	m.customer = &id
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (m *IdentityMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared reports if the "customer" edge to the Customer entity was cleared.
func (m *IdentityMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// CustomerID returns the "customer" edge ID in the mutation.
func (m *IdentityMutation) CustomerID() (id string, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the "customer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *IdentityMutation) CustomerIDs() (ids []string) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer resets all changes to the "customer" edge.
func (m *IdentityMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// Where appends a list predicates to the IdentityMutation builder.
func (m *IdentityMutation) Where(ps ...predicate.Identity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IdentityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IdentityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Identity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IdentityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IdentityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Identity).
func (m *IdentityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IdentityMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, identity.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, identity.FieldModifiedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, identity.FieldDeletedAt)
	}
	if m.email != nil {
		fields = append(fields, identity.FieldEmail)
	}
	if m.email_verified != nil {
		fields = append(fields, identity.FieldEmailVerified)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IdentityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case identity.FieldCreatedAt:
		return m.CreatedAt()
	case identity.FieldModifiedAt:
		return m.ModifiedAt()
	case identity.FieldDeletedAt:
		return m.DeletedAt()
	case identity.FieldEmail:
		return m.Email()
	case identity.FieldEmailVerified:
		return m.EmailVerified()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IdentityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case identity.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case identity.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	case identity.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case identity.FieldEmail:
		return m.OldEmail(ctx)
	case identity.FieldEmailVerified:
		return m.OldEmailVerified(ctx)
	}
	return nil, fmt.Errorf("unknown Identity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IdentityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case identity.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case identity.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	case identity.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case identity.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case identity.FieldEmailVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerified(v)
		return nil
	}
	return fmt.Errorf("unknown Identity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IdentityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IdentityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IdentityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Identity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IdentityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(identity.FieldModifiedAt) {
		fields = append(fields, identity.FieldModifiedAt)
	}
	if m.FieldCleared(identity.FieldDeletedAt) {
		fields = append(fields, identity.FieldDeletedAt)
	}
	if m.FieldCleared(identity.FieldEmail) {
		fields = append(fields, identity.FieldEmail)
	}
	if m.FieldCleared(identity.FieldEmailVerified) {
		fields = append(fields, identity.FieldEmailVerified)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IdentityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IdentityMutation) ClearField(name string) error {
	switch name {
	case identity.FieldModifiedAt:
		m.ClearModifiedAt()
		return nil
	case identity.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case identity.FieldEmail:
		m.ClearEmail()
		return nil
	case identity.FieldEmailVerified:
		m.ClearEmailVerified()
		return nil
	}
	return fmt.Errorf("unknown Identity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IdentityMutation) ResetField(name string) error {
	switch name {
	case identity.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case identity.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	case identity.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case identity.FieldEmail:
		m.ResetEmail()
		return nil
	case identity.FieldEmailVerified:
		m.ResetEmailVerified()
		return nil
	}
	return fmt.Errorf("unknown Identity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IdentityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.customer != nil {
		edges = append(edges, identity.EdgeCustomer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IdentityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case identity.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IdentityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IdentityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IdentityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcustomer {
		edges = append(edges, identity.EdgeCustomer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IdentityMutation) EdgeCleared(name string) bool {
	switch name {
	case identity.EdgeCustomer:
		return m.clearedcustomer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IdentityMutation) ClearEdge(name string) error {
	switch name {
	case identity.EdgeCustomer:
		m.ClearCustomer()
		return nil
	}
	return fmt.Errorf("unknown Identity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IdentityMutation) ResetEdge(name string) error {
	switch name {
	case identity.EdgeCustomer:
		m.ResetCustomer()
		return nil
	}
	return fmt.Errorf("unknown Identity edge %s", name)
}
