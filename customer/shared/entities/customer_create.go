// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customer"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customersetting"
	"github.com/sigmasee/sigmasee/customer/shared/entities/identity"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDesignation sets the "designation" field.
func (cc *CustomerCreate) SetDesignation(s string) *CustomerCreate {
	cc.mutation.SetDesignation(s)
	return cc
}

// SetNillableDesignation sets the "designation" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableDesignation(s *string) *CustomerCreate {
	if s != nil {
		cc.SetDesignation(*s)
	}
	return cc
}

// SetTitle sets the "title" field.
func (cc *CustomerCreate) SetTitle(s string) *CustomerCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableTitle(s *string) *CustomerCreate {
	if s != nil {
		cc.SetTitle(*s)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CustomerCreate) SetName(s string) *CustomerCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableName(s *string) *CustomerCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetGivenName sets the "given_name" field.
func (cc *CustomerCreate) SetGivenName(s string) *CustomerCreate {
	cc.mutation.SetGivenName(s)
	return cc
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableGivenName(s *string) *CustomerCreate {
	if s != nil {
		cc.SetGivenName(*s)
	}
	return cc
}

// SetMiddleName sets the "middle_name" field.
func (cc *CustomerCreate) SetMiddleName(s string) *CustomerCreate {
	cc.mutation.SetMiddleName(s)
	return cc
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableMiddleName(s *string) *CustomerCreate {
	if s != nil {
		cc.SetMiddleName(*s)
	}
	return cc
}

// SetFamilyName sets the "family_name" field.
func (cc *CustomerCreate) SetFamilyName(s string) *CustomerCreate {
	cc.mutation.SetFamilyName(s)
	return cc
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableFamilyName(s *string) *CustomerCreate {
	if s != nil {
		cc.SetFamilyName(*s)
	}
	return cc
}

// SetPhotoURL sets the "photo_url" field.
func (cc *CustomerCreate) SetPhotoURL(s string) *CustomerCreate {
	cc.mutation.SetPhotoURL(s)
	return cc
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (cc *CustomerCreate) SetNillablePhotoURL(s *string) *CustomerCreate {
	if s != nil {
		cc.SetPhotoURL(*s)
	}
	return cc
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (cc *CustomerCreate) SetPhotoURL24(s string) *CustomerCreate {
	cc.mutation.SetPhotoURL24(s)
	return cc
}

// SetNillablePhotoURL24 sets the "photo_url_24" field if the given value is not nil.
func (cc *CustomerCreate) SetNillablePhotoURL24(s *string) *CustomerCreate {
	if s != nil {
		cc.SetPhotoURL24(*s)
	}
	return cc
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (cc *CustomerCreate) SetPhotoURL32(s string) *CustomerCreate {
	cc.mutation.SetPhotoURL32(s)
	return cc
}

// SetNillablePhotoURL32 sets the "photo_url_32" field if the given value is not nil.
func (cc *CustomerCreate) SetNillablePhotoURL32(s *string) *CustomerCreate {
	if s != nil {
		cc.SetPhotoURL32(*s)
	}
	return cc
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (cc *CustomerCreate) SetPhotoURL48(s string) *CustomerCreate {
	cc.mutation.SetPhotoURL48(s)
	return cc
}

// SetNillablePhotoURL48 sets the "photo_url_48" field if the given value is not nil.
func (cc *CustomerCreate) SetNillablePhotoURL48(s *string) *CustomerCreate {
	if s != nil {
		cc.SetPhotoURL48(*s)
	}
	return cc
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (cc *CustomerCreate) SetPhotoURL72(s string) *CustomerCreate {
	cc.mutation.SetPhotoURL72(s)
	return cc
}

// SetNillablePhotoURL72 sets the "photo_url_72" field if the given value is not nil.
func (cc *CustomerCreate) SetNillablePhotoURL72(s *string) *CustomerCreate {
	if s != nil {
		cc.SetPhotoURL72(*s)
	}
	return cc
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (cc *CustomerCreate) SetPhotoURL192(s string) *CustomerCreate {
	cc.mutation.SetPhotoURL192(s)
	return cc
}

// SetNillablePhotoURL192 sets the "photo_url_192" field if the given value is not nil.
func (cc *CustomerCreate) SetNillablePhotoURL192(s *string) *CustomerCreate {
	if s != nil {
		cc.SetPhotoURL192(*s)
	}
	return cc
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (cc *CustomerCreate) SetPhotoURL512(s string) *CustomerCreate {
	cc.mutation.SetPhotoURL512(s)
	return cc
}

// SetNillablePhotoURL512 sets the "photo_url_512" field if the given value is not nil.
func (cc *CustomerCreate) SetNillablePhotoURL512(s *string) *CustomerCreate {
	if s != nil {
		cc.SetPhotoURL512(*s)
	}
	return cc
}

// SetTimezone sets the "timezone" field.
func (cc *CustomerCreate) SetTimezone(s string) *CustomerCreate {
	cc.mutation.SetTimezone(s)
	return cc
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableTimezone(s *string) *CustomerCreate {
	if s != nil {
		cc.SetTimezone(*s)
	}
	return cc
}

// SetLocale sets the "locale" field.
func (cc *CustomerCreate) SetLocale(s string) *CustomerCreate {
	cc.mutation.SetLocale(s)
	return cc
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableLocale(s *string) *CustomerCreate {
	if s != nil {
		cc.SetLocale(*s)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CustomerCreate) SetCreatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetModifiedAt sets the "modified_at" field.
func (cc *CustomerCreate) SetModifiedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetModifiedAt(t)
	return cc
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableModifiedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetModifiedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CustomerCreate) SetDeletedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableDeletedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CustomerCreate) SetID(s string) *CustomerCreate {
	cc.mutation.SetID(s)
	return cc
}

// AddIdentityIDs adds the "identities" edge to the Identity entity by IDs.
func (cc *CustomerCreate) AddIdentityIDs(ids ...string) *CustomerCreate {
	cc.mutation.AddIdentityIDs(ids...)
	return cc
}

// AddIdentities adds the "identities" edges to the Identity entity.
func (cc *CustomerCreate) AddIdentities(i ...*Identity) *CustomerCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cc.AddIdentityIDs(ids...)
}

// SetCustomerSettingsID sets the "customer_settings" edge to the CustomerSetting entity by ID.
func (cc *CustomerCreate) SetCustomerSettingsID(id string) *CustomerCreate {
	cc.mutation.SetCustomerSettingsID(id)
	return cc
}

// SetNillableCustomerSettingsID sets the "customer_settings" edge to the CustomerSetting entity by ID if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerSettingsID(id *string) *CustomerCreate {
	if id != nil {
		cc = cc.SetCustomerSettingsID(*id)
	}
	return cc
}

// SetCustomerSettings sets the "customer_settings" edge to the CustomerSetting entity.
func (cc *CustomerCreate) SetCustomerSettings(c *CustomerSetting) *CustomerCreate {
	return cc.SetCustomerSettingsID(c.ID)
}

// Mutation returns the CustomerMutation object of the builder.
func (cc *CustomerCreate) Mutation() *CustomerMutation {
	return cc.mutation
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CustomerCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CustomerCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CustomerCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entities: missing required field "Customer.created_at"`)}
	}
	return nil
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Customer.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		_node = &Customer{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(customer.Table, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	)
	_spec.Schema = cc.schemaConfig.Customer
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Designation(); ok {
		_spec.SetField(customer.FieldDesignation, field.TypeString, value)
		_node.Designation = value
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(customer.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.GivenName(); ok {
		_spec.SetField(customer.FieldGivenName, field.TypeString, value)
		_node.GivenName = value
	}
	if value, ok := cc.mutation.MiddleName(); ok {
		_spec.SetField(customer.FieldMiddleName, field.TypeString, value)
		_node.MiddleName = value
	}
	if value, ok := cc.mutation.FamilyName(); ok {
		_spec.SetField(customer.FieldFamilyName, field.TypeString, value)
		_node.FamilyName = value
	}
	if value, ok := cc.mutation.PhotoURL(); ok {
		_spec.SetField(customer.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if value, ok := cc.mutation.PhotoURL24(); ok {
		_spec.SetField(customer.FieldPhotoURL24, field.TypeString, value)
		_node.PhotoURL24 = value
	}
	if value, ok := cc.mutation.PhotoURL32(); ok {
		_spec.SetField(customer.FieldPhotoURL32, field.TypeString, value)
		_node.PhotoURL32 = value
	}
	if value, ok := cc.mutation.PhotoURL48(); ok {
		_spec.SetField(customer.FieldPhotoURL48, field.TypeString, value)
		_node.PhotoURL48 = value
	}
	if value, ok := cc.mutation.PhotoURL72(); ok {
		_spec.SetField(customer.FieldPhotoURL72, field.TypeString, value)
		_node.PhotoURL72 = value
	}
	if value, ok := cc.mutation.PhotoURL192(); ok {
		_spec.SetField(customer.FieldPhotoURL192, field.TypeString, value)
		_node.PhotoURL192 = value
	}
	if value, ok := cc.mutation.PhotoURL512(); ok {
		_spec.SetField(customer.FieldPhotoURL512, field.TypeString, value)
		_node.PhotoURL512 = value
	}
	if value, ok := cc.mutation.Timezone(); ok {
		_spec.SetField(customer.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := cc.mutation.Locale(); ok {
		_spec.SetField(customer.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.ModifiedAt(); ok {
		_spec.SetField(customer.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(customer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := cc.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.IdentitiesTable,
			Columns: []string{customer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.Identity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomerSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.CustomerSettingsTable,
			Columns: []string{customer.CustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.CustomerSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.Create().
//		SetDesignation(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetDesignation(v+v).
//		}).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertOne {
	cc.conflict = opts
	return &CustomerUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflictColumns(columns ...string) *CustomerUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertOne{
		create: cc,
	}
}

type (
	// CustomerUpsertOne is the builder for "upsert"-ing
	//  one Customer node.
	CustomerUpsertOne struct {
		create *CustomerCreate
	}

	// CustomerUpsert is the "OnConflict" setter.
	CustomerUpsert struct {
		*sql.UpdateSet
	}
)

// SetDesignation sets the "designation" field.
func (u *CustomerUpsert) SetDesignation(v string) *CustomerUpsert {
	u.Set(customer.FieldDesignation, v)
	return u
}

// UpdateDesignation sets the "designation" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateDesignation() *CustomerUpsert {
	u.SetExcluded(customer.FieldDesignation)
	return u
}

// ClearDesignation clears the value of the "designation" field.
func (u *CustomerUpsert) ClearDesignation() *CustomerUpsert {
	u.SetNull(customer.FieldDesignation)
	return u
}

// SetTitle sets the "title" field.
func (u *CustomerUpsert) SetTitle(v string) *CustomerUpsert {
	u.Set(customer.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateTitle() *CustomerUpsert {
	u.SetExcluded(customer.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *CustomerUpsert) ClearTitle() *CustomerUpsert {
	u.SetNull(customer.FieldTitle)
	return u
}

// SetName sets the "name" field.
func (u *CustomerUpsert) SetName(v string) *CustomerUpsert {
	u.Set(customer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateName() *CustomerUpsert {
	u.SetExcluded(customer.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *CustomerUpsert) ClearName() *CustomerUpsert {
	u.SetNull(customer.FieldName)
	return u
}

// SetGivenName sets the "given_name" field.
func (u *CustomerUpsert) SetGivenName(v string) *CustomerUpsert {
	u.Set(customer.FieldGivenName, v)
	return u
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateGivenName() *CustomerUpsert {
	u.SetExcluded(customer.FieldGivenName)
	return u
}

// ClearGivenName clears the value of the "given_name" field.
func (u *CustomerUpsert) ClearGivenName() *CustomerUpsert {
	u.SetNull(customer.FieldGivenName)
	return u
}

// SetMiddleName sets the "middle_name" field.
func (u *CustomerUpsert) SetMiddleName(v string) *CustomerUpsert {
	u.Set(customer.FieldMiddleName, v)
	return u
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateMiddleName() *CustomerUpsert {
	u.SetExcluded(customer.FieldMiddleName)
	return u
}

// ClearMiddleName clears the value of the "middle_name" field.
func (u *CustomerUpsert) ClearMiddleName() *CustomerUpsert {
	u.SetNull(customer.FieldMiddleName)
	return u
}

// SetFamilyName sets the "family_name" field.
func (u *CustomerUpsert) SetFamilyName(v string) *CustomerUpsert {
	u.Set(customer.FieldFamilyName, v)
	return u
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateFamilyName() *CustomerUpsert {
	u.SetExcluded(customer.FieldFamilyName)
	return u
}

// ClearFamilyName clears the value of the "family_name" field.
func (u *CustomerUpsert) ClearFamilyName() *CustomerUpsert {
	u.SetNull(customer.FieldFamilyName)
	return u
}

// SetPhotoURL sets the "photo_url" field.
func (u *CustomerUpsert) SetPhotoURL(v string) *CustomerUpsert {
	u.Set(customer.FieldPhotoURL, v)
	return u
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePhotoURL() *CustomerUpsert {
	u.SetExcluded(customer.FieldPhotoURL)
	return u
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (u *CustomerUpsert) ClearPhotoURL() *CustomerUpsert {
	u.SetNull(customer.FieldPhotoURL)
	return u
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (u *CustomerUpsert) SetPhotoURL24(v string) *CustomerUpsert {
	u.Set(customer.FieldPhotoURL24, v)
	return u
}

// UpdatePhotoURL24 sets the "photo_url_24" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePhotoURL24() *CustomerUpsert {
	u.SetExcluded(customer.FieldPhotoURL24)
	return u
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (u *CustomerUpsert) ClearPhotoURL24() *CustomerUpsert {
	u.SetNull(customer.FieldPhotoURL24)
	return u
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (u *CustomerUpsert) SetPhotoURL32(v string) *CustomerUpsert {
	u.Set(customer.FieldPhotoURL32, v)
	return u
}

// UpdatePhotoURL32 sets the "photo_url_32" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePhotoURL32() *CustomerUpsert {
	u.SetExcluded(customer.FieldPhotoURL32)
	return u
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (u *CustomerUpsert) ClearPhotoURL32() *CustomerUpsert {
	u.SetNull(customer.FieldPhotoURL32)
	return u
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (u *CustomerUpsert) SetPhotoURL48(v string) *CustomerUpsert {
	u.Set(customer.FieldPhotoURL48, v)
	return u
}

// UpdatePhotoURL48 sets the "photo_url_48" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePhotoURL48() *CustomerUpsert {
	u.SetExcluded(customer.FieldPhotoURL48)
	return u
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (u *CustomerUpsert) ClearPhotoURL48() *CustomerUpsert {
	u.SetNull(customer.FieldPhotoURL48)
	return u
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (u *CustomerUpsert) SetPhotoURL72(v string) *CustomerUpsert {
	u.Set(customer.FieldPhotoURL72, v)
	return u
}

// UpdatePhotoURL72 sets the "photo_url_72" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePhotoURL72() *CustomerUpsert {
	u.SetExcluded(customer.FieldPhotoURL72)
	return u
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (u *CustomerUpsert) ClearPhotoURL72() *CustomerUpsert {
	u.SetNull(customer.FieldPhotoURL72)
	return u
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (u *CustomerUpsert) SetPhotoURL192(v string) *CustomerUpsert {
	u.Set(customer.FieldPhotoURL192, v)
	return u
}

// UpdatePhotoURL192 sets the "photo_url_192" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePhotoURL192() *CustomerUpsert {
	u.SetExcluded(customer.FieldPhotoURL192)
	return u
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (u *CustomerUpsert) ClearPhotoURL192() *CustomerUpsert {
	u.SetNull(customer.FieldPhotoURL192)
	return u
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (u *CustomerUpsert) SetPhotoURL512(v string) *CustomerUpsert {
	u.Set(customer.FieldPhotoURL512, v)
	return u
}

// UpdatePhotoURL512 sets the "photo_url_512" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePhotoURL512() *CustomerUpsert {
	u.SetExcluded(customer.FieldPhotoURL512)
	return u
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (u *CustomerUpsert) ClearPhotoURL512() *CustomerUpsert {
	u.SetNull(customer.FieldPhotoURL512)
	return u
}

// SetTimezone sets the "timezone" field.
func (u *CustomerUpsert) SetTimezone(v string) *CustomerUpsert {
	u.Set(customer.FieldTimezone, v)
	return u
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateTimezone() *CustomerUpsert {
	u.SetExcluded(customer.FieldTimezone)
	return u
}

// ClearTimezone clears the value of the "timezone" field.
func (u *CustomerUpsert) ClearTimezone() *CustomerUpsert {
	u.SetNull(customer.FieldTimezone)
	return u
}

// SetLocale sets the "locale" field.
func (u *CustomerUpsert) SetLocale(v string) *CustomerUpsert {
	u.Set(customer.FieldLocale, v)
	return u
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateLocale() *CustomerUpsert {
	u.SetExcluded(customer.FieldLocale)
	return u
}

// ClearLocale clears the value of the "locale" field.
func (u *CustomerUpsert) ClearLocale() *CustomerUpsert {
	u.SetNull(customer.FieldLocale)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CustomerUpsert) SetCreatedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCreatedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldCreatedAt)
	return u
}

// SetModifiedAt sets the "modified_at" field.
func (u *CustomerUpsert) SetModifiedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldModifiedAt, v)
	return u
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateModifiedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldModifiedAt)
	return u
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *CustomerUpsert) ClearModifiedAt() *CustomerUpsert {
	u.SetNull(customer.FieldModifiedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsert) SetDeletedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateDeletedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsert) ClearDeletedAt() *CustomerUpsert {
	u.SetNull(customer.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertOne) UpdateNewValues() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(customer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerUpsertOne) Ignore() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertOne) DoNothing() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreate.OnConflict
// documentation for more info.
func (u *CustomerUpsertOne) Update(set func(*CustomerUpsert)) *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetDesignation sets the "designation" field.
func (u *CustomerUpsertOne) SetDesignation(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDesignation(v)
	})
}

// UpdateDesignation sets the "designation" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateDesignation() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDesignation()
	})
}

// ClearDesignation clears the value of the "designation" field.
func (u *CustomerUpsertOne) ClearDesignation() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDesignation()
	})
}

// SetTitle sets the "title" field.
func (u *CustomerUpsertOne) SetTitle(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateTitle() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *CustomerUpsertOne) ClearTitle() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearTitle()
	})
}

// SetName sets the "name" field.
func (u *CustomerUpsertOne) SetName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CustomerUpsertOne) ClearName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearName()
	})
}

// SetGivenName sets the "given_name" field.
func (u *CustomerUpsertOne) SetGivenName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetGivenName(v)
	})
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateGivenName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateGivenName()
	})
}

// ClearGivenName clears the value of the "given_name" field.
func (u *CustomerUpsertOne) ClearGivenName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearGivenName()
	})
}

// SetMiddleName sets the "middle_name" field.
func (u *CustomerUpsertOne) SetMiddleName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetMiddleName(v)
	})
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateMiddleName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateMiddleName()
	})
}

// ClearMiddleName clears the value of the "middle_name" field.
func (u *CustomerUpsertOne) ClearMiddleName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearMiddleName()
	})
}

// SetFamilyName sets the "family_name" field.
func (u *CustomerUpsertOne) SetFamilyName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetFamilyName(v)
	})
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateFamilyName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateFamilyName()
	})
}

// ClearFamilyName clears the value of the "family_name" field.
func (u *CustomerUpsertOne) ClearFamilyName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearFamilyName()
	})
}

// SetPhotoURL sets the "photo_url" field.
func (u *CustomerUpsertOne) SetPhotoURL(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL(v)
	})
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePhotoURL() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL()
	})
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (u *CustomerUpsertOne) ClearPhotoURL() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL()
	})
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (u *CustomerUpsertOne) SetPhotoURL24(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL24(v)
	})
}

// UpdatePhotoURL24 sets the "photo_url_24" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePhotoURL24() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL24()
	})
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (u *CustomerUpsertOne) ClearPhotoURL24() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL24()
	})
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (u *CustomerUpsertOne) SetPhotoURL32(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL32(v)
	})
}

// UpdatePhotoURL32 sets the "photo_url_32" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePhotoURL32() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL32()
	})
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (u *CustomerUpsertOne) ClearPhotoURL32() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL32()
	})
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (u *CustomerUpsertOne) SetPhotoURL48(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL48(v)
	})
}

// UpdatePhotoURL48 sets the "photo_url_48" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePhotoURL48() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL48()
	})
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (u *CustomerUpsertOne) ClearPhotoURL48() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL48()
	})
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (u *CustomerUpsertOne) SetPhotoURL72(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL72(v)
	})
}

// UpdatePhotoURL72 sets the "photo_url_72" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePhotoURL72() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL72()
	})
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (u *CustomerUpsertOne) ClearPhotoURL72() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL72()
	})
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (u *CustomerUpsertOne) SetPhotoURL192(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL192(v)
	})
}

// UpdatePhotoURL192 sets the "photo_url_192" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePhotoURL192() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL192()
	})
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (u *CustomerUpsertOne) ClearPhotoURL192() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL192()
	})
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (u *CustomerUpsertOne) SetPhotoURL512(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL512(v)
	})
}

// UpdatePhotoURL512 sets the "photo_url_512" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePhotoURL512() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL512()
	})
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (u *CustomerUpsertOne) ClearPhotoURL512() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL512()
	})
}

// SetTimezone sets the "timezone" field.
func (u *CustomerUpsertOne) SetTimezone(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateTimezone() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *CustomerUpsertOne) ClearTimezone() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearTimezone()
	})
}

// SetLocale sets the "locale" field.
func (u *CustomerUpsertOne) SetLocale(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateLocale() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateLocale()
	})
}

// ClearLocale clears the value of the "locale" field.
func (u *CustomerUpsertOne) ClearLocale() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearLocale()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CustomerUpsertOne) SetCreatedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCreatedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *CustomerUpsertOne) SetModifiedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateModifiedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateModifiedAt()
	})
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *CustomerUpsertOne) ClearModifiedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearModifiedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsertOne) SetDeletedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateDeletedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsertOne) ClearDeletedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *CustomerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for CustomerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: CustomerUpsertOne.ID is not supported by MySQL driver. Use CustomerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerCreateBulk is the builder for creating many Customer entities in bulk.
type CustomerCreateBulk struct {
	config
	err      error
	builders []*CustomerCreate
	conflict []sql.ConflictOption
}

// Save creates the Customer entities in the database.
func (ccb *CustomerCreateBulk) Save(ctx context.Context) ([]*Customer, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Customer, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CustomerCreateBulk) SaveX(ctx context.Context) []*Customer {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CustomerCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetDesignation(v+v).
//		}).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertBulk {
	ccb.conflict = opts
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflictColumns(columns ...string) *CustomerUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// CustomerUpsertBulk is the builder for "upsert"-ing
// a bulk of Customer nodes.
type CustomerUpsertBulk struct {
	create *CustomerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertBulk) UpdateNewValues() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(customer.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerUpsertBulk) Ignore() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertBulk) DoNothing() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerUpsertBulk) Update(set func(*CustomerUpsert)) *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetDesignation sets the "designation" field.
func (u *CustomerUpsertBulk) SetDesignation(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDesignation(v)
	})
}

// UpdateDesignation sets the "designation" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateDesignation() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDesignation()
	})
}

// ClearDesignation clears the value of the "designation" field.
func (u *CustomerUpsertBulk) ClearDesignation() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDesignation()
	})
}

// SetTitle sets the "title" field.
func (u *CustomerUpsertBulk) SetTitle(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateTitle() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *CustomerUpsertBulk) ClearTitle() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearTitle()
	})
}

// SetName sets the "name" field.
func (u *CustomerUpsertBulk) SetName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CustomerUpsertBulk) ClearName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearName()
	})
}

// SetGivenName sets the "given_name" field.
func (u *CustomerUpsertBulk) SetGivenName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetGivenName(v)
	})
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateGivenName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateGivenName()
	})
}

// ClearGivenName clears the value of the "given_name" field.
func (u *CustomerUpsertBulk) ClearGivenName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearGivenName()
	})
}

// SetMiddleName sets the "middle_name" field.
func (u *CustomerUpsertBulk) SetMiddleName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetMiddleName(v)
	})
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateMiddleName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateMiddleName()
	})
}

// ClearMiddleName clears the value of the "middle_name" field.
func (u *CustomerUpsertBulk) ClearMiddleName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearMiddleName()
	})
}

// SetFamilyName sets the "family_name" field.
func (u *CustomerUpsertBulk) SetFamilyName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetFamilyName(v)
	})
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateFamilyName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateFamilyName()
	})
}

// ClearFamilyName clears the value of the "family_name" field.
func (u *CustomerUpsertBulk) ClearFamilyName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearFamilyName()
	})
}

// SetPhotoURL sets the "photo_url" field.
func (u *CustomerUpsertBulk) SetPhotoURL(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL(v)
	})
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePhotoURL() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL()
	})
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (u *CustomerUpsertBulk) ClearPhotoURL() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL()
	})
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (u *CustomerUpsertBulk) SetPhotoURL24(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL24(v)
	})
}

// UpdatePhotoURL24 sets the "photo_url_24" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePhotoURL24() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL24()
	})
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (u *CustomerUpsertBulk) ClearPhotoURL24() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL24()
	})
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (u *CustomerUpsertBulk) SetPhotoURL32(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL32(v)
	})
}

// UpdatePhotoURL32 sets the "photo_url_32" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePhotoURL32() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL32()
	})
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (u *CustomerUpsertBulk) ClearPhotoURL32() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL32()
	})
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (u *CustomerUpsertBulk) SetPhotoURL48(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL48(v)
	})
}

// UpdatePhotoURL48 sets the "photo_url_48" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePhotoURL48() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL48()
	})
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (u *CustomerUpsertBulk) ClearPhotoURL48() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL48()
	})
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (u *CustomerUpsertBulk) SetPhotoURL72(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL72(v)
	})
}

// UpdatePhotoURL72 sets the "photo_url_72" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePhotoURL72() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL72()
	})
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (u *CustomerUpsertBulk) ClearPhotoURL72() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL72()
	})
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (u *CustomerUpsertBulk) SetPhotoURL192(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL192(v)
	})
}

// UpdatePhotoURL192 sets the "photo_url_192" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePhotoURL192() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL192()
	})
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (u *CustomerUpsertBulk) ClearPhotoURL192() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL192()
	})
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (u *CustomerUpsertBulk) SetPhotoURL512(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPhotoURL512(v)
	})
}

// UpdatePhotoURL512 sets the "photo_url_512" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePhotoURL512() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePhotoURL512()
	})
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (u *CustomerUpsertBulk) ClearPhotoURL512() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPhotoURL512()
	})
}

// SetTimezone sets the "timezone" field.
func (u *CustomerUpsertBulk) SetTimezone(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateTimezone() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *CustomerUpsertBulk) ClearTimezone() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearTimezone()
	})
}

// SetLocale sets the "locale" field.
func (u *CustomerUpsertBulk) SetLocale(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateLocale() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateLocale()
	})
}

// ClearLocale clears the value of the "locale" field.
func (u *CustomerUpsertBulk) ClearLocale() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearLocale()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CustomerUpsertBulk) SetCreatedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCreatedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *CustomerUpsertBulk) SetModifiedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateModifiedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateModifiedAt()
	})
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *CustomerUpsertBulk) ClearModifiedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearModifiedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsertBulk) SetDeletedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateDeletedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsertBulk) ClearDeletedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *CustomerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the CustomerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for CustomerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
