// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/sigmasee/sigmasee/customer/shared/entities/customeroutbox"
	"github.com/sigmasee/sigmasee/customer/shared/entities/predicate"

	"github.com/sigmasee/sigmasee/customer/shared/entities/internal"
)

// CustomerOutboxUpdate is the builder for updating CustomerOutbox entities.
type CustomerOutboxUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerOutboxMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerOutboxUpdate builder.
func (cou *CustomerOutboxUpdate) Where(ps ...predicate.CustomerOutbox) *CustomerOutboxUpdate {
	cou.mutation.Where(ps...)
	return cou
}

// SetTimestamp sets the "timestamp" field.
func (cou *CustomerOutboxUpdate) SetTimestamp(t time.Time) *CustomerOutboxUpdate {
	cou.mutation.SetTimestamp(t)
	return cou
}

// SetTopic sets the "topic" field.
func (cou *CustomerOutboxUpdate) SetTopic(s string) *CustomerOutboxUpdate {
	cou.mutation.SetTopic(s)
	return cou
}

// SetKey sets the "key" field.
func (cou *CustomerOutboxUpdate) SetKey(b []byte) *CustomerOutboxUpdate {
	cou.mutation.SetKey(b)
	return cou
}

// SetPayload sets the "payload" field.
func (cou *CustomerOutboxUpdate) SetPayload(b []byte) *CustomerOutboxUpdate {
	cou.mutation.SetPayload(b)
	return cou
}

// SetHeaders sets the "headers" field.
func (cou *CustomerOutboxUpdate) SetHeaders(m map[string][]uint8) *CustomerOutboxUpdate {
	cou.mutation.SetHeaders(m)
	return cou
}

// SetRetryCount sets the "retry_count" field.
func (cou *CustomerOutboxUpdate) SetRetryCount(i int) *CustomerOutboxUpdate {
	cou.mutation.ResetRetryCount()
	cou.mutation.SetRetryCount(i)
	return cou
}

// AddRetryCount adds i to the "retry_count" field.
func (cou *CustomerOutboxUpdate) AddRetryCount(i int) *CustomerOutboxUpdate {
	cou.mutation.AddRetryCount(i)
	return cou
}

// SetStatus sets the "status" field.
func (cou *CustomerOutboxUpdate) SetStatus(c customeroutbox.Status) *CustomerOutboxUpdate {
	cou.mutation.SetStatus(c)
	return cou
}

// SetLastRetry sets the "last_retry" field.
func (cou *CustomerOutboxUpdate) SetLastRetry(t time.Time) *CustomerOutboxUpdate {
	cou.mutation.SetLastRetry(t)
	return cou
}

// SetNillableLastRetry sets the "last_retry" field if the given value is not nil.
func (cou *CustomerOutboxUpdate) SetNillableLastRetry(t *time.Time) *CustomerOutboxUpdate {
	if t != nil {
		cou.SetLastRetry(*t)
	}
	return cou
}

// ClearLastRetry clears the value of the "last_retry" field.
func (cou *CustomerOutboxUpdate) ClearLastRetry() *CustomerOutboxUpdate {
	cou.mutation.ClearLastRetry()
	return cou
}

// SetProcessingErrors sets the "processing_errors" field.
func (cou *CustomerOutboxUpdate) SetProcessingErrors(s []string) *CustomerOutboxUpdate {
	cou.mutation.SetProcessingErrors(s)
	return cou
}

// AppendProcessingErrors appends s to the "processing_errors" field.
func (cou *CustomerOutboxUpdate) AppendProcessingErrors(s []string) *CustomerOutboxUpdate {
	cou.mutation.AppendProcessingErrors(s)
	return cou
}

// ClearProcessingErrors clears the value of the "processing_errors" field.
func (cou *CustomerOutboxUpdate) ClearProcessingErrors() *CustomerOutboxUpdate {
	cou.mutation.ClearProcessingErrors()
	return cou
}

// Mutation returns the CustomerOutboxMutation object of the builder.
func (cou *CustomerOutboxUpdate) Mutation() *CustomerOutboxMutation {
	return cou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cou *CustomerOutboxUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cou.sqlSave, cou.mutation, cou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cou *CustomerOutboxUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *CustomerOutboxUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *CustomerOutboxUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cou *CustomerOutboxUpdate) check() error {
	if v, ok := cou.mutation.Status(); ok {
		if err := customeroutbox.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entities: validator failed for field "CustomerOutbox.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cou *CustomerOutboxUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerOutboxUpdate {
	cou.modifiers = append(cou.modifiers, modifiers...)
	return cou
}

func (cou *CustomerOutboxUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customeroutbox.Table, customeroutbox.Columns, sqlgraph.NewFieldSpec(customeroutbox.FieldID, field.TypeString))
	if ps := cou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cou.mutation.Timestamp(); ok {
		_spec.SetField(customeroutbox.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := cou.mutation.Topic(); ok {
		_spec.SetField(customeroutbox.FieldTopic, field.TypeString, value)
	}
	if value, ok := cou.mutation.Key(); ok {
		_spec.SetField(customeroutbox.FieldKey, field.TypeBytes, value)
	}
	if value, ok := cou.mutation.Payload(); ok {
		_spec.SetField(customeroutbox.FieldPayload, field.TypeBytes, value)
	}
	if value, ok := cou.mutation.Headers(); ok {
		_spec.SetField(customeroutbox.FieldHeaders, field.TypeJSON, value)
	}
	if value, ok := cou.mutation.RetryCount(); ok {
		_spec.SetField(customeroutbox.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := cou.mutation.AddedRetryCount(); ok {
		_spec.AddField(customeroutbox.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := cou.mutation.Status(); ok {
		_spec.SetField(customeroutbox.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cou.mutation.LastRetry(); ok {
		_spec.SetField(customeroutbox.FieldLastRetry, field.TypeTime, value)
	}
	if cou.mutation.LastRetryCleared() {
		_spec.ClearField(customeroutbox.FieldLastRetry, field.TypeTime)
	}
	if value, ok := cou.mutation.ProcessingErrors(); ok {
		_spec.SetField(customeroutbox.FieldProcessingErrors, field.TypeJSON, value)
	}
	if value, ok := cou.mutation.AppendedProcessingErrors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, customeroutbox.FieldProcessingErrors, value)
		})
	}
	if cou.mutation.ProcessingErrorsCleared() {
		_spec.ClearField(customeroutbox.FieldProcessingErrors, field.TypeJSON)
	}
	_spec.Node.Schema = cou.schemaConfig.CustomerOutbox
	ctx = internal.NewSchemaConfigContext(ctx, cou.schemaConfig)
	_spec.AddModifiers(cou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customeroutbox.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cou.mutation.done = true
	return n, nil
}

// CustomerOutboxUpdateOne is the builder for updating a single CustomerOutbox entity.
type CustomerOutboxUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerOutboxMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTimestamp sets the "timestamp" field.
func (couo *CustomerOutboxUpdateOne) SetTimestamp(t time.Time) *CustomerOutboxUpdateOne {
	couo.mutation.SetTimestamp(t)
	return couo
}

// SetTopic sets the "topic" field.
func (couo *CustomerOutboxUpdateOne) SetTopic(s string) *CustomerOutboxUpdateOne {
	couo.mutation.SetTopic(s)
	return couo
}

// SetKey sets the "key" field.
func (couo *CustomerOutboxUpdateOne) SetKey(b []byte) *CustomerOutboxUpdateOne {
	couo.mutation.SetKey(b)
	return couo
}

// SetPayload sets the "payload" field.
func (couo *CustomerOutboxUpdateOne) SetPayload(b []byte) *CustomerOutboxUpdateOne {
	couo.mutation.SetPayload(b)
	return couo
}

// SetHeaders sets the "headers" field.
func (couo *CustomerOutboxUpdateOne) SetHeaders(m map[string][]uint8) *CustomerOutboxUpdateOne {
	couo.mutation.SetHeaders(m)
	return couo
}

// SetRetryCount sets the "retry_count" field.
func (couo *CustomerOutboxUpdateOne) SetRetryCount(i int) *CustomerOutboxUpdateOne {
	couo.mutation.ResetRetryCount()
	couo.mutation.SetRetryCount(i)
	return couo
}

// AddRetryCount adds i to the "retry_count" field.
func (couo *CustomerOutboxUpdateOne) AddRetryCount(i int) *CustomerOutboxUpdateOne {
	couo.mutation.AddRetryCount(i)
	return couo
}

// SetStatus sets the "status" field.
func (couo *CustomerOutboxUpdateOne) SetStatus(c customeroutbox.Status) *CustomerOutboxUpdateOne {
	couo.mutation.SetStatus(c)
	return couo
}

// SetLastRetry sets the "last_retry" field.
func (couo *CustomerOutboxUpdateOne) SetLastRetry(t time.Time) *CustomerOutboxUpdateOne {
	couo.mutation.SetLastRetry(t)
	return couo
}

// SetNillableLastRetry sets the "last_retry" field if the given value is not nil.
func (couo *CustomerOutboxUpdateOne) SetNillableLastRetry(t *time.Time) *CustomerOutboxUpdateOne {
	if t != nil {
		couo.SetLastRetry(*t)
	}
	return couo
}

// ClearLastRetry clears the value of the "last_retry" field.
func (couo *CustomerOutboxUpdateOne) ClearLastRetry() *CustomerOutboxUpdateOne {
	couo.mutation.ClearLastRetry()
	return couo
}

// SetProcessingErrors sets the "processing_errors" field.
func (couo *CustomerOutboxUpdateOne) SetProcessingErrors(s []string) *CustomerOutboxUpdateOne {
	couo.mutation.SetProcessingErrors(s)
	return couo
}

// AppendProcessingErrors appends s to the "processing_errors" field.
func (couo *CustomerOutboxUpdateOne) AppendProcessingErrors(s []string) *CustomerOutboxUpdateOne {
	couo.mutation.AppendProcessingErrors(s)
	return couo
}

// ClearProcessingErrors clears the value of the "processing_errors" field.
func (couo *CustomerOutboxUpdateOne) ClearProcessingErrors() *CustomerOutboxUpdateOne {
	couo.mutation.ClearProcessingErrors()
	return couo
}

// Mutation returns the CustomerOutboxMutation object of the builder.
func (couo *CustomerOutboxUpdateOne) Mutation() *CustomerOutboxMutation {
	return couo.mutation
}

// Where appends a list predicates to the CustomerOutboxUpdate builder.
func (couo *CustomerOutboxUpdateOne) Where(ps ...predicate.CustomerOutbox) *CustomerOutboxUpdateOne {
	couo.mutation.Where(ps...)
	return couo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (couo *CustomerOutboxUpdateOne) Select(field string, fields ...string) *CustomerOutboxUpdateOne {
	couo.fields = append([]string{field}, fields...)
	return couo
}

// Save executes the query and returns the updated CustomerOutbox entity.
func (couo *CustomerOutboxUpdateOne) Save(ctx context.Context) (*CustomerOutbox, error) {
	return withHooks(ctx, couo.sqlSave, couo.mutation, couo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (couo *CustomerOutboxUpdateOne) SaveX(ctx context.Context) *CustomerOutbox {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *CustomerOutboxUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *CustomerOutboxUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (couo *CustomerOutboxUpdateOne) check() error {
	if v, ok := couo.mutation.Status(); ok {
		if err := customeroutbox.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entities: validator failed for field "CustomerOutbox.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (couo *CustomerOutboxUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerOutboxUpdateOne {
	couo.modifiers = append(couo.modifiers, modifiers...)
	return couo
}

func (couo *CustomerOutboxUpdateOne) sqlSave(ctx context.Context) (_node *CustomerOutbox, err error) {
	if err := couo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customeroutbox.Table, customeroutbox.Columns, sqlgraph.NewFieldSpec(customeroutbox.FieldID, field.TypeString))
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "CustomerOutbox.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := couo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customeroutbox.FieldID)
		for _, f := range fields {
			if !customeroutbox.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != customeroutbox.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := couo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := couo.mutation.Timestamp(); ok {
		_spec.SetField(customeroutbox.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := couo.mutation.Topic(); ok {
		_spec.SetField(customeroutbox.FieldTopic, field.TypeString, value)
	}
	if value, ok := couo.mutation.Key(); ok {
		_spec.SetField(customeroutbox.FieldKey, field.TypeBytes, value)
	}
	if value, ok := couo.mutation.Payload(); ok {
		_spec.SetField(customeroutbox.FieldPayload, field.TypeBytes, value)
	}
	if value, ok := couo.mutation.Headers(); ok {
		_spec.SetField(customeroutbox.FieldHeaders, field.TypeJSON, value)
	}
	if value, ok := couo.mutation.RetryCount(); ok {
		_spec.SetField(customeroutbox.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := couo.mutation.AddedRetryCount(); ok {
		_spec.AddField(customeroutbox.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := couo.mutation.Status(); ok {
		_spec.SetField(customeroutbox.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := couo.mutation.LastRetry(); ok {
		_spec.SetField(customeroutbox.FieldLastRetry, field.TypeTime, value)
	}
	if couo.mutation.LastRetryCleared() {
		_spec.ClearField(customeroutbox.FieldLastRetry, field.TypeTime)
	}
	if value, ok := couo.mutation.ProcessingErrors(); ok {
		_spec.SetField(customeroutbox.FieldProcessingErrors, field.TypeJSON, value)
	}
	if value, ok := couo.mutation.AppendedProcessingErrors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, customeroutbox.FieldProcessingErrors, value)
		})
	}
	if couo.mutation.ProcessingErrorsCleared() {
		_spec.ClearField(customeroutbox.FieldProcessingErrors, field.TypeJSON)
	}
	_spec.Node.Schema = couo.schemaConfig.CustomerOutbox
	ctx = internal.NewSchemaConfigContext(ctx, couo.schemaConfig)
	_spec.AddModifiers(couo.modifiers...)
	_node = &CustomerOutbox{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customeroutbox.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	couo.mutation.done = true
	return _node, nil
}
