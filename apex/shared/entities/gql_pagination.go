// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomer"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomeridentity"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[string]
	PageInfo       = entgql.PageInfo[string]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ApexCustomerEdge is the edge representation of ApexCustomer.
type ApexCustomerEdge struct {
	Node   *ApexCustomer `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// ApexCustomerConnection is the connection containing edges to ApexCustomer.
type ApexCustomerConnection struct {
	Edges      []*ApexCustomerEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *ApexCustomerConnection) build(nodes []*ApexCustomer, pager *apexcustomerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ApexCustomer
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ApexCustomer {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ApexCustomer {
			return nodes[i]
		}
	}
	c.Edges = make([]*ApexCustomerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ApexCustomerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ApexCustomerPaginateOption enables pagination customization.
type ApexCustomerPaginateOption func(*apexcustomerPager) error

// WithApexCustomerOrder configures pagination ordering.
func WithApexCustomerOrder(order *ApexCustomerOrder) ApexCustomerPaginateOption {
	if order == nil {
		order = DefaultApexCustomerOrder
	}
	o := *order
	return func(pager *apexcustomerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultApexCustomerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithApexCustomerFilter configures pagination filter.
func WithApexCustomerFilter(filter func(*ApexCustomerQuery) (*ApexCustomerQuery, error)) ApexCustomerPaginateOption {
	return func(pager *apexcustomerPager) error {
		if filter == nil {
			return errors.New("ApexCustomerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type apexcustomerPager struct {
	reverse bool
	order   *ApexCustomerOrder
	filter  func(*ApexCustomerQuery) (*ApexCustomerQuery, error)
}

func newApexCustomerPager(opts []ApexCustomerPaginateOption, reverse bool) (*apexcustomerPager, error) {
	pager := &apexcustomerPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultApexCustomerOrder
	}
	return pager, nil
}

func (p *apexcustomerPager) applyFilter(query *ApexCustomerQuery) (*ApexCustomerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *apexcustomerPager) toCursor(ac *ApexCustomer) Cursor {
	return p.order.Field.toCursor(ac)
}

func (p *apexcustomerPager) applyCursors(query *ApexCustomerQuery, after, before *Cursor) (*ApexCustomerQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultApexCustomerOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *apexcustomerPager) applyOrder(query *ApexCustomerQuery) *ApexCustomerQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultApexCustomerOrder.Field {
		query = query.Order(DefaultApexCustomerOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *apexcustomerPager) orderExpr(query *ApexCustomerQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultApexCustomerOrder.Field {
			b.Comma().Ident(DefaultApexCustomerOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ApexCustomer.
func (ac *ApexCustomerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ApexCustomerPaginateOption,
) (*ApexCustomerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newApexCustomerPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ac, err = pager.applyFilter(ac); err != nil {
		return nil, err
	}
	conn := &ApexCustomerConnection{Edges: []*ApexCustomerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ac.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ac, err = pager.applyCursors(ac, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ac.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ac.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ac = pager.applyOrder(ac)
	nodes, err := ac.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ApexCustomerOrderFieldID orders ApexCustomer by id.
	ApexCustomerOrderFieldID = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.ID, nil
		},
		column: apexcustomer.FieldID,
		toTerm: apexcustomer.ByID,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.ID,
			}
		},
	}
	// ApexCustomerOrderFieldEventRaisedAt orders ApexCustomer by event_raised_at.
	ApexCustomerOrderFieldEventRaisedAt = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.EventRaisedAt, nil
		},
		column: apexcustomer.FieldEventRaisedAt,
		toTerm: apexcustomer.ByEventRaisedAt,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.EventRaisedAt,
			}
		},
	}
	// ApexCustomerOrderFieldName orders ApexCustomer by name.
	ApexCustomerOrderFieldName = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.Name, nil
		},
		column: apexcustomer.FieldName,
		toTerm: apexcustomer.ByName,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.Name,
			}
		},
	}
	// ApexCustomerOrderFieldGivenName orders ApexCustomer by given_name.
	ApexCustomerOrderFieldGivenName = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.GivenName, nil
		},
		column: apexcustomer.FieldGivenName,
		toTerm: apexcustomer.ByGivenName,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.GivenName,
			}
		},
	}
	// ApexCustomerOrderFieldMiddleName orders ApexCustomer by middle_name.
	ApexCustomerOrderFieldMiddleName = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.MiddleName, nil
		},
		column: apexcustomer.FieldMiddleName,
		toTerm: apexcustomer.ByMiddleName,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.MiddleName,
			}
		},
	}
	// ApexCustomerOrderFieldFamilyName orders ApexCustomer by family_name.
	ApexCustomerOrderFieldFamilyName = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.FamilyName, nil
		},
		column: apexcustomer.FieldFamilyName,
		toTerm: apexcustomer.ByFamilyName,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.FamilyName,
			}
		},
	}
	// ApexCustomerOrderFieldPhotoURL orders ApexCustomer by photo_url.
	ApexCustomerOrderFieldPhotoURL = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.PhotoURL, nil
		},
		column: apexcustomer.FieldPhotoURL,
		toTerm: apexcustomer.ByPhotoURL,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.PhotoURL,
			}
		},
	}
	// ApexCustomerOrderFieldPhotoURL24 orders ApexCustomer by photo_url_24.
	ApexCustomerOrderFieldPhotoURL24 = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.PhotoURL24, nil
		},
		column: apexcustomer.FieldPhotoURL24,
		toTerm: apexcustomer.ByPhotoURL24,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.PhotoURL24,
			}
		},
	}
	// ApexCustomerOrderFieldPhotoURL32 orders ApexCustomer by photo_url_32.
	ApexCustomerOrderFieldPhotoURL32 = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.PhotoURL32, nil
		},
		column: apexcustomer.FieldPhotoURL32,
		toTerm: apexcustomer.ByPhotoURL32,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.PhotoURL32,
			}
		},
	}
	// ApexCustomerOrderFieldPhotoURL48 orders ApexCustomer by photo_url_48.
	ApexCustomerOrderFieldPhotoURL48 = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.PhotoURL48, nil
		},
		column: apexcustomer.FieldPhotoURL48,
		toTerm: apexcustomer.ByPhotoURL48,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.PhotoURL48,
			}
		},
	}
	// ApexCustomerOrderFieldPhotoURL72 orders ApexCustomer by photo_url_72.
	ApexCustomerOrderFieldPhotoURL72 = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.PhotoURL72, nil
		},
		column: apexcustomer.FieldPhotoURL72,
		toTerm: apexcustomer.ByPhotoURL72,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.PhotoURL72,
			}
		},
	}
	// ApexCustomerOrderFieldPhotoURL192 orders ApexCustomer by photo_url_192.
	ApexCustomerOrderFieldPhotoURL192 = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.PhotoURL192, nil
		},
		column: apexcustomer.FieldPhotoURL192,
		toTerm: apexcustomer.ByPhotoURL192,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.PhotoURL192,
			}
		},
	}
	// ApexCustomerOrderFieldPhotoURL512 orders ApexCustomer by photo_url_512.
	ApexCustomerOrderFieldPhotoURL512 = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.PhotoURL512, nil
		},
		column: apexcustomer.FieldPhotoURL512,
		toTerm: apexcustomer.ByPhotoURL512,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.PhotoURL512,
			}
		},
	}
	// ApexCustomerOrderFieldCreatedAt orders ApexCustomer by created_at.
	ApexCustomerOrderFieldCreatedAt = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.CreatedAt, nil
		},
		column: apexcustomer.FieldCreatedAt,
		toTerm: apexcustomer.ByCreatedAt,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.CreatedAt,
			}
		},
	}
	// ApexCustomerOrderFieldModifiedAt orders ApexCustomer by modified_at.
	ApexCustomerOrderFieldModifiedAt = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.ModifiedAt, nil
		},
		column: apexcustomer.FieldModifiedAt,
		toTerm: apexcustomer.ByModifiedAt,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.ModifiedAt,
			}
		},
	}
	// ApexCustomerOrderFieldDeletedAt orders ApexCustomer by deleted_at.
	ApexCustomerOrderFieldDeletedAt = &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.DeletedAt, nil
		},
		column: apexcustomer.FieldDeletedAt,
		toTerm: apexcustomer.ByDeletedAt,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{
				ID:    ac.ID,
				Value: ac.DeletedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ApexCustomerOrderField) String() string {
	var str string
	switch f.column {
	case ApexCustomerOrderFieldID.column:
		str = "id"
	case ApexCustomerOrderFieldEventRaisedAt.column:
		str = "eventRaisedAt"
	case ApexCustomerOrderFieldName.column:
		str = "name"
	case ApexCustomerOrderFieldGivenName.column:
		str = "givenName"
	case ApexCustomerOrderFieldMiddleName.column:
		str = "middleName"
	case ApexCustomerOrderFieldFamilyName.column:
		str = "familyName"
	case ApexCustomerOrderFieldPhotoURL.column:
		str = "photoUrl"
	case ApexCustomerOrderFieldPhotoURL24.column:
		str = "photoUrl24"
	case ApexCustomerOrderFieldPhotoURL32.column:
		str = "photoUrl32"
	case ApexCustomerOrderFieldPhotoURL48.column:
		str = "photoUrl48"
	case ApexCustomerOrderFieldPhotoURL72.column:
		str = "photoUrl72"
	case ApexCustomerOrderFieldPhotoURL192.column:
		str = "photoUrl192"
	case ApexCustomerOrderFieldPhotoURL512.column:
		str = "photoUrl512"
	case ApexCustomerOrderFieldCreatedAt.column:
		str = "createdAt"
	case ApexCustomerOrderFieldModifiedAt.column:
		str = "modifiedAt"
	case ApexCustomerOrderFieldDeletedAt.column:
		str = "deletedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ApexCustomerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ApexCustomerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ApexCustomerOrderField %T must be a string", v)
	}
	switch str {
	case "id":
		*f = *ApexCustomerOrderFieldID
	case "eventRaisedAt":
		*f = *ApexCustomerOrderFieldEventRaisedAt
	case "name":
		*f = *ApexCustomerOrderFieldName
	case "givenName":
		*f = *ApexCustomerOrderFieldGivenName
	case "middleName":
		*f = *ApexCustomerOrderFieldMiddleName
	case "familyName":
		*f = *ApexCustomerOrderFieldFamilyName
	case "photoUrl":
		*f = *ApexCustomerOrderFieldPhotoURL
	case "photoUrl24":
		*f = *ApexCustomerOrderFieldPhotoURL24
	case "photoUrl32":
		*f = *ApexCustomerOrderFieldPhotoURL32
	case "photoUrl48":
		*f = *ApexCustomerOrderFieldPhotoURL48
	case "photoUrl72":
		*f = *ApexCustomerOrderFieldPhotoURL72
	case "photoUrl192":
		*f = *ApexCustomerOrderFieldPhotoURL192
	case "photoUrl512":
		*f = *ApexCustomerOrderFieldPhotoURL512
	case "createdAt":
		*f = *ApexCustomerOrderFieldCreatedAt
	case "modifiedAt":
		*f = *ApexCustomerOrderFieldModifiedAt
	case "deletedAt":
		*f = *ApexCustomerOrderFieldDeletedAt
	default:
		return fmt.Errorf("%s is not a valid ApexCustomerOrderField", str)
	}
	return nil
}

// ApexCustomerOrderField defines the ordering field of ApexCustomer.
type ApexCustomerOrderField struct {
	// Value extracts the ordering value from the given ApexCustomer.
	Value    func(*ApexCustomer) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) apexcustomer.OrderOption
	toCursor func(*ApexCustomer) Cursor
}

// ApexCustomerOrder defines the ordering of ApexCustomer.
type ApexCustomerOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *ApexCustomerOrderField `json:"field"`
}

// DefaultApexCustomerOrder is the default ordering of ApexCustomer.
var DefaultApexCustomerOrder = &ApexCustomerOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ApexCustomerOrderField{
		Value: func(ac *ApexCustomer) (ent.Value, error) {
			return ac.ID, nil
		},
		column: apexcustomer.FieldID,
		toTerm: apexcustomer.ByID,
		toCursor: func(ac *ApexCustomer) Cursor {
			return Cursor{ID: ac.ID}
		},
	},
}

// ToEdge converts ApexCustomer into ApexCustomerEdge.
func (ac *ApexCustomer) ToEdge(order *ApexCustomerOrder) *ApexCustomerEdge {
	if order == nil {
		order = DefaultApexCustomerOrder
	}
	return &ApexCustomerEdge{
		Node:   ac,
		Cursor: order.Field.toCursor(ac),
	}
}

// ApexCustomerIdentityEdge is the edge representation of ApexCustomerIdentity.
type ApexCustomerIdentityEdge struct {
	Node   *ApexCustomerIdentity `json:"node"`
	Cursor Cursor                `json:"cursor"`
}

// ApexCustomerIdentityConnection is the connection containing edges to ApexCustomerIdentity.
type ApexCustomerIdentityConnection struct {
	Edges      []*ApexCustomerIdentityEdge `json:"edges"`
	PageInfo   PageInfo                    `json:"pageInfo"`
	TotalCount int                         `json:"totalCount"`
}

func (c *ApexCustomerIdentityConnection) build(nodes []*ApexCustomerIdentity, pager *apexcustomeridentityPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ApexCustomerIdentity
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ApexCustomerIdentity {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ApexCustomerIdentity {
			return nodes[i]
		}
	}
	c.Edges = make([]*ApexCustomerIdentityEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ApexCustomerIdentityEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ApexCustomerIdentityPaginateOption enables pagination customization.
type ApexCustomerIdentityPaginateOption func(*apexcustomeridentityPager) error

// WithApexCustomerIdentityOrder configures pagination ordering.
func WithApexCustomerIdentityOrder(order *ApexCustomerIdentityOrder) ApexCustomerIdentityPaginateOption {
	if order == nil {
		order = DefaultApexCustomerIdentityOrder
	}
	o := *order
	return func(pager *apexcustomeridentityPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultApexCustomerIdentityOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithApexCustomerIdentityFilter configures pagination filter.
func WithApexCustomerIdentityFilter(filter func(*ApexCustomerIdentityQuery) (*ApexCustomerIdentityQuery, error)) ApexCustomerIdentityPaginateOption {
	return func(pager *apexcustomeridentityPager) error {
		if filter == nil {
			return errors.New("ApexCustomerIdentityQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type apexcustomeridentityPager struct {
	reverse bool
	order   *ApexCustomerIdentityOrder
	filter  func(*ApexCustomerIdentityQuery) (*ApexCustomerIdentityQuery, error)
}

func newApexCustomerIdentityPager(opts []ApexCustomerIdentityPaginateOption, reverse bool) (*apexcustomeridentityPager, error) {
	pager := &apexcustomeridentityPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultApexCustomerIdentityOrder
	}
	return pager, nil
}

func (p *apexcustomeridentityPager) applyFilter(query *ApexCustomerIdentityQuery) (*ApexCustomerIdentityQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *apexcustomeridentityPager) toCursor(aci *ApexCustomerIdentity) Cursor {
	return p.order.Field.toCursor(aci)
}

func (p *apexcustomeridentityPager) applyCursors(query *ApexCustomerIdentityQuery, after, before *Cursor) (*ApexCustomerIdentityQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultApexCustomerIdentityOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *apexcustomeridentityPager) applyOrder(query *ApexCustomerIdentityQuery) *ApexCustomerIdentityQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultApexCustomerIdentityOrder.Field {
		query = query.Order(DefaultApexCustomerIdentityOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *apexcustomeridentityPager) orderExpr(query *ApexCustomerIdentityQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultApexCustomerIdentityOrder.Field {
			b.Comma().Ident(DefaultApexCustomerIdentityOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ApexCustomerIdentity.
func (aci *ApexCustomerIdentityQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ApexCustomerIdentityPaginateOption,
) (*ApexCustomerIdentityConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newApexCustomerIdentityPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if aci, err = pager.applyFilter(aci); err != nil {
		return nil, err
	}
	conn := &ApexCustomerIdentityConnection{Edges: []*ApexCustomerIdentityEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = aci.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if aci, err = pager.applyCursors(aci, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		aci.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := aci.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	aci = pager.applyOrder(aci)
	nodes, err := aci.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ApexCustomerIdentityOrderFieldID orders ApexCustomerIdentity by id.
	ApexCustomerIdentityOrderFieldID = &ApexCustomerIdentityOrderField{
		Value: func(aci *ApexCustomerIdentity) (ent.Value, error) {
			return aci.ID, nil
		},
		column: apexcustomeridentity.FieldID,
		toTerm: apexcustomeridentity.ByID,
		toCursor: func(aci *ApexCustomerIdentity) Cursor {
			return Cursor{
				ID:    aci.ID,
				Value: aci.ID,
			}
		},
	}
	// ApexCustomerIdentityOrderFieldEmail orders ApexCustomerIdentity by email.
	ApexCustomerIdentityOrderFieldEmail = &ApexCustomerIdentityOrderField{
		Value: func(aci *ApexCustomerIdentity) (ent.Value, error) {
			return aci.Email, nil
		},
		column: apexcustomeridentity.FieldEmail,
		toTerm: apexcustomeridentity.ByEmail,
		toCursor: func(aci *ApexCustomerIdentity) Cursor {
			return Cursor{
				ID:    aci.ID,
				Value: aci.Email,
			}
		},
	}
	// ApexCustomerIdentityOrderFieldEmailVerified orders ApexCustomerIdentity by email_verified.
	ApexCustomerIdentityOrderFieldEmailVerified = &ApexCustomerIdentityOrderField{
		Value: func(aci *ApexCustomerIdentity) (ent.Value, error) {
			return aci.EmailVerified, nil
		},
		column: apexcustomeridentity.FieldEmailVerified,
		toTerm: apexcustomeridentity.ByEmailVerified,
		toCursor: func(aci *ApexCustomerIdentity) Cursor {
			return Cursor{
				ID:    aci.ID,
				Value: aci.EmailVerified,
			}
		},
	}
	// ApexCustomerIdentityOrderFieldCreatedAt orders ApexCustomerIdentity by created_at.
	ApexCustomerIdentityOrderFieldCreatedAt = &ApexCustomerIdentityOrderField{
		Value: func(aci *ApexCustomerIdentity) (ent.Value, error) {
			return aci.CreatedAt, nil
		},
		column: apexcustomeridentity.FieldCreatedAt,
		toTerm: apexcustomeridentity.ByCreatedAt,
		toCursor: func(aci *ApexCustomerIdentity) Cursor {
			return Cursor{
				ID:    aci.ID,
				Value: aci.CreatedAt,
			}
		},
	}
	// ApexCustomerIdentityOrderFieldModifiedAt orders ApexCustomerIdentity by modified_at.
	ApexCustomerIdentityOrderFieldModifiedAt = &ApexCustomerIdentityOrderField{
		Value: func(aci *ApexCustomerIdentity) (ent.Value, error) {
			return aci.ModifiedAt, nil
		},
		column: apexcustomeridentity.FieldModifiedAt,
		toTerm: apexcustomeridentity.ByModifiedAt,
		toCursor: func(aci *ApexCustomerIdentity) Cursor {
			return Cursor{
				ID:    aci.ID,
				Value: aci.ModifiedAt,
			}
		},
	}
	// ApexCustomerIdentityOrderFieldDeletedAt orders ApexCustomerIdentity by deleted_at.
	ApexCustomerIdentityOrderFieldDeletedAt = &ApexCustomerIdentityOrderField{
		Value: func(aci *ApexCustomerIdentity) (ent.Value, error) {
			return aci.DeletedAt, nil
		},
		column: apexcustomeridentity.FieldDeletedAt,
		toTerm: apexcustomeridentity.ByDeletedAt,
		toCursor: func(aci *ApexCustomerIdentity) Cursor {
			return Cursor{
				ID:    aci.ID,
				Value: aci.DeletedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ApexCustomerIdentityOrderField) String() string {
	var str string
	switch f.column {
	case ApexCustomerIdentityOrderFieldID.column:
		str = "id"
	case ApexCustomerIdentityOrderFieldEmail.column:
		str = "email"
	case ApexCustomerIdentityOrderFieldEmailVerified.column:
		str = "emailVerified"
	case ApexCustomerIdentityOrderFieldCreatedAt.column:
		str = "createdAt"
	case ApexCustomerIdentityOrderFieldModifiedAt.column:
		str = "modifiedAt"
	case ApexCustomerIdentityOrderFieldDeletedAt.column:
		str = "deletedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ApexCustomerIdentityOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ApexCustomerIdentityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ApexCustomerIdentityOrderField %T must be a string", v)
	}
	switch str {
	case "id":
		*f = *ApexCustomerIdentityOrderFieldID
	case "email":
		*f = *ApexCustomerIdentityOrderFieldEmail
	case "emailVerified":
		*f = *ApexCustomerIdentityOrderFieldEmailVerified
	case "createdAt":
		*f = *ApexCustomerIdentityOrderFieldCreatedAt
	case "modifiedAt":
		*f = *ApexCustomerIdentityOrderFieldModifiedAt
	case "deletedAt":
		*f = *ApexCustomerIdentityOrderFieldDeletedAt
	default:
		return fmt.Errorf("%s is not a valid ApexCustomerIdentityOrderField", str)
	}
	return nil
}

// ApexCustomerIdentityOrderField defines the ordering field of ApexCustomerIdentity.
type ApexCustomerIdentityOrderField struct {
	// Value extracts the ordering value from the given ApexCustomerIdentity.
	Value    func(*ApexCustomerIdentity) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) apexcustomeridentity.OrderOption
	toCursor func(*ApexCustomerIdentity) Cursor
}

// ApexCustomerIdentityOrder defines the ordering of ApexCustomerIdentity.
type ApexCustomerIdentityOrder struct {
	Direction OrderDirection                  `json:"direction"`
	Field     *ApexCustomerIdentityOrderField `json:"field"`
}

// DefaultApexCustomerIdentityOrder is the default ordering of ApexCustomerIdentity.
var DefaultApexCustomerIdentityOrder = &ApexCustomerIdentityOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ApexCustomerIdentityOrderField{
		Value: func(aci *ApexCustomerIdentity) (ent.Value, error) {
			return aci.ID, nil
		},
		column: apexcustomeridentity.FieldID,
		toTerm: apexcustomeridentity.ByID,
		toCursor: func(aci *ApexCustomerIdentity) Cursor {
			return Cursor{ID: aci.ID}
		},
	},
}

// ToEdge converts ApexCustomerIdentity into ApexCustomerIdentityEdge.
func (aci *ApexCustomerIdentity) ToEdge(order *ApexCustomerIdentityOrder) *ApexCustomerIdentityEdge {
	if order == nil {
		order = DefaultApexCustomerIdentityOrder
	}
	return &ApexCustomerIdentityEdge{
		Node:   aci,
		Cursor: order.Field.toCursor(aci),
	}
}
