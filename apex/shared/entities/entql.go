// Code generated by ent, DO NOT EDIT.

package entities

import (
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomer"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomeridentity"
	"github.com/sigmasee/sigmasee/apex/shared/entities/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apexcustomer.Table,
			Columns: apexcustomer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: apexcustomer.FieldID,
			},
		},
		Type: "ApexCustomer",
		Fields: map[string]*sqlgraph.FieldSpec{
			apexcustomer.FieldCreatedAt:     {Type: field.TypeTime, Column: apexcustomer.FieldCreatedAt},
			apexcustomer.FieldModifiedAt:    {Type: field.TypeTime, Column: apexcustomer.FieldModifiedAt},
			apexcustomer.FieldDeletedAt:     {Type: field.TypeTime, Column: apexcustomer.FieldDeletedAt},
			apexcustomer.FieldEventRaisedAt: {Type: field.TypeTime, Column: apexcustomer.FieldEventRaisedAt},
			apexcustomer.FieldName:          {Type: field.TypeString, Column: apexcustomer.FieldName},
			apexcustomer.FieldGivenName:     {Type: field.TypeString, Column: apexcustomer.FieldGivenName},
			apexcustomer.FieldMiddleName:    {Type: field.TypeString, Column: apexcustomer.FieldMiddleName},
			apexcustomer.FieldFamilyName:    {Type: field.TypeString, Column: apexcustomer.FieldFamilyName},
			apexcustomer.FieldPhotoURL:      {Type: field.TypeString, Column: apexcustomer.FieldPhotoURL},
			apexcustomer.FieldPhotoURL24:    {Type: field.TypeString, Column: apexcustomer.FieldPhotoURL24},
			apexcustomer.FieldPhotoURL32:    {Type: field.TypeString, Column: apexcustomer.FieldPhotoURL32},
			apexcustomer.FieldPhotoURL48:    {Type: field.TypeString, Column: apexcustomer.FieldPhotoURL48},
			apexcustomer.FieldPhotoURL72:    {Type: field.TypeString, Column: apexcustomer.FieldPhotoURL72},
			apexcustomer.FieldPhotoURL192:   {Type: field.TypeString, Column: apexcustomer.FieldPhotoURL192},
			apexcustomer.FieldPhotoURL512:   {Type: field.TypeString, Column: apexcustomer.FieldPhotoURL512},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apexcustomeridentity.Table,
			Columns: apexcustomeridentity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: apexcustomeridentity.FieldID,
			},
		},
		Type: "ApexCustomerIdentity",
		Fields: map[string]*sqlgraph.FieldSpec{
			apexcustomeridentity.FieldCreatedAt:     {Type: field.TypeTime, Column: apexcustomeridentity.FieldCreatedAt},
			apexcustomeridentity.FieldModifiedAt:    {Type: field.TypeTime, Column: apexcustomeridentity.FieldModifiedAt},
			apexcustomeridentity.FieldDeletedAt:     {Type: field.TypeTime, Column: apexcustomeridentity.FieldDeletedAt},
			apexcustomeridentity.FieldEmail:         {Type: field.TypeString, Column: apexcustomeridentity.FieldEmail},
			apexcustomeridentity.FieldEmailVerified: {Type: field.TypeBool, Column: apexcustomeridentity.FieldEmailVerified},
		},
	}
	graph.MustAddE(
		"identities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apexcustomer.IdentitiesTable,
			Columns: []string{apexcustomer.IdentitiesColumn},
			Bidi:    false,
		},
		"ApexCustomer",
		"ApexCustomerIdentity",
	)
	graph.MustAddE(
		"customer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apexcustomeridentity.CustomerTable,
			Columns: []string{apexcustomeridentity.CustomerColumn},
			Bidi:    false,
		},
		"ApexCustomerIdentity",
		"ApexCustomer",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (acq *ApexCustomerQuery) addPredicate(pred func(s *sql.Selector)) {
	acq.predicates = append(acq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ApexCustomerQuery builder.
func (acq *ApexCustomerQuery) Filter() *ApexCustomerFilter {
	return &ApexCustomerFilter{config: acq.config, predicateAdder: acq}
}

// addPredicate implements the predicateAdder interface.
func (m *ApexCustomerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ApexCustomerMutation builder.
func (m *ApexCustomerMutation) Filter() *ApexCustomerFilter {
	return &ApexCustomerFilter{config: m.config, predicateAdder: m}
}

// ApexCustomerFilter provides a generic filtering capability at runtime for ApexCustomerQuery.
type ApexCustomerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ApexCustomerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ApexCustomerFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ApexCustomerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(apexcustomer.FieldCreatedAt))
}

// WhereModifiedAt applies the entql time.Time predicate on the modified_at field.
func (f *ApexCustomerFilter) WhereModifiedAt(p entql.TimeP) {
	f.Where(p.Field(apexcustomer.FieldModifiedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ApexCustomerFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(apexcustomer.FieldDeletedAt))
}

// WhereEventRaisedAt applies the entql time.Time predicate on the event_raised_at field.
func (f *ApexCustomerFilter) WhereEventRaisedAt(p entql.TimeP) {
	f.Where(p.Field(apexcustomer.FieldEventRaisedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *ApexCustomerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldName))
}

// WhereGivenName applies the entql string predicate on the given_name field.
func (f *ApexCustomerFilter) WhereGivenName(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldGivenName))
}

// WhereMiddleName applies the entql string predicate on the middle_name field.
func (f *ApexCustomerFilter) WhereMiddleName(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldMiddleName))
}

// WhereFamilyName applies the entql string predicate on the family_name field.
func (f *ApexCustomerFilter) WhereFamilyName(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldFamilyName))
}

// WherePhotoURL applies the entql string predicate on the photo_url field.
func (f *ApexCustomerFilter) WherePhotoURL(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldPhotoURL))
}

// WherePhotoURL24 applies the entql string predicate on the photo_url_24 field.
func (f *ApexCustomerFilter) WherePhotoURL24(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldPhotoURL24))
}

// WherePhotoURL32 applies the entql string predicate on the photo_url_32 field.
func (f *ApexCustomerFilter) WherePhotoURL32(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldPhotoURL32))
}

// WherePhotoURL48 applies the entql string predicate on the photo_url_48 field.
func (f *ApexCustomerFilter) WherePhotoURL48(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldPhotoURL48))
}

// WherePhotoURL72 applies the entql string predicate on the photo_url_72 field.
func (f *ApexCustomerFilter) WherePhotoURL72(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldPhotoURL72))
}

// WherePhotoURL192 applies the entql string predicate on the photo_url_192 field.
func (f *ApexCustomerFilter) WherePhotoURL192(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldPhotoURL192))
}

// WherePhotoURL512 applies the entql string predicate on the photo_url_512 field.
func (f *ApexCustomerFilter) WherePhotoURL512(p entql.StringP) {
	f.Where(p.Field(apexcustomer.FieldPhotoURL512))
}

// WhereHasIdentities applies a predicate to check if query has an edge identities.
func (f *ApexCustomerFilter) WhereHasIdentities() {
	f.Where(entql.HasEdge("identities"))
}

// WhereHasIdentitiesWith applies a predicate to check if query has an edge identities with a given conditions (other predicates).
func (f *ApexCustomerFilter) WhereHasIdentitiesWith(preds ...predicate.ApexCustomerIdentity) {
	f.Where(entql.HasEdgeWith("identities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aciq *ApexCustomerIdentityQuery) addPredicate(pred func(s *sql.Selector)) {
	aciq.predicates = append(aciq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ApexCustomerIdentityQuery builder.
func (aciq *ApexCustomerIdentityQuery) Filter() *ApexCustomerIdentityFilter {
	return &ApexCustomerIdentityFilter{config: aciq.config, predicateAdder: aciq}
}

// addPredicate implements the predicateAdder interface.
func (m *ApexCustomerIdentityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ApexCustomerIdentityMutation builder.
func (m *ApexCustomerIdentityMutation) Filter() *ApexCustomerIdentityFilter {
	return &ApexCustomerIdentityFilter{config: m.config, predicateAdder: m}
}

// ApexCustomerIdentityFilter provides a generic filtering capability at runtime for ApexCustomerIdentityQuery.
type ApexCustomerIdentityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ApexCustomerIdentityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ApexCustomerIdentityFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(apexcustomeridentity.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ApexCustomerIdentityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(apexcustomeridentity.FieldCreatedAt))
}

// WhereModifiedAt applies the entql time.Time predicate on the modified_at field.
func (f *ApexCustomerIdentityFilter) WhereModifiedAt(p entql.TimeP) {
	f.Where(p.Field(apexcustomeridentity.FieldModifiedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ApexCustomerIdentityFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(apexcustomeridentity.FieldDeletedAt))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *ApexCustomerIdentityFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(apexcustomeridentity.FieldEmail))
}

// WhereEmailVerified applies the entql bool predicate on the email_verified field.
func (f *ApexCustomerIdentityFilter) WhereEmailVerified(p entql.BoolP) {
	f.Where(p.Field(apexcustomeridentity.FieldEmailVerified))
}

// WhereHasCustomer applies a predicate to check if query has an edge customer.
func (f *ApexCustomerIdentityFilter) WhereHasCustomer() {
	f.Where(entql.HasEdge("customer"))
}

// WhereHasCustomerWith applies a predicate to check if query has an edge customer with a given conditions (other predicates).
func (f *ApexCustomerIdentityFilter) WhereHasCustomerWith(preds ...predicate.ApexCustomer) {
	f.Where(entql.HasEdgeWith("customer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
