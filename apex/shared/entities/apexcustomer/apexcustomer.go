// Code generated by ent, DO NOT EDIT.

package apexcustomer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the apexcustomer type in the database.
	Label = "apex_customer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEventRaisedAt holds the string denoting the event_raised_at field in the database.
	FieldEventRaisedAt = "event_raised_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldGivenName holds the string denoting the given_name field in the database.
	FieldGivenName = "given_name"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldFamilyName holds the string denoting the family_name field in the database.
	FieldFamilyName = "family_name"
	// FieldPhotoURL holds the string denoting the photo_url field in the database.
	FieldPhotoURL = "photo_url"
	// FieldPhotoURL24 holds the string denoting the photo_url_24 field in the database.
	FieldPhotoURL24 = "photo_url_24"
	// FieldPhotoURL32 holds the string denoting the photo_url_32 field in the database.
	FieldPhotoURL32 = "photo_url_32"
	// FieldPhotoURL48 holds the string denoting the photo_url_48 field in the database.
	FieldPhotoURL48 = "photo_url_48"
	// FieldPhotoURL72 holds the string denoting the photo_url_72 field in the database.
	FieldPhotoURL72 = "photo_url_72"
	// FieldPhotoURL192 holds the string denoting the photo_url_192 field in the database.
	FieldPhotoURL192 = "photo_url_192"
	// FieldPhotoURL512 holds the string denoting the photo_url_512 field in the database.
	FieldPhotoURL512 = "photo_url_512"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldModifiedAt holds the string denoting the modified_at field in the database.
	FieldModifiedAt = "modified_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeIdentities holds the string denoting the identities edge name in mutations.
	EdgeIdentities = "identities"
	// Table holds the table name of the apexcustomer in the database.
	Table = "apex_customers"
	// IdentitiesTable is the table that holds the identities relation/edge.
	IdentitiesTable = "apex_customer_identities"
	// IdentitiesInverseTable is the table name for the ApexCustomerIdentity entity.
	// It exists in this package in order to avoid circular dependency with the "apexcustomeridentity" package.
	IdentitiesInverseTable = "apex_customer_identities"
	// IdentitiesColumn is the table column denoting the identities relation/edge.
	IdentitiesColumn = "apex_customer_identities"
)

// Columns holds all SQL columns for apexcustomer fields.
var Columns = []string{
	FieldID,
	FieldEventRaisedAt,
	FieldName,
	FieldGivenName,
	FieldMiddleName,
	FieldFamilyName,
	FieldPhotoURL,
	FieldPhotoURL24,
	FieldPhotoURL32,
	FieldPhotoURL48,
	FieldPhotoURL72,
	FieldPhotoURL192,
	FieldPhotoURL512,
	FieldCreatedAt,
	FieldModifiedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ApexCustomer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventRaisedAt orders the results by the event_raised_at field.
func ByEventRaisedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventRaisedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByGivenName orders the results by the given_name field.
func ByGivenName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGivenName, opts...).ToFunc()
}

// ByMiddleName orders the results by the middle_name field.
func ByMiddleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMiddleName, opts...).ToFunc()
}

// ByFamilyName orders the results by the family_name field.
func ByFamilyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFamilyName, opts...).ToFunc()
}

// ByPhotoURL orders the results by the photo_url field.
func ByPhotoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL, opts...).ToFunc()
}

// ByPhotoURL24 orders the results by the photo_url_24 field.
func ByPhotoURL24(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL24, opts...).ToFunc()
}

// ByPhotoURL32 orders the results by the photo_url_32 field.
func ByPhotoURL32(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL32, opts...).ToFunc()
}

// ByPhotoURL48 orders the results by the photo_url_48 field.
func ByPhotoURL48(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL48, opts...).ToFunc()
}

// ByPhotoURL72 orders the results by the photo_url_72 field.
func ByPhotoURL72(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL72, opts...).ToFunc()
}

// ByPhotoURL192 orders the results by the photo_url_192 field.
func ByPhotoURL192(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL192, opts...).ToFunc()
}

// ByPhotoURL512 orders the results by the photo_url_512 field.
func ByPhotoURL512(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL512, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByModifiedAt orders the results by the modified_at field.
func ByModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByIdentitiesCount orders the results by identities count.
func ByIdentitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIdentitiesStep(), opts...)
	}
}

// ByIdentities orders the results by identities terms.
func ByIdentities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdentitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIdentitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdentitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IdentitiesTable, IdentitiesColumn),
	)
}
