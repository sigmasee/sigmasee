// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomer"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomeridentity"
	"github.com/sigmasee/sigmasee/apex/shared/entities/predicate"

	"github.com/sigmasee/sigmasee/apex/shared/entities/internal"
)

// ApexCustomerUpdate is the builder for updating ApexCustomer entities.
type ApexCustomerUpdate struct {
	config
	hooks     []Hook
	mutation  *ApexCustomerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ApexCustomerUpdate builder.
func (acu *ApexCustomerUpdate) Where(ps ...predicate.ApexCustomer) *ApexCustomerUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetEventRaisedAt sets the "event_raised_at" field.
func (acu *ApexCustomerUpdate) SetEventRaisedAt(t time.Time) *ApexCustomerUpdate {
	acu.mutation.SetEventRaisedAt(t)
	return acu
}

// SetName sets the "name" field.
func (acu *ApexCustomerUpdate) SetName(s string) *ApexCustomerUpdate {
	acu.mutation.SetName(s)
	return acu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillableName(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetName(*s)
	}
	return acu
}

// ClearName clears the value of the "name" field.
func (acu *ApexCustomerUpdate) ClearName() *ApexCustomerUpdate {
	acu.mutation.ClearName()
	return acu
}

// SetGivenName sets the "given_name" field.
func (acu *ApexCustomerUpdate) SetGivenName(s string) *ApexCustomerUpdate {
	acu.mutation.SetGivenName(s)
	return acu
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillableGivenName(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetGivenName(*s)
	}
	return acu
}

// ClearGivenName clears the value of the "given_name" field.
func (acu *ApexCustomerUpdate) ClearGivenName() *ApexCustomerUpdate {
	acu.mutation.ClearGivenName()
	return acu
}

// SetMiddleName sets the "middle_name" field.
func (acu *ApexCustomerUpdate) SetMiddleName(s string) *ApexCustomerUpdate {
	acu.mutation.SetMiddleName(s)
	return acu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillableMiddleName(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetMiddleName(*s)
	}
	return acu
}

// ClearMiddleName clears the value of the "middle_name" field.
func (acu *ApexCustomerUpdate) ClearMiddleName() *ApexCustomerUpdate {
	acu.mutation.ClearMiddleName()
	return acu
}

// SetFamilyName sets the "family_name" field.
func (acu *ApexCustomerUpdate) SetFamilyName(s string) *ApexCustomerUpdate {
	acu.mutation.SetFamilyName(s)
	return acu
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillableFamilyName(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetFamilyName(*s)
	}
	return acu
}

// ClearFamilyName clears the value of the "family_name" field.
func (acu *ApexCustomerUpdate) ClearFamilyName() *ApexCustomerUpdate {
	acu.mutation.ClearFamilyName()
	return acu
}

// SetPhotoURL sets the "photo_url" field.
func (acu *ApexCustomerUpdate) SetPhotoURL(s string) *ApexCustomerUpdate {
	acu.mutation.SetPhotoURL(s)
	return acu
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillablePhotoURL(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetPhotoURL(*s)
	}
	return acu
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (acu *ApexCustomerUpdate) ClearPhotoURL() *ApexCustomerUpdate {
	acu.mutation.ClearPhotoURL()
	return acu
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (acu *ApexCustomerUpdate) SetPhotoURL24(s string) *ApexCustomerUpdate {
	acu.mutation.SetPhotoURL24(s)
	return acu
}

// SetNillablePhotoURL24 sets the "photo_url_24" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillablePhotoURL24(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetPhotoURL24(*s)
	}
	return acu
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (acu *ApexCustomerUpdate) ClearPhotoURL24() *ApexCustomerUpdate {
	acu.mutation.ClearPhotoURL24()
	return acu
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (acu *ApexCustomerUpdate) SetPhotoURL32(s string) *ApexCustomerUpdate {
	acu.mutation.SetPhotoURL32(s)
	return acu
}

// SetNillablePhotoURL32 sets the "photo_url_32" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillablePhotoURL32(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetPhotoURL32(*s)
	}
	return acu
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (acu *ApexCustomerUpdate) ClearPhotoURL32() *ApexCustomerUpdate {
	acu.mutation.ClearPhotoURL32()
	return acu
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (acu *ApexCustomerUpdate) SetPhotoURL48(s string) *ApexCustomerUpdate {
	acu.mutation.SetPhotoURL48(s)
	return acu
}

// SetNillablePhotoURL48 sets the "photo_url_48" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillablePhotoURL48(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetPhotoURL48(*s)
	}
	return acu
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (acu *ApexCustomerUpdate) ClearPhotoURL48() *ApexCustomerUpdate {
	acu.mutation.ClearPhotoURL48()
	return acu
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (acu *ApexCustomerUpdate) SetPhotoURL72(s string) *ApexCustomerUpdate {
	acu.mutation.SetPhotoURL72(s)
	return acu
}

// SetNillablePhotoURL72 sets the "photo_url_72" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillablePhotoURL72(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetPhotoURL72(*s)
	}
	return acu
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (acu *ApexCustomerUpdate) ClearPhotoURL72() *ApexCustomerUpdate {
	acu.mutation.ClearPhotoURL72()
	return acu
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (acu *ApexCustomerUpdate) SetPhotoURL192(s string) *ApexCustomerUpdate {
	acu.mutation.SetPhotoURL192(s)
	return acu
}

// SetNillablePhotoURL192 sets the "photo_url_192" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillablePhotoURL192(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetPhotoURL192(*s)
	}
	return acu
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (acu *ApexCustomerUpdate) ClearPhotoURL192() *ApexCustomerUpdate {
	acu.mutation.ClearPhotoURL192()
	return acu
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (acu *ApexCustomerUpdate) SetPhotoURL512(s string) *ApexCustomerUpdate {
	acu.mutation.SetPhotoURL512(s)
	return acu
}

// SetNillablePhotoURL512 sets the "photo_url_512" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillablePhotoURL512(s *string) *ApexCustomerUpdate {
	if s != nil {
		acu.SetPhotoURL512(*s)
	}
	return acu
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (acu *ApexCustomerUpdate) ClearPhotoURL512() *ApexCustomerUpdate {
	acu.mutation.ClearPhotoURL512()
	return acu
}

// SetCreatedAt sets the "created_at" field.
func (acu *ApexCustomerUpdate) SetCreatedAt(t time.Time) *ApexCustomerUpdate {
	acu.mutation.SetCreatedAt(t)
	return acu
}

// SetModifiedAt sets the "modified_at" field.
func (acu *ApexCustomerUpdate) SetModifiedAt(t time.Time) *ApexCustomerUpdate {
	acu.mutation.SetModifiedAt(t)
	return acu
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillableModifiedAt(t *time.Time) *ApexCustomerUpdate {
	if t != nil {
		acu.SetModifiedAt(*t)
	}
	return acu
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (acu *ApexCustomerUpdate) ClearModifiedAt() *ApexCustomerUpdate {
	acu.mutation.ClearModifiedAt()
	return acu
}

// SetDeletedAt sets the "deleted_at" field.
func (acu *ApexCustomerUpdate) SetDeletedAt(t time.Time) *ApexCustomerUpdate {
	acu.mutation.SetDeletedAt(t)
	return acu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acu *ApexCustomerUpdate) SetNillableDeletedAt(t *time.Time) *ApexCustomerUpdate {
	if t != nil {
		acu.SetDeletedAt(*t)
	}
	return acu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (acu *ApexCustomerUpdate) ClearDeletedAt() *ApexCustomerUpdate {
	acu.mutation.ClearDeletedAt()
	return acu
}

// AddIdentityIDs adds the "identities" edge to the ApexCustomerIdentity entity by IDs.
func (acu *ApexCustomerUpdate) AddIdentityIDs(ids ...string) *ApexCustomerUpdate {
	acu.mutation.AddIdentityIDs(ids...)
	return acu
}

// AddIdentities adds the "identities" edges to the ApexCustomerIdentity entity.
func (acu *ApexCustomerUpdate) AddIdentities(a ...*ApexCustomerIdentity) *ApexCustomerUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.AddIdentityIDs(ids...)
}

// Mutation returns the ApexCustomerMutation object of the builder.
func (acu *ApexCustomerUpdate) Mutation() *ApexCustomerMutation {
	return acu.mutation
}

// ClearIdentities clears all "identities" edges to the ApexCustomerIdentity entity.
func (acu *ApexCustomerUpdate) ClearIdentities() *ApexCustomerUpdate {
	acu.mutation.ClearIdentities()
	return acu
}

// RemoveIdentityIDs removes the "identities" edge to ApexCustomerIdentity entities by IDs.
func (acu *ApexCustomerUpdate) RemoveIdentityIDs(ids ...string) *ApexCustomerUpdate {
	acu.mutation.RemoveIdentityIDs(ids...)
	return acu
}

// RemoveIdentities removes "identities" edges to ApexCustomerIdentity entities.
func (acu *ApexCustomerUpdate) RemoveIdentities(a ...*ApexCustomerIdentity) *ApexCustomerUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.RemoveIdentityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *ApexCustomerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *ApexCustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *ApexCustomerUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *ApexCustomerUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acu *ApexCustomerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApexCustomerUpdate {
	acu.modifiers = append(acu.modifiers, modifiers...)
	return acu
}

func (acu *ApexCustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(apexcustomer.Table, apexcustomer.Columns, sqlgraph.NewFieldSpec(apexcustomer.FieldID, field.TypeString))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.EventRaisedAt(); ok {
		_spec.SetField(apexcustomer.FieldEventRaisedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.Name(); ok {
		_spec.SetField(apexcustomer.FieldName, field.TypeString, value)
	}
	if acu.mutation.NameCleared() {
		_spec.ClearField(apexcustomer.FieldName, field.TypeString)
	}
	if value, ok := acu.mutation.GivenName(); ok {
		_spec.SetField(apexcustomer.FieldGivenName, field.TypeString, value)
	}
	if acu.mutation.GivenNameCleared() {
		_spec.ClearField(apexcustomer.FieldGivenName, field.TypeString)
	}
	if value, ok := acu.mutation.MiddleName(); ok {
		_spec.SetField(apexcustomer.FieldMiddleName, field.TypeString, value)
	}
	if acu.mutation.MiddleNameCleared() {
		_spec.ClearField(apexcustomer.FieldMiddleName, field.TypeString)
	}
	if value, ok := acu.mutation.FamilyName(); ok {
		_spec.SetField(apexcustomer.FieldFamilyName, field.TypeString, value)
	}
	if acu.mutation.FamilyNameCleared() {
		_spec.ClearField(apexcustomer.FieldFamilyName, field.TypeString)
	}
	if value, ok := acu.mutation.PhotoURL(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL, field.TypeString, value)
	}
	if acu.mutation.PhotoURLCleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL, field.TypeString)
	}
	if value, ok := acu.mutation.PhotoURL24(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL24, field.TypeString, value)
	}
	if acu.mutation.PhotoURL24Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL24, field.TypeString)
	}
	if value, ok := acu.mutation.PhotoURL32(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL32, field.TypeString, value)
	}
	if acu.mutation.PhotoURL32Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL32, field.TypeString)
	}
	if value, ok := acu.mutation.PhotoURL48(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL48, field.TypeString, value)
	}
	if acu.mutation.PhotoURL48Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL48, field.TypeString)
	}
	if value, ok := acu.mutation.PhotoURL72(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL72, field.TypeString, value)
	}
	if acu.mutation.PhotoURL72Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL72, field.TypeString)
	}
	if value, ok := acu.mutation.PhotoURL192(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL192, field.TypeString, value)
	}
	if acu.mutation.PhotoURL192Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL192, field.TypeString)
	}
	if value, ok := acu.mutation.PhotoURL512(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL512, field.TypeString, value)
	}
	if acu.mutation.PhotoURL512Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL512, field.TypeString)
	}
	if value, ok := acu.mutation.CreatedAt(); ok {
		_spec.SetField(apexcustomer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.ModifiedAt(); ok {
		_spec.SetField(apexcustomer.FieldModifiedAt, field.TypeTime, value)
	}
	if acu.mutation.ModifiedAtCleared() {
		_spec.ClearField(apexcustomer.FieldModifiedAt, field.TypeTime)
	}
	if value, ok := acu.mutation.DeletedAt(); ok {
		_spec.SetField(apexcustomer.FieldDeletedAt, field.TypeTime, value)
	}
	if acu.mutation.DeletedAtCleared() {
		_spec.ClearField(apexcustomer.FieldDeletedAt, field.TypeTime)
	}
	if acu.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apexcustomer.IdentitiesTable,
			Columns: []string{apexcustomer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apexcustomeridentity.FieldID, field.TypeString),
			},
		}
		edge.Schema = acu.schemaConfig.ApexCustomerIdentity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedIdentitiesIDs(); len(nodes) > 0 && !acu.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apexcustomer.IdentitiesTable,
			Columns: []string{apexcustomer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apexcustomeridentity.FieldID, field.TypeString),
			},
		}
		edge.Schema = acu.schemaConfig.ApexCustomerIdentity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apexcustomer.IdentitiesTable,
			Columns: []string{apexcustomer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apexcustomeridentity.FieldID, field.TypeString),
			},
		}
		edge.Schema = acu.schemaConfig.ApexCustomerIdentity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = acu.schemaConfig.ApexCustomer
	ctx = internal.NewSchemaConfigContext(ctx, acu.schemaConfig)
	_spec.AddModifiers(acu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apexcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// ApexCustomerUpdateOne is the builder for updating a single ApexCustomer entity.
type ApexCustomerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ApexCustomerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEventRaisedAt sets the "event_raised_at" field.
func (acuo *ApexCustomerUpdateOne) SetEventRaisedAt(t time.Time) *ApexCustomerUpdateOne {
	acuo.mutation.SetEventRaisedAt(t)
	return acuo
}

// SetName sets the "name" field.
func (acuo *ApexCustomerUpdateOne) SetName(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetName(s)
	return acuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillableName(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetName(*s)
	}
	return acuo
}

// ClearName clears the value of the "name" field.
func (acuo *ApexCustomerUpdateOne) ClearName() *ApexCustomerUpdateOne {
	acuo.mutation.ClearName()
	return acuo
}

// SetGivenName sets the "given_name" field.
func (acuo *ApexCustomerUpdateOne) SetGivenName(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetGivenName(s)
	return acuo
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillableGivenName(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetGivenName(*s)
	}
	return acuo
}

// ClearGivenName clears the value of the "given_name" field.
func (acuo *ApexCustomerUpdateOne) ClearGivenName() *ApexCustomerUpdateOne {
	acuo.mutation.ClearGivenName()
	return acuo
}

// SetMiddleName sets the "middle_name" field.
func (acuo *ApexCustomerUpdateOne) SetMiddleName(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetMiddleName(s)
	return acuo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillableMiddleName(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetMiddleName(*s)
	}
	return acuo
}

// ClearMiddleName clears the value of the "middle_name" field.
func (acuo *ApexCustomerUpdateOne) ClearMiddleName() *ApexCustomerUpdateOne {
	acuo.mutation.ClearMiddleName()
	return acuo
}

// SetFamilyName sets the "family_name" field.
func (acuo *ApexCustomerUpdateOne) SetFamilyName(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetFamilyName(s)
	return acuo
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillableFamilyName(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetFamilyName(*s)
	}
	return acuo
}

// ClearFamilyName clears the value of the "family_name" field.
func (acuo *ApexCustomerUpdateOne) ClearFamilyName() *ApexCustomerUpdateOne {
	acuo.mutation.ClearFamilyName()
	return acuo
}

// SetPhotoURL sets the "photo_url" field.
func (acuo *ApexCustomerUpdateOne) SetPhotoURL(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetPhotoURL(s)
	return acuo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillablePhotoURL(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetPhotoURL(*s)
	}
	return acuo
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (acuo *ApexCustomerUpdateOne) ClearPhotoURL() *ApexCustomerUpdateOne {
	acuo.mutation.ClearPhotoURL()
	return acuo
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (acuo *ApexCustomerUpdateOne) SetPhotoURL24(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetPhotoURL24(s)
	return acuo
}

// SetNillablePhotoURL24 sets the "photo_url_24" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillablePhotoURL24(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetPhotoURL24(*s)
	}
	return acuo
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (acuo *ApexCustomerUpdateOne) ClearPhotoURL24() *ApexCustomerUpdateOne {
	acuo.mutation.ClearPhotoURL24()
	return acuo
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (acuo *ApexCustomerUpdateOne) SetPhotoURL32(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetPhotoURL32(s)
	return acuo
}

// SetNillablePhotoURL32 sets the "photo_url_32" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillablePhotoURL32(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetPhotoURL32(*s)
	}
	return acuo
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (acuo *ApexCustomerUpdateOne) ClearPhotoURL32() *ApexCustomerUpdateOne {
	acuo.mutation.ClearPhotoURL32()
	return acuo
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (acuo *ApexCustomerUpdateOne) SetPhotoURL48(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetPhotoURL48(s)
	return acuo
}

// SetNillablePhotoURL48 sets the "photo_url_48" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillablePhotoURL48(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetPhotoURL48(*s)
	}
	return acuo
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (acuo *ApexCustomerUpdateOne) ClearPhotoURL48() *ApexCustomerUpdateOne {
	acuo.mutation.ClearPhotoURL48()
	return acuo
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (acuo *ApexCustomerUpdateOne) SetPhotoURL72(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetPhotoURL72(s)
	return acuo
}

// SetNillablePhotoURL72 sets the "photo_url_72" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillablePhotoURL72(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetPhotoURL72(*s)
	}
	return acuo
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (acuo *ApexCustomerUpdateOne) ClearPhotoURL72() *ApexCustomerUpdateOne {
	acuo.mutation.ClearPhotoURL72()
	return acuo
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (acuo *ApexCustomerUpdateOne) SetPhotoURL192(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetPhotoURL192(s)
	return acuo
}

// SetNillablePhotoURL192 sets the "photo_url_192" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillablePhotoURL192(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetPhotoURL192(*s)
	}
	return acuo
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (acuo *ApexCustomerUpdateOne) ClearPhotoURL192() *ApexCustomerUpdateOne {
	acuo.mutation.ClearPhotoURL192()
	return acuo
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (acuo *ApexCustomerUpdateOne) SetPhotoURL512(s string) *ApexCustomerUpdateOne {
	acuo.mutation.SetPhotoURL512(s)
	return acuo
}

// SetNillablePhotoURL512 sets the "photo_url_512" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillablePhotoURL512(s *string) *ApexCustomerUpdateOne {
	if s != nil {
		acuo.SetPhotoURL512(*s)
	}
	return acuo
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (acuo *ApexCustomerUpdateOne) ClearPhotoURL512() *ApexCustomerUpdateOne {
	acuo.mutation.ClearPhotoURL512()
	return acuo
}

// SetCreatedAt sets the "created_at" field.
func (acuo *ApexCustomerUpdateOne) SetCreatedAt(t time.Time) *ApexCustomerUpdateOne {
	acuo.mutation.SetCreatedAt(t)
	return acuo
}

// SetModifiedAt sets the "modified_at" field.
func (acuo *ApexCustomerUpdateOne) SetModifiedAt(t time.Time) *ApexCustomerUpdateOne {
	acuo.mutation.SetModifiedAt(t)
	return acuo
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillableModifiedAt(t *time.Time) *ApexCustomerUpdateOne {
	if t != nil {
		acuo.SetModifiedAt(*t)
	}
	return acuo
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (acuo *ApexCustomerUpdateOne) ClearModifiedAt() *ApexCustomerUpdateOne {
	acuo.mutation.ClearModifiedAt()
	return acuo
}

// SetDeletedAt sets the "deleted_at" field.
func (acuo *ApexCustomerUpdateOne) SetDeletedAt(t time.Time) *ApexCustomerUpdateOne {
	acuo.mutation.SetDeletedAt(t)
	return acuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acuo *ApexCustomerUpdateOne) SetNillableDeletedAt(t *time.Time) *ApexCustomerUpdateOne {
	if t != nil {
		acuo.SetDeletedAt(*t)
	}
	return acuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (acuo *ApexCustomerUpdateOne) ClearDeletedAt() *ApexCustomerUpdateOne {
	acuo.mutation.ClearDeletedAt()
	return acuo
}

// AddIdentityIDs adds the "identities" edge to the ApexCustomerIdentity entity by IDs.
func (acuo *ApexCustomerUpdateOne) AddIdentityIDs(ids ...string) *ApexCustomerUpdateOne {
	acuo.mutation.AddIdentityIDs(ids...)
	return acuo
}

// AddIdentities adds the "identities" edges to the ApexCustomerIdentity entity.
func (acuo *ApexCustomerUpdateOne) AddIdentities(a ...*ApexCustomerIdentity) *ApexCustomerUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.AddIdentityIDs(ids...)
}

// Mutation returns the ApexCustomerMutation object of the builder.
func (acuo *ApexCustomerUpdateOne) Mutation() *ApexCustomerMutation {
	return acuo.mutation
}

// ClearIdentities clears all "identities" edges to the ApexCustomerIdentity entity.
func (acuo *ApexCustomerUpdateOne) ClearIdentities() *ApexCustomerUpdateOne {
	acuo.mutation.ClearIdentities()
	return acuo
}

// RemoveIdentityIDs removes the "identities" edge to ApexCustomerIdentity entities by IDs.
func (acuo *ApexCustomerUpdateOne) RemoveIdentityIDs(ids ...string) *ApexCustomerUpdateOne {
	acuo.mutation.RemoveIdentityIDs(ids...)
	return acuo
}

// RemoveIdentities removes "identities" edges to ApexCustomerIdentity entities.
func (acuo *ApexCustomerUpdateOne) RemoveIdentities(a ...*ApexCustomerIdentity) *ApexCustomerUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.RemoveIdentityIDs(ids...)
}

// Where appends a list predicates to the ApexCustomerUpdate builder.
func (acuo *ApexCustomerUpdateOne) Where(ps ...predicate.ApexCustomer) *ApexCustomerUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *ApexCustomerUpdateOne) Select(field string, fields ...string) *ApexCustomerUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated ApexCustomer entity.
func (acuo *ApexCustomerUpdateOne) Save(ctx context.Context) (*ApexCustomer, error) {
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *ApexCustomerUpdateOne) SaveX(ctx context.Context) *ApexCustomer {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *ApexCustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *ApexCustomerUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acuo *ApexCustomerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApexCustomerUpdateOne {
	acuo.modifiers = append(acuo.modifiers, modifiers...)
	return acuo
}

func (acuo *ApexCustomerUpdateOne) sqlSave(ctx context.Context) (_node *ApexCustomer, err error) {
	_spec := sqlgraph.NewUpdateSpec(apexcustomer.Table, apexcustomer.Columns, sqlgraph.NewFieldSpec(apexcustomer.FieldID, field.TypeString))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "ApexCustomer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apexcustomer.FieldID)
		for _, f := range fields {
			if !apexcustomer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != apexcustomer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.EventRaisedAt(); ok {
		_spec.SetField(apexcustomer.FieldEventRaisedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.Name(); ok {
		_spec.SetField(apexcustomer.FieldName, field.TypeString, value)
	}
	if acuo.mutation.NameCleared() {
		_spec.ClearField(apexcustomer.FieldName, field.TypeString)
	}
	if value, ok := acuo.mutation.GivenName(); ok {
		_spec.SetField(apexcustomer.FieldGivenName, field.TypeString, value)
	}
	if acuo.mutation.GivenNameCleared() {
		_spec.ClearField(apexcustomer.FieldGivenName, field.TypeString)
	}
	if value, ok := acuo.mutation.MiddleName(); ok {
		_spec.SetField(apexcustomer.FieldMiddleName, field.TypeString, value)
	}
	if acuo.mutation.MiddleNameCleared() {
		_spec.ClearField(apexcustomer.FieldMiddleName, field.TypeString)
	}
	if value, ok := acuo.mutation.FamilyName(); ok {
		_spec.SetField(apexcustomer.FieldFamilyName, field.TypeString, value)
	}
	if acuo.mutation.FamilyNameCleared() {
		_spec.ClearField(apexcustomer.FieldFamilyName, field.TypeString)
	}
	if value, ok := acuo.mutation.PhotoURL(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL, field.TypeString, value)
	}
	if acuo.mutation.PhotoURLCleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL, field.TypeString)
	}
	if value, ok := acuo.mutation.PhotoURL24(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL24, field.TypeString, value)
	}
	if acuo.mutation.PhotoURL24Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL24, field.TypeString)
	}
	if value, ok := acuo.mutation.PhotoURL32(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL32, field.TypeString, value)
	}
	if acuo.mutation.PhotoURL32Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL32, field.TypeString)
	}
	if value, ok := acuo.mutation.PhotoURL48(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL48, field.TypeString, value)
	}
	if acuo.mutation.PhotoURL48Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL48, field.TypeString)
	}
	if value, ok := acuo.mutation.PhotoURL72(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL72, field.TypeString, value)
	}
	if acuo.mutation.PhotoURL72Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL72, field.TypeString)
	}
	if value, ok := acuo.mutation.PhotoURL192(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL192, field.TypeString, value)
	}
	if acuo.mutation.PhotoURL192Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL192, field.TypeString)
	}
	if value, ok := acuo.mutation.PhotoURL512(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL512, field.TypeString, value)
	}
	if acuo.mutation.PhotoURL512Cleared() {
		_spec.ClearField(apexcustomer.FieldPhotoURL512, field.TypeString)
	}
	if value, ok := acuo.mutation.CreatedAt(); ok {
		_spec.SetField(apexcustomer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.ModifiedAt(); ok {
		_spec.SetField(apexcustomer.FieldModifiedAt, field.TypeTime, value)
	}
	if acuo.mutation.ModifiedAtCleared() {
		_spec.ClearField(apexcustomer.FieldModifiedAt, field.TypeTime)
	}
	if value, ok := acuo.mutation.DeletedAt(); ok {
		_spec.SetField(apexcustomer.FieldDeletedAt, field.TypeTime, value)
	}
	if acuo.mutation.DeletedAtCleared() {
		_spec.ClearField(apexcustomer.FieldDeletedAt, field.TypeTime)
	}
	if acuo.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apexcustomer.IdentitiesTable,
			Columns: []string{apexcustomer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apexcustomeridentity.FieldID, field.TypeString),
			},
		}
		edge.Schema = acuo.schemaConfig.ApexCustomerIdentity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedIdentitiesIDs(); len(nodes) > 0 && !acuo.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apexcustomer.IdentitiesTable,
			Columns: []string{apexcustomer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apexcustomeridentity.FieldID, field.TypeString),
			},
		}
		edge.Schema = acuo.schemaConfig.ApexCustomerIdentity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apexcustomer.IdentitiesTable,
			Columns: []string{apexcustomer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apexcustomeridentity.FieldID, field.TypeString),
			},
		}
		edge.Schema = acuo.schemaConfig.ApexCustomerIdentity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = acuo.schemaConfig.ApexCustomer
	ctx = internal.NewSchemaConfigContext(ctx, acuo.schemaConfig)
	_spec.AddModifiers(acuo.modifiers...)
	_node = &ApexCustomer{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apexcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
