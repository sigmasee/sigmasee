// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomer"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomeridentity"
	"github.com/sigmasee/sigmasee/apex/shared/entities/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApexCustomer         = "ApexCustomer"
	TypeApexCustomerIdentity = "ApexCustomerIdentity"
)

// ApexCustomerMutation represents an operation that mutates the ApexCustomer nodes in the graph.
type ApexCustomerMutation struct {
	config
	op                Op
	typ               string
	id                *string
	created_at        *time.Time
	modified_at       *time.Time
	deleted_at        *time.Time
	event_raised_at   *time.Time
	name              *string
	given_name        *string
	middle_name       *string
	family_name       *string
	photo_url         *string
	photo_url_24      *string
	photo_url_32      *string
	photo_url_48      *string
	photo_url_72      *string
	photo_url_192     *string
	photo_url_512     *string
	clearedFields     map[string]struct{}
	identities        map[string]struct{}
	removedidentities map[string]struct{}
	clearedidentities bool
	done              bool
	oldValue          func(context.Context) (*ApexCustomer, error)
	predicates        []predicate.ApexCustomer
}

var _ ent.Mutation = (*ApexCustomerMutation)(nil)

// apexcustomerOption allows management of the mutation configuration using functional options.
type apexcustomerOption func(*ApexCustomerMutation)

// newApexCustomerMutation creates new mutation for the ApexCustomer entity.
func newApexCustomerMutation(c config, op Op, opts ...apexcustomerOption) *ApexCustomerMutation {
	m := &ApexCustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeApexCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApexCustomerID sets the ID field of the mutation.
func withApexCustomerID(id string) apexcustomerOption {
	return func(m *ApexCustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *ApexCustomer
		)
		m.oldValue = func(ctx context.Context) (*ApexCustomer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApexCustomer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApexCustomer sets the old ApexCustomer of the mutation.
func withApexCustomer(node *ApexCustomer) apexcustomerOption {
	return func(m *ApexCustomerMutation) {
		m.oldValue = func(context.Context) (*ApexCustomer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApexCustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApexCustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ApexCustomer entities.
func (m *ApexCustomerMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApexCustomerMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApexCustomerMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApexCustomer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ApexCustomerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ApexCustomerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ApexCustomerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *ApexCustomerMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *ApexCustomerMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (m *ApexCustomerMutation) ClearModifiedAt() {
	m.modified_at = nil
	m.clearedFields[apexcustomer.FieldModifiedAt] = struct{}{}
}

// ModifiedAtCleared returns if the "modified_at" field was cleared in this mutation.
func (m *ApexCustomerMutation) ModifiedAtCleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldModifiedAt]
	return ok
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *ApexCustomerMutation) ResetModifiedAt() {
	m.modified_at = nil
	delete(m.clearedFields, apexcustomer.FieldModifiedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ApexCustomerMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ApexCustomerMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ApexCustomerMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[apexcustomer.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ApexCustomerMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ApexCustomerMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, apexcustomer.FieldDeletedAt)
}

// SetEventRaisedAt sets the "event_raised_at" field.
func (m *ApexCustomerMutation) SetEventRaisedAt(t time.Time) {
	m.event_raised_at = &t
}

// EventRaisedAt returns the value of the "event_raised_at" field in the mutation.
func (m *ApexCustomerMutation) EventRaisedAt() (r time.Time, exists bool) {
	v := m.event_raised_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEventRaisedAt returns the old "event_raised_at" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldEventRaisedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventRaisedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventRaisedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventRaisedAt: %w", err)
	}
	return oldValue.EventRaisedAt, nil
}

// ResetEventRaisedAt resets all changes to the "event_raised_at" field.
func (m *ApexCustomerMutation) ResetEventRaisedAt() {
	m.event_raised_at = nil
}

// SetName sets the "name" field.
func (m *ApexCustomerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ApexCustomerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ApexCustomerMutation) ClearName() {
	m.name = nil
	m.clearedFields[apexcustomer.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ApexCustomerMutation) NameCleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ApexCustomerMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, apexcustomer.FieldName)
}

// SetGivenName sets the "given_name" field.
func (m *ApexCustomerMutation) SetGivenName(s string) {
	m.given_name = &s
}

// GivenName returns the value of the "given_name" field in the mutation.
func (m *ApexCustomerMutation) GivenName() (r string, exists bool) {
	v := m.given_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGivenName returns the old "given_name" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldGivenName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGivenName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGivenName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGivenName: %w", err)
	}
	return oldValue.GivenName, nil
}

// ClearGivenName clears the value of the "given_name" field.
func (m *ApexCustomerMutation) ClearGivenName() {
	m.given_name = nil
	m.clearedFields[apexcustomer.FieldGivenName] = struct{}{}
}

// GivenNameCleared returns if the "given_name" field was cleared in this mutation.
func (m *ApexCustomerMutation) GivenNameCleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldGivenName]
	return ok
}

// ResetGivenName resets all changes to the "given_name" field.
func (m *ApexCustomerMutation) ResetGivenName() {
	m.given_name = nil
	delete(m.clearedFields, apexcustomer.FieldGivenName)
}

// SetMiddleName sets the "middle_name" field.
func (m *ApexCustomerMutation) SetMiddleName(s string) {
	m.middle_name = &s
}

// MiddleName returns the value of the "middle_name" field in the mutation.
func (m *ApexCustomerMutation) MiddleName() (r string, exists bool) {
	v := m.middle_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMiddleName returns the old "middle_name" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldMiddleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMiddleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMiddleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMiddleName: %w", err)
	}
	return oldValue.MiddleName, nil
}

// ClearMiddleName clears the value of the "middle_name" field.
func (m *ApexCustomerMutation) ClearMiddleName() {
	m.middle_name = nil
	m.clearedFields[apexcustomer.FieldMiddleName] = struct{}{}
}

// MiddleNameCleared returns if the "middle_name" field was cleared in this mutation.
func (m *ApexCustomerMutation) MiddleNameCleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldMiddleName]
	return ok
}

// ResetMiddleName resets all changes to the "middle_name" field.
func (m *ApexCustomerMutation) ResetMiddleName() {
	m.middle_name = nil
	delete(m.clearedFields, apexcustomer.FieldMiddleName)
}

// SetFamilyName sets the "family_name" field.
func (m *ApexCustomerMutation) SetFamilyName(s string) {
	m.family_name = &s
}

// FamilyName returns the value of the "family_name" field in the mutation.
func (m *ApexCustomerMutation) FamilyName() (r string, exists bool) {
	v := m.family_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFamilyName returns the old "family_name" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldFamilyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFamilyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFamilyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFamilyName: %w", err)
	}
	return oldValue.FamilyName, nil
}

// ClearFamilyName clears the value of the "family_name" field.
func (m *ApexCustomerMutation) ClearFamilyName() {
	m.family_name = nil
	m.clearedFields[apexcustomer.FieldFamilyName] = struct{}{}
}

// FamilyNameCleared returns if the "family_name" field was cleared in this mutation.
func (m *ApexCustomerMutation) FamilyNameCleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldFamilyName]
	return ok
}

// ResetFamilyName resets all changes to the "family_name" field.
func (m *ApexCustomerMutation) ResetFamilyName() {
	m.family_name = nil
	delete(m.clearedFields, apexcustomer.FieldFamilyName)
}

// SetPhotoURL sets the "photo_url" field.
func (m *ApexCustomerMutation) SetPhotoURL(s string) {
	m.photo_url = &s
}

// PhotoURL returns the value of the "photo_url" field in the mutation.
func (m *ApexCustomerMutation) PhotoURL() (r string, exists bool) {
	v := m.photo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL returns the old "photo_url" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldPhotoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL: %w", err)
	}
	return oldValue.PhotoURL, nil
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (m *ApexCustomerMutation) ClearPhotoURL() {
	m.photo_url = nil
	m.clearedFields[apexcustomer.FieldPhotoURL] = struct{}{}
}

// PhotoURLCleared returns if the "photo_url" field was cleared in this mutation.
func (m *ApexCustomerMutation) PhotoURLCleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldPhotoURL]
	return ok
}

// ResetPhotoURL resets all changes to the "photo_url" field.
func (m *ApexCustomerMutation) ResetPhotoURL() {
	m.photo_url = nil
	delete(m.clearedFields, apexcustomer.FieldPhotoURL)
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (m *ApexCustomerMutation) SetPhotoURL24(s string) {
	m.photo_url_24 = &s
}

// PhotoURL24 returns the value of the "photo_url_24" field in the mutation.
func (m *ApexCustomerMutation) PhotoURL24() (r string, exists bool) {
	v := m.photo_url_24
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL24 returns the old "photo_url_24" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldPhotoURL24(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL24 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL24 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL24: %w", err)
	}
	return oldValue.PhotoURL24, nil
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (m *ApexCustomerMutation) ClearPhotoURL24() {
	m.photo_url_24 = nil
	m.clearedFields[apexcustomer.FieldPhotoURL24] = struct{}{}
}

// PhotoURL24Cleared returns if the "photo_url_24" field was cleared in this mutation.
func (m *ApexCustomerMutation) PhotoURL24Cleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldPhotoURL24]
	return ok
}

// ResetPhotoURL24 resets all changes to the "photo_url_24" field.
func (m *ApexCustomerMutation) ResetPhotoURL24() {
	m.photo_url_24 = nil
	delete(m.clearedFields, apexcustomer.FieldPhotoURL24)
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (m *ApexCustomerMutation) SetPhotoURL32(s string) {
	m.photo_url_32 = &s
}

// PhotoURL32 returns the value of the "photo_url_32" field in the mutation.
func (m *ApexCustomerMutation) PhotoURL32() (r string, exists bool) {
	v := m.photo_url_32
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL32 returns the old "photo_url_32" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldPhotoURL32(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL32 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL32 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL32: %w", err)
	}
	return oldValue.PhotoURL32, nil
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (m *ApexCustomerMutation) ClearPhotoURL32() {
	m.photo_url_32 = nil
	m.clearedFields[apexcustomer.FieldPhotoURL32] = struct{}{}
}

// PhotoURL32Cleared returns if the "photo_url_32" field was cleared in this mutation.
func (m *ApexCustomerMutation) PhotoURL32Cleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldPhotoURL32]
	return ok
}

// ResetPhotoURL32 resets all changes to the "photo_url_32" field.
func (m *ApexCustomerMutation) ResetPhotoURL32() {
	m.photo_url_32 = nil
	delete(m.clearedFields, apexcustomer.FieldPhotoURL32)
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (m *ApexCustomerMutation) SetPhotoURL48(s string) {
	m.photo_url_48 = &s
}

// PhotoURL48 returns the value of the "photo_url_48" field in the mutation.
func (m *ApexCustomerMutation) PhotoURL48() (r string, exists bool) {
	v := m.photo_url_48
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL48 returns the old "photo_url_48" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldPhotoURL48(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL48 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL48 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL48: %w", err)
	}
	return oldValue.PhotoURL48, nil
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (m *ApexCustomerMutation) ClearPhotoURL48() {
	m.photo_url_48 = nil
	m.clearedFields[apexcustomer.FieldPhotoURL48] = struct{}{}
}

// PhotoURL48Cleared returns if the "photo_url_48" field was cleared in this mutation.
func (m *ApexCustomerMutation) PhotoURL48Cleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldPhotoURL48]
	return ok
}

// ResetPhotoURL48 resets all changes to the "photo_url_48" field.
func (m *ApexCustomerMutation) ResetPhotoURL48() {
	m.photo_url_48 = nil
	delete(m.clearedFields, apexcustomer.FieldPhotoURL48)
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (m *ApexCustomerMutation) SetPhotoURL72(s string) {
	m.photo_url_72 = &s
}

// PhotoURL72 returns the value of the "photo_url_72" field in the mutation.
func (m *ApexCustomerMutation) PhotoURL72() (r string, exists bool) {
	v := m.photo_url_72
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL72 returns the old "photo_url_72" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldPhotoURL72(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL72 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL72 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL72: %w", err)
	}
	return oldValue.PhotoURL72, nil
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (m *ApexCustomerMutation) ClearPhotoURL72() {
	m.photo_url_72 = nil
	m.clearedFields[apexcustomer.FieldPhotoURL72] = struct{}{}
}

// PhotoURL72Cleared returns if the "photo_url_72" field was cleared in this mutation.
func (m *ApexCustomerMutation) PhotoURL72Cleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldPhotoURL72]
	return ok
}

// ResetPhotoURL72 resets all changes to the "photo_url_72" field.
func (m *ApexCustomerMutation) ResetPhotoURL72() {
	m.photo_url_72 = nil
	delete(m.clearedFields, apexcustomer.FieldPhotoURL72)
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (m *ApexCustomerMutation) SetPhotoURL192(s string) {
	m.photo_url_192 = &s
}

// PhotoURL192 returns the value of the "photo_url_192" field in the mutation.
func (m *ApexCustomerMutation) PhotoURL192() (r string, exists bool) {
	v := m.photo_url_192
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL192 returns the old "photo_url_192" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldPhotoURL192(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL192 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL192 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL192: %w", err)
	}
	return oldValue.PhotoURL192, nil
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (m *ApexCustomerMutation) ClearPhotoURL192() {
	m.photo_url_192 = nil
	m.clearedFields[apexcustomer.FieldPhotoURL192] = struct{}{}
}

// PhotoURL192Cleared returns if the "photo_url_192" field was cleared in this mutation.
func (m *ApexCustomerMutation) PhotoURL192Cleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldPhotoURL192]
	return ok
}

// ResetPhotoURL192 resets all changes to the "photo_url_192" field.
func (m *ApexCustomerMutation) ResetPhotoURL192() {
	m.photo_url_192 = nil
	delete(m.clearedFields, apexcustomer.FieldPhotoURL192)
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (m *ApexCustomerMutation) SetPhotoURL512(s string) {
	m.photo_url_512 = &s
}

// PhotoURL512 returns the value of the "photo_url_512" field in the mutation.
func (m *ApexCustomerMutation) PhotoURL512() (r string, exists bool) {
	v := m.photo_url_512
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL512 returns the old "photo_url_512" field's value of the ApexCustomer entity.
// If the ApexCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerMutation) OldPhotoURL512(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL512 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL512 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL512: %w", err)
	}
	return oldValue.PhotoURL512, nil
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (m *ApexCustomerMutation) ClearPhotoURL512() {
	m.photo_url_512 = nil
	m.clearedFields[apexcustomer.FieldPhotoURL512] = struct{}{}
}

// PhotoURL512Cleared returns if the "photo_url_512" field was cleared in this mutation.
func (m *ApexCustomerMutation) PhotoURL512Cleared() bool {
	_, ok := m.clearedFields[apexcustomer.FieldPhotoURL512]
	return ok
}

// ResetPhotoURL512 resets all changes to the "photo_url_512" field.
func (m *ApexCustomerMutation) ResetPhotoURL512() {
	m.photo_url_512 = nil
	delete(m.clearedFields, apexcustomer.FieldPhotoURL512)
}

// AddIdentityIDs adds the "identities" edge to the ApexCustomerIdentity entity by ids.
func (m *ApexCustomerMutation) AddIdentityIDs(ids ...string) {
	if m.identities == nil {
		m.identities = make(map[string]struct{})
	}
	for i := range ids {
		m.identities[ids[i]] = struct{}{}
	}
}

// ClearIdentities clears the "identities" edge to the ApexCustomerIdentity entity.
func (m *ApexCustomerMutation) ClearIdentities() {
	m.clearedidentities = true
}

// IdentitiesCleared reports if the "identities" edge to the ApexCustomerIdentity entity was cleared.
func (m *ApexCustomerMutation) IdentitiesCleared() bool {
	return m.clearedidentities
}

// RemoveIdentityIDs removes the "identities" edge to the ApexCustomerIdentity entity by IDs.
func (m *ApexCustomerMutation) RemoveIdentityIDs(ids ...string) {
	if m.removedidentities == nil {
		m.removedidentities = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.identities, ids[i])
		m.removedidentities[ids[i]] = struct{}{}
	}
}

// RemovedIdentities returns the removed IDs of the "identities" edge to the ApexCustomerIdentity entity.
func (m *ApexCustomerMutation) RemovedIdentitiesIDs() (ids []string) {
	for id := range m.removedidentities {
		ids = append(ids, id)
	}
	return
}

// IdentitiesIDs returns the "identities" edge IDs in the mutation.
func (m *ApexCustomerMutation) IdentitiesIDs() (ids []string) {
	for id := range m.identities {
		ids = append(ids, id)
	}
	return
}

// ResetIdentities resets all changes to the "identities" edge.
func (m *ApexCustomerMutation) ResetIdentities() {
	m.identities = nil
	m.clearedidentities = false
	m.removedidentities = nil
}

// Where appends a list predicates to the ApexCustomerMutation builder.
func (m *ApexCustomerMutation) Where(ps ...predicate.ApexCustomer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApexCustomerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApexCustomerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ApexCustomer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApexCustomerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApexCustomerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ApexCustomer).
func (m *ApexCustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApexCustomerMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, apexcustomer.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, apexcustomer.FieldModifiedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, apexcustomer.FieldDeletedAt)
	}
	if m.event_raised_at != nil {
		fields = append(fields, apexcustomer.FieldEventRaisedAt)
	}
	if m.name != nil {
		fields = append(fields, apexcustomer.FieldName)
	}
	if m.given_name != nil {
		fields = append(fields, apexcustomer.FieldGivenName)
	}
	if m.middle_name != nil {
		fields = append(fields, apexcustomer.FieldMiddleName)
	}
	if m.family_name != nil {
		fields = append(fields, apexcustomer.FieldFamilyName)
	}
	if m.photo_url != nil {
		fields = append(fields, apexcustomer.FieldPhotoURL)
	}
	if m.photo_url_24 != nil {
		fields = append(fields, apexcustomer.FieldPhotoURL24)
	}
	if m.photo_url_32 != nil {
		fields = append(fields, apexcustomer.FieldPhotoURL32)
	}
	if m.photo_url_48 != nil {
		fields = append(fields, apexcustomer.FieldPhotoURL48)
	}
	if m.photo_url_72 != nil {
		fields = append(fields, apexcustomer.FieldPhotoURL72)
	}
	if m.photo_url_192 != nil {
		fields = append(fields, apexcustomer.FieldPhotoURL192)
	}
	if m.photo_url_512 != nil {
		fields = append(fields, apexcustomer.FieldPhotoURL512)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApexCustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apexcustomer.FieldCreatedAt:
		return m.CreatedAt()
	case apexcustomer.FieldModifiedAt:
		return m.ModifiedAt()
	case apexcustomer.FieldDeletedAt:
		return m.DeletedAt()
	case apexcustomer.FieldEventRaisedAt:
		return m.EventRaisedAt()
	case apexcustomer.FieldName:
		return m.Name()
	case apexcustomer.FieldGivenName:
		return m.GivenName()
	case apexcustomer.FieldMiddleName:
		return m.MiddleName()
	case apexcustomer.FieldFamilyName:
		return m.FamilyName()
	case apexcustomer.FieldPhotoURL:
		return m.PhotoURL()
	case apexcustomer.FieldPhotoURL24:
		return m.PhotoURL24()
	case apexcustomer.FieldPhotoURL32:
		return m.PhotoURL32()
	case apexcustomer.FieldPhotoURL48:
		return m.PhotoURL48()
	case apexcustomer.FieldPhotoURL72:
		return m.PhotoURL72()
	case apexcustomer.FieldPhotoURL192:
		return m.PhotoURL192()
	case apexcustomer.FieldPhotoURL512:
		return m.PhotoURL512()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApexCustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apexcustomer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case apexcustomer.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	case apexcustomer.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case apexcustomer.FieldEventRaisedAt:
		return m.OldEventRaisedAt(ctx)
	case apexcustomer.FieldName:
		return m.OldName(ctx)
	case apexcustomer.FieldGivenName:
		return m.OldGivenName(ctx)
	case apexcustomer.FieldMiddleName:
		return m.OldMiddleName(ctx)
	case apexcustomer.FieldFamilyName:
		return m.OldFamilyName(ctx)
	case apexcustomer.FieldPhotoURL:
		return m.OldPhotoURL(ctx)
	case apexcustomer.FieldPhotoURL24:
		return m.OldPhotoURL24(ctx)
	case apexcustomer.FieldPhotoURL32:
		return m.OldPhotoURL32(ctx)
	case apexcustomer.FieldPhotoURL48:
		return m.OldPhotoURL48(ctx)
	case apexcustomer.FieldPhotoURL72:
		return m.OldPhotoURL72(ctx)
	case apexcustomer.FieldPhotoURL192:
		return m.OldPhotoURL192(ctx)
	case apexcustomer.FieldPhotoURL512:
		return m.OldPhotoURL512(ctx)
	}
	return nil, fmt.Errorf("unknown ApexCustomer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApexCustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apexcustomer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case apexcustomer.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	case apexcustomer.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case apexcustomer.FieldEventRaisedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventRaisedAt(v)
		return nil
	case apexcustomer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case apexcustomer.FieldGivenName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGivenName(v)
		return nil
	case apexcustomer.FieldMiddleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMiddleName(v)
		return nil
	case apexcustomer.FieldFamilyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFamilyName(v)
		return nil
	case apexcustomer.FieldPhotoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL(v)
		return nil
	case apexcustomer.FieldPhotoURL24:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL24(v)
		return nil
	case apexcustomer.FieldPhotoURL32:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL32(v)
		return nil
	case apexcustomer.FieldPhotoURL48:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL48(v)
		return nil
	case apexcustomer.FieldPhotoURL72:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL72(v)
		return nil
	case apexcustomer.FieldPhotoURL192:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL192(v)
		return nil
	case apexcustomer.FieldPhotoURL512:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL512(v)
		return nil
	}
	return fmt.Errorf("unknown ApexCustomer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApexCustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApexCustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApexCustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ApexCustomer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApexCustomerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(apexcustomer.FieldModifiedAt) {
		fields = append(fields, apexcustomer.FieldModifiedAt)
	}
	if m.FieldCleared(apexcustomer.FieldDeletedAt) {
		fields = append(fields, apexcustomer.FieldDeletedAt)
	}
	if m.FieldCleared(apexcustomer.FieldName) {
		fields = append(fields, apexcustomer.FieldName)
	}
	if m.FieldCleared(apexcustomer.FieldGivenName) {
		fields = append(fields, apexcustomer.FieldGivenName)
	}
	if m.FieldCleared(apexcustomer.FieldMiddleName) {
		fields = append(fields, apexcustomer.FieldMiddleName)
	}
	if m.FieldCleared(apexcustomer.FieldFamilyName) {
		fields = append(fields, apexcustomer.FieldFamilyName)
	}
	if m.FieldCleared(apexcustomer.FieldPhotoURL) {
		fields = append(fields, apexcustomer.FieldPhotoURL)
	}
	if m.FieldCleared(apexcustomer.FieldPhotoURL24) {
		fields = append(fields, apexcustomer.FieldPhotoURL24)
	}
	if m.FieldCleared(apexcustomer.FieldPhotoURL32) {
		fields = append(fields, apexcustomer.FieldPhotoURL32)
	}
	if m.FieldCleared(apexcustomer.FieldPhotoURL48) {
		fields = append(fields, apexcustomer.FieldPhotoURL48)
	}
	if m.FieldCleared(apexcustomer.FieldPhotoURL72) {
		fields = append(fields, apexcustomer.FieldPhotoURL72)
	}
	if m.FieldCleared(apexcustomer.FieldPhotoURL192) {
		fields = append(fields, apexcustomer.FieldPhotoURL192)
	}
	if m.FieldCleared(apexcustomer.FieldPhotoURL512) {
		fields = append(fields, apexcustomer.FieldPhotoURL512)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApexCustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApexCustomerMutation) ClearField(name string) error {
	switch name {
	case apexcustomer.FieldModifiedAt:
		m.ClearModifiedAt()
		return nil
	case apexcustomer.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case apexcustomer.FieldName:
		m.ClearName()
		return nil
	case apexcustomer.FieldGivenName:
		m.ClearGivenName()
		return nil
	case apexcustomer.FieldMiddleName:
		m.ClearMiddleName()
		return nil
	case apexcustomer.FieldFamilyName:
		m.ClearFamilyName()
		return nil
	case apexcustomer.FieldPhotoURL:
		m.ClearPhotoURL()
		return nil
	case apexcustomer.FieldPhotoURL24:
		m.ClearPhotoURL24()
		return nil
	case apexcustomer.FieldPhotoURL32:
		m.ClearPhotoURL32()
		return nil
	case apexcustomer.FieldPhotoURL48:
		m.ClearPhotoURL48()
		return nil
	case apexcustomer.FieldPhotoURL72:
		m.ClearPhotoURL72()
		return nil
	case apexcustomer.FieldPhotoURL192:
		m.ClearPhotoURL192()
		return nil
	case apexcustomer.FieldPhotoURL512:
		m.ClearPhotoURL512()
		return nil
	}
	return fmt.Errorf("unknown ApexCustomer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApexCustomerMutation) ResetField(name string) error {
	switch name {
	case apexcustomer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case apexcustomer.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	case apexcustomer.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case apexcustomer.FieldEventRaisedAt:
		m.ResetEventRaisedAt()
		return nil
	case apexcustomer.FieldName:
		m.ResetName()
		return nil
	case apexcustomer.FieldGivenName:
		m.ResetGivenName()
		return nil
	case apexcustomer.FieldMiddleName:
		m.ResetMiddleName()
		return nil
	case apexcustomer.FieldFamilyName:
		m.ResetFamilyName()
		return nil
	case apexcustomer.FieldPhotoURL:
		m.ResetPhotoURL()
		return nil
	case apexcustomer.FieldPhotoURL24:
		m.ResetPhotoURL24()
		return nil
	case apexcustomer.FieldPhotoURL32:
		m.ResetPhotoURL32()
		return nil
	case apexcustomer.FieldPhotoURL48:
		m.ResetPhotoURL48()
		return nil
	case apexcustomer.FieldPhotoURL72:
		m.ResetPhotoURL72()
		return nil
	case apexcustomer.FieldPhotoURL192:
		m.ResetPhotoURL192()
		return nil
	case apexcustomer.FieldPhotoURL512:
		m.ResetPhotoURL512()
		return nil
	}
	return fmt.Errorf("unknown ApexCustomer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApexCustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.identities != nil {
		edges = append(edges, apexcustomer.EdgeIdentities)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApexCustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case apexcustomer.EdgeIdentities:
		ids := make([]ent.Value, 0, len(m.identities))
		for id := range m.identities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApexCustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedidentities != nil {
		edges = append(edges, apexcustomer.EdgeIdentities)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApexCustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case apexcustomer.EdgeIdentities:
		ids := make([]ent.Value, 0, len(m.removedidentities))
		for id := range m.removedidentities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApexCustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedidentities {
		edges = append(edges, apexcustomer.EdgeIdentities)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApexCustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case apexcustomer.EdgeIdentities:
		return m.clearedidentities
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApexCustomerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ApexCustomer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApexCustomerMutation) ResetEdge(name string) error {
	switch name {
	case apexcustomer.EdgeIdentities:
		m.ResetIdentities()
		return nil
	}
	return fmt.Errorf("unknown ApexCustomer edge %s", name)
}

// ApexCustomerIdentityMutation represents an operation that mutates the ApexCustomerIdentity nodes in the graph.
type ApexCustomerIdentityMutation struct {
	config
	op              Op
	typ             string
	id              *string
	created_at      *time.Time
	modified_at     *time.Time
	deleted_at      *time.Time
	email           *string
	email_verified  *bool
	clearedFields   map[string]struct{}
	customer        *string
	clearedcustomer bool
	done            bool
	oldValue        func(context.Context) (*ApexCustomerIdentity, error)
	predicates      []predicate.ApexCustomerIdentity
}

var _ ent.Mutation = (*ApexCustomerIdentityMutation)(nil)

// apexcustomeridentityOption allows management of the mutation configuration using functional options.
type apexcustomeridentityOption func(*ApexCustomerIdentityMutation)

// newApexCustomerIdentityMutation creates new mutation for the ApexCustomerIdentity entity.
func newApexCustomerIdentityMutation(c config, op Op, opts ...apexcustomeridentityOption) *ApexCustomerIdentityMutation {
	m := &ApexCustomerIdentityMutation{
		config:        c,
		op:            op,
		typ:           TypeApexCustomerIdentity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApexCustomerIdentityID sets the ID field of the mutation.
func withApexCustomerIdentityID(id string) apexcustomeridentityOption {
	return func(m *ApexCustomerIdentityMutation) {
		var (
			err   error
			once  sync.Once
			value *ApexCustomerIdentity
		)
		m.oldValue = func(ctx context.Context) (*ApexCustomerIdentity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApexCustomerIdentity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApexCustomerIdentity sets the old ApexCustomerIdentity of the mutation.
func withApexCustomerIdentity(node *ApexCustomerIdentity) apexcustomeridentityOption {
	return func(m *ApexCustomerIdentityMutation) {
		m.oldValue = func(context.Context) (*ApexCustomerIdentity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApexCustomerIdentityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApexCustomerIdentityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ApexCustomerIdentity entities.
func (m *ApexCustomerIdentityMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApexCustomerIdentityMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApexCustomerIdentityMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApexCustomerIdentity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ApexCustomerIdentityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ApexCustomerIdentityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ApexCustomerIdentity entity.
// If the ApexCustomerIdentity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerIdentityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ApexCustomerIdentityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *ApexCustomerIdentityMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *ApexCustomerIdentityMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the ApexCustomerIdentity entity.
// If the ApexCustomerIdentity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerIdentityMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (m *ApexCustomerIdentityMutation) ClearModifiedAt() {
	m.modified_at = nil
	m.clearedFields[apexcustomeridentity.FieldModifiedAt] = struct{}{}
}

// ModifiedAtCleared returns if the "modified_at" field was cleared in this mutation.
func (m *ApexCustomerIdentityMutation) ModifiedAtCleared() bool {
	_, ok := m.clearedFields[apexcustomeridentity.FieldModifiedAt]
	return ok
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *ApexCustomerIdentityMutation) ResetModifiedAt() {
	m.modified_at = nil
	delete(m.clearedFields, apexcustomeridentity.FieldModifiedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ApexCustomerIdentityMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ApexCustomerIdentityMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ApexCustomerIdentity entity.
// If the ApexCustomerIdentity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerIdentityMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ApexCustomerIdentityMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[apexcustomeridentity.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ApexCustomerIdentityMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[apexcustomeridentity.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ApexCustomerIdentityMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, apexcustomeridentity.FieldDeletedAt)
}

// SetEmail sets the "email" field.
func (m *ApexCustomerIdentityMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *ApexCustomerIdentityMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the ApexCustomerIdentity entity.
// If the ApexCustomerIdentity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerIdentityMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *ApexCustomerIdentityMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[apexcustomeridentity.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *ApexCustomerIdentityMutation) EmailCleared() bool {
	_, ok := m.clearedFields[apexcustomeridentity.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *ApexCustomerIdentityMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, apexcustomeridentity.FieldEmail)
}

// SetEmailVerified sets the "email_verified" field.
func (m *ApexCustomerIdentityMutation) SetEmailVerified(b bool) {
	m.email_verified = &b
}

// EmailVerified returns the value of the "email_verified" field in the mutation.
func (m *ApexCustomerIdentityMutation) EmailVerified() (r bool, exists bool) {
	v := m.email_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerified returns the old "email_verified" field's value of the ApexCustomerIdentity entity.
// If the ApexCustomerIdentity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApexCustomerIdentityMutation) OldEmailVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerified: %w", err)
	}
	return oldValue.EmailVerified, nil
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (m *ApexCustomerIdentityMutation) ClearEmailVerified() {
	m.email_verified = nil
	m.clearedFields[apexcustomeridentity.FieldEmailVerified] = struct{}{}
}

// EmailVerifiedCleared returns if the "email_verified" field was cleared in this mutation.
func (m *ApexCustomerIdentityMutation) EmailVerifiedCleared() bool {
	_, ok := m.clearedFields[apexcustomeridentity.FieldEmailVerified]
	return ok
}

// ResetEmailVerified resets all changes to the "email_verified" field.
func (m *ApexCustomerIdentityMutation) ResetEmailVerified() {
	m.email_verified = nil
	delete(m.clearedFields, apexcustomeridentity.FieldEmailVerified)
}

// SetCustomerID sets the "customer" edge to the ApexCustomer entity by id.
func (m *ApexCustomerIdentityMutation) SetCustomerID(id string) {
	m.customer = &id
}

// ClearCustomer clears the "customer" edge to the ApexCustomer entity.
func (m *ApexCustomerIdentityMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared reports if the "customer" edge to the ApexCustomer entity was cleared.
func (m *ApexCustomerIdentityMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// CustomerID returns the "customer" edge ID in the mutation.
func (m *ApexCustomerIdentityMutation) CustomerID() (id string, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the "customer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *ApexCustomerIdentityMutation) CustomerIDs() (ids []string) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer resets all changes to the "customer" edge.
func (m *ApexCustomerIdentityMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// Where appends a list predicates to the ApexCustomerIdentityMutation builder.
func (m *ApexCustomerIdentityMutation) Where(ps ...predicate.ApexCustomerIdentity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApexCustomerIdentityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApexCustomerIdentityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ApexCustomerIdentity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApexCustomerIdentityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApexCustomerIdentityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ApexCustomerIdentity).
func (m *ApexCustomerIdentityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApexCustomerIdentityMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, apexcustomeridentity.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, apexcustomeridentity.FieldModifiedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, apexcustomeridentity.FieldDeletedAt)
	}
	if m.email != nil {
		fields = append(fields, apexcustomeridentity.FieldEmail)
	}
	if m.email_verified != nil {
		fields = append(fields, apexcustomeridentity.FieldEmailVerified)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApexCustomerIdentityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apexcustomeridentity.FieldCreatedAt:
		return m.CreatedAt()
	case apexcustomeridentity.FieldModifiedAt:
		return m.ModifiedAt()
	case apexcustomeridentity.FieldDeletedAt:
		return m.DeletedAt()
	case apexcustomeridentity.FieldEmail:
		return m.Email()
	case apexcustomeridentity.FieldEmailVerified:
		return m.EmailVerified()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApexCustomerIdentityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apexcustomeridentity.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case apexcustomeridentity.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	case apexcustomeridentity.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case apexcustomeridentity.FieldEmail:
		return m.OldEmail(ctx)
	case apexcustomeridentity.FieldEmailVerified:
		return m.OldEmailVerified(ctx)
	}
	return nil, fmt.Errorf("unknown ApexCustomerIdentity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApexCustomerIdentityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apexcustomeridentity.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case apexcustomeridentity.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	case apexcustomeridentity.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case apexcustomeridentity.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case apexcustomeridentity.FieldEmailVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerified(v)
		return nil
	}
	return fmt.Errorf("unknown ApexCustomerIdentity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApexCustomerIdentityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApexCustomerIdentityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApexCustomerIdentityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ApexCustomerIdentity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApexCustomerIdentityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(apexcustomeridentity.FieldModifiedAt) {
		fields = append(fields, apexcustomeridentity.FieldModifiedAt)
	}
	if m.FieldCleared(apexcustomeridentity.FieldDeletedAt) {
		fields = append(fields, apexcustomeridentity.FieldDeletedAt)
	}
	if m.FieldCleared(apexcustomeridentity.FieldEmail) {
		fields = append(fields, apexcustomeridentity.FieldEmail)
	}
	if m.FieldCleared(apexcustomeridentity.FieldEmailVerified) {
		fields = append(fields, apexcustomeridentity.FieldEmailVerified)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApexCustomerIdentityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApexCustomerIdentityMutation) ClearField(name string) error {
	switch name {
	case apexcustomeridentity.FieldModifiedAt:
		m.ClearModifiedAt()
		return nil
	case apexcustomeridentity.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case apexcustomeridentity.FieldEmail:
		m.ClearEmail()
		return nil
	case apexcustomeridentity.FieldEmailVerified:
		m.ClearEmailVerified()
		return nil
	}
	return fmt.Errorf("unknown ApexCustomerIdentity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApexCustomerIdentityMutation) ResetField(name string) error {
	switch name {
	case apexcustomeridentity.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case apexcustomeridentity.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	case apexcustomeridentity.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case apexcustomeridentity.FieldEmail:
		m.ResetEmail()
		return nil
	case apexcustomeridentity.FieldEmailVerified:
		m.ResetEmailVerified()
		return nil
	}
	return fmt.Errorf("unknown ApexCustomerIdentity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApexCustomerIdentityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.customer != nil {
		edges = append(edges, apexcustomeridentity.EdgeCustomer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApexCustomerIdentityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case apexcustomeridentity.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApexCustomerIdentityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApexCustomerIdentityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApexCustomerIdentityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcustomer {
		edges = append(edges, apexcustomeridentity.EdgeCustomer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApexCustomerIdentityMutation) EdgeCleared(name string) bool {
	switch name {
	case apexcustomeridentity.EdgeCustomer:
		return m.clearedcustomer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApexCustomerIdentityMutation) ClearEdge(name string) error {
	switch name {
	case apexcustomeridentity.EdgeCustomer:
		m.ClearCustomer()
		return nil
	}
	return fmt.Errorf("unknown ApexCustomerIdentity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApexCustomerIdentityMutation) ResetEdge(name string) error {
	switch name {
	case apexcustomeridentity.EdgeCustomer:
		m.ResetCustomer()
		return nil
	}
	return fmt.Errorf("unknown ApexCustomerIdentity edge %s", name)
}
