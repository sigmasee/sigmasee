// Code generated by ent, DO NOT EDIT.

package entities

import (
	"errors"
	"fmt"
	"time"

	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomer"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomeridentity"
	"github.com/sigmasee/sigmasee/apex/shared/entities/predicate"
)

// ApexCustomerWhereInput represents a where input for filtering ApexCustomer queries.
type ApexCustomerWhereInput struct {
	Predicates []predicate.ApexCustomer  `json:"-"`
	Not        *ApexCustomerWhereInput   `json:"not,omitempty"`
	Or         []*ApexCustomerWhereInput `json:"or,omitempty"`
	And        []*ApexCustomerWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "modified_at" field predicates.
	ModifiedAt       *time.Time  `json:"modifiedAt,omitempty"`
	ModifiedAtNEQ    *time.Time  `json:"modifiedAtNEQ,omitempty"`
	ModifiedAtIn     []time.Time `json:"modifiedAtIn,omitempty"`
	ModifiedAtNotIn  []time.Time `json:"modifiedAtNotIn,omitempty"`
	ModifiedAtGT     *time.Time  `json:"modifiedAtGT,omitempty"`
	ModifiedAtGTE    *time.Time  `json:"modifiedAtGTE,omitempty"`
	ModifiedAtLT     *time.Time  `json:"modifiedAtLT,omitempty"`
	ModifiedAtLTE    *time.Time  `json:"modifiedAtLTE,omitempty"`
	ModifiedAtIsNil  bool        `json:"modifiedAtIsNil,omitempty"`
	ModifiedAtNotNil bool        `json:"modifiedAtNotNil,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "event_raised_at" field predicates.
	EventRaisedAt      *time.Time  `json:"eventRaisedAt,omitempty"`
	EventRaisedAtNEQ   *time.Time  `json:"eventRaisedAtNEQ,omitempty"`
	EventRaisedAtIn    []time.Time `json:"eventRaisedAtIn,omitempty"`
	EventRaisedAtNotIn []time.Time `json:"eventRaisedAtNotIn,omitempty"`
	EventRaisedAtGT    *time.Time  `json:"eventRaisedAtGT,omitempty"`
	EventRaisedAtGTE   *time.Time  `json:"eventRaisedAtGTE,omitempty"`
	EventRaisedAtLT    *time.Time  `json:"eventRaisedAtLT,omitempty"`
	EventRaisedAtLTE   *time.Time  `json:"eventRaisedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "given_name" field predicates.
	GivenName             *string  `json:"givenName,omitempty"`
	GivenNameNEQ          *string  `json:"givenNameNEQ,omitempty"`
	GivenNameIn           []string `json:"givenNameIn,omitempty"`
	GivenNameNotIn        []string `json:"givenNameNotIn,omitempty"`
	GivenNameGT           *string  `json:"givenNameGT,omitempty"`
	GivenNameGTE          *string  `json:"givenNameGTE,omitempty"`
	GivenNameLT           *string  `json:"givenNameLT,omitempty"`
	GivenNameLTE          *string  `json:"givenNameLTE,omitempty"`
	GivenNameContains     *string  `json:"givenNameContains,omitempty"`
	GivenNameHasPrefix    *string  `json:"givenNameHasPrefix,omitempty"`
	GivenNameHasSuffix    *string  `json:"givenNameHasSuffix,omitempty"`
	GivenNameIsNil        bool     `json:"givenNameIsNil,omitempty"`
	GivenNameNotNil       bool     `json:"givenNameNotNil,omitempty"`
	GivenNameEqualFold    *string  `json:"givenNameEqualFold,omitempty"`
	GivenNameContainsFold *string  `json:"givenNameContainsFold,omitempty"`

	// "middle_name" field predicates.
	MiddleName             *string  `json:"middleName,omitempty"`
	MiddleNameNEQ          *string  `json:"middleNameNEQ,omitempty"`
	MiddleNameIn           []string `json:"middleNameIn,omitempty"`
	MiddleNameNotIn        []string `json:"middleNameNotIn,omitempty"`
	MiddleNameGT           *string  `json:"middleNameGT,omitempty"`
	MiddleNameGTE          *string  `json:"middleNameGTE,omitempty"`
	MiddleNameLT           *string  `json:"middleNameLT,omitempty"`
	MiddleNameLTE          *string  `json:"middleNameLTE,omitempty"`
	MiddleNameContains     *string  `json:"middleNameContains,omitempty"`
	MiddleNameHasPrefix    *string  `json:"middleNameHasPrefix,omitempty"`
	MiddleNameHasSuffix    *string  `json:"middleNameHasSuffix,omitempty"`
	MiddleNameIsNil        bool     `json:"middleNameIsNil,omitempty"`
	MiddleNameNotNil       bool     `json:"middleNameNotNil,omitempty"`
	MiddleNameEqualFold    *string  `json:"middleNameEqualFold,omitempty"`
	MiddleNameContainsFold *string  `json:"middleNameContainsFold,omitempty"`

	// "family_name" field predicates.
	FamilyName             *string  `json:"familyName,omitempty"`
	FamilyNameNEQ          *string  `json:"familyNameNEQ,omitempty"`
	FamilyNameIn           []string `json:"familyNameIn,omitempty"`
	FamilyNameNotIn        []string `json:"familyNameNotIn,omitempty"`
	FamilyNameGT           *string  `json:"familyNameGT,omitempty"`
	FamilyNameGTE          *string  `json:"familyNameGTE,omitempty"`
	FamilyNameLT           *string  `json:"familyNameLT,omitempty"`
	FamilyNameLTE          *string  `json:"familyNameLTE,omitempty"`
	FamilyNameContains     *string  `json:"familyNameContains,omitempty"`
	FamilyNameHasPrefix    *string  `json:"familyNameHasPrefix,omitempty"`
	FamilyNameHasSuffix    *string  `json:"familyNameHasSuffix,omitempty"`
	FamilyNameIsNil        bool     `json:"familyNameIsNil,omitempty"`
	FamilyNameNotNil       bool     `json:"familyNameNotNil,omitempty"`
	FamilyNameEqualFold    *string  `json:"familyNameEqualFold,omitempty"`
	FamilyNameContainsFold *string  `json:"familyNameContainsFold,omitempty"`

	// "photo_url" field predicates.
	PhotoURL             *string  `json:"photoURL,omitempty"`
	PhotoURLNEQ          *string  `json:"photoURLNEQ,omitempty"`
	PhotoURLIn           []string `json:"photoURLIn,omitempty"`
	PhotoURLNotIn        []string `json:"photoURLNotIn,omitempty"`
	PhotoURLGT           *string  `json:"photoURLGT,omitempty"`
	PhotoURLGTE          *string  `json:"photoURLGTE,omitempty"`
	PhotoURLLT           *string  `json:"photoURLLT,omitempty"`
	PhotoURLLTE          *string  `json:"photoURLLTE,omitempty"`
	PhotoURLContains     *string  `json:"photoURLContains,omitempty"`
	PhotoURLHasPrefix    *string  `json:"photoURLHasPrefix,omitempty"`
	PhotoURLHasSuffix    *string  `json:"photoURLHasSuffix,omitempty"`
	PhotoURLIsNil        bool     `json:"photoURLIsNil,omitempty"`
	PhotoURLNotNil       bool     `json:"photoURLNotNil,omitempty"`
	PhotoURLEqualFold    *string  `json:"photoURLEqualFold,omitempty"`
	PhotoURLContainsFold *string  `json:"photoURLContainsFold,omitempty"`

	// "photo_url_24" field predicates.
	PhotoURL24             *string  `json:"photoURL24,omitempty"`
	PhotoURL24NEQ          *string  `json:"photoURL24NEQ,omitempty"`
	PhotoURL24In           []string `json:"photoURL24In,omitempty"`
	PhotoURL24NotIn        []string `json:"photoURL24NotIn,omitempty"`
	PhotoURL24GT           *string  `json:"photoURL24GT,omitempty"`
	PhotoURL24GTE          *string  `json:"photoURL24GTE,omitempty"`
	PhotoURL24LT           *string  `json:"photoURL24LT,omitempty"`
	PhotoURL24LTE          *string  `json:"photoURL24LTE,omitempty"`
	PhotoURL24Contains     *string  `json:"photoURL24Contains,omitempty"`
	PhotoURL24HasPrefix    *string  `json:"photoURL24HasPrefix,omitempty"`
	PhotoURL24HasSuffix    *string  `json:"photoURL24HasSuffix,omitempty"`
	PhotoURL24IsNil        bool     `json:"photoURL24IsNil,omitempty"`
	PhotoURL24NotNil       bool     `json:"photoURL24NotNil,omitempty"`
	PhotoURL24EqualFold    *string  `json:"photoURL24EqualFold,omitempty"`
	PhotoURL24ContainsFold *string  `json:"photoURL24ContainsFold,omitempty"`

	// "photo_url_32" field predicates.
	PhotoURL32             *string  `json:"photoURL32,omitempty"`
	PhotoURL32NEQ          *string  `json:"photoURL32NEQ,omitempty"`
	PhotoURL32In           []string `json:"photoURL32In,omitempty"`
	PhotoURL32NotIn        []string `json:"photoURL32NotIn,omitempty"`
	PhotoURL32GT           *string  `json:"photoURL32GT,omitempty"`
	PhotoURL32GTE          *string  `json:"photoURL32GTE,omitempty"`
	PhotoURL32LT           *string  `json:"photoURL32LT,omitempty"`
	PhotoURL32LTE          *string  `json:"photoURL32LTE,omitempty"`
	PhotoURL32Contains     *string  `json:"photoURL32Contains,omitempty"`
	PhotoURL32HasPrefix    *string  `json:"photoURL32HasPrefix,omitempty"`
	PhotoURL32HasSuffix    *string  `json:"photoURL32HasSuffix,omitempty"`
	PhotoURL32IsNil        bool     `json:"photoURL32IsNil,omitempty"`
	PhotoURL32NotNil       bool     `json:"photoURL32NotNil,omitempty"`
	PhotoURL32EqualFold    *string  `json:"photoURL32EqualFold,omitempty"`
	PhotoURL32ContainsFold *string  `json:"photoURL32ContainsFold,omitempty"`

	// "photo_url_48" field predicates.
	PhotoURL48             *string  `json:"photoURL48,omitempty"`
	PhotoURL48NEQ          *string  `json:"photoURL48NEQ,omitempty"`
	PhotoURL48In           []string `json:"photoURL48In,omitempty"`
	PhotoURL48NotIn        []string `json:"photoURL48NotIn,omitempty"`
	PhotoURL48GT           *string  `json:"photoURL48GT,omitempty"`
	PhotoURL48GTE          *string  `json:"photoURL48GTE,omitempty"`
	PhotoURL48LT           *string  `json:"photoURL48LT,omitempty"`
	PhotoURL48LTE          *string  `json:"photoURL48LTE,omitempty"`
	PhotoURL48Contains     *string  `json:"photoURL48Contains,omitempty"`
	PhotoURL48HasPrefix    *string  `json:"photoURL48HasPrefix,omitempty"`
	PhotoURL48HasSuffix    *string  `json:"photoURL48HasSuffix,omitempty"`
	PhotoURL48IsNil        bool     `json:"photoURL48IsNil,omitempty"`
	PhotoURL48NotNil       bool     `json:"photoURL48NotNil,omitempty"`
	PhotoURL48EqualFold    *string  `json:"photoURL48EqualFold,omitempty"`
	PhotoURL48ContainsFold *string  `json:"photoURL48ContainsFold,omitempty"`

	// "photo_url_72" field predicates.
	PhotoURL72             *string  `json:"photoURL72,omitempty"`
	PhotoURL72NEQ          *string  `json:"photoURL72NEQ,omitempty"`
	PhotoURL72In           []string `json:"photoURL72In,omitempty"`
	PhotoURL72NotIn        []string `json:"photoURL72NotIn,omitempty"`
	PhotoURL72GT           *string  `json:"photoURL72GT,omitempty"`
	PhotoURL72GTE          *string  `json:"photoURL72GTE,omitempty"`
	PhotoURL72LT           *string  `json:"photoURL72LT,omitempty"`
	PhotoURL72LTE          *string  `json:"photoURL72LTE,omitempty"`
	PhotoURL72Contains     *string  `json:"photoURL72Contains,omitempty"`
	PhotoURL72HasPrefix    *string  `json:"photoURL72HasPrefix,omitempty"`
	PhotoURL72HasSuffix    *string  `json:"photoURL72HasSuffix,omitempty"`
	PhotoURL72IsNil        bool     `json:"photoURL72IsNil,omitempty"`
	PhotoURL72NotNil       bool     `json:"photoURL72NotNil,omitempty"`
	PhotoURL72EqualFold    *string  `json:"photoURL72EqualFold,omitempty"`
	PhotoURL72ContainsFold *string  `json:"photoURL72ContainsFold,omitempty"`

	// "photo_url_192" field predicates.
	PhotoURL192             *string  `json:"photoURL192,omitempty"`
	PhotoURL192NEQ          *string  `json:"photoURL192NEQ,omitempty"`
	PhotoURL192In           []string `json:"photoURL192In,omitempty"`
	PhotoURL192NotIn        []string `json:"photoURL192NotIn,omitempty"`
	PhotoURL192GT           *string  `json:"photoURL192GT,omitempty"`
	PhotoURL192GTE          *string  `json:"photoURL192GTE,omitempty"`
	PhotoURL192LT           *string  `json:"photoURL192LT,omitempty"`
	PhotoURL192LTE          *string  `json:"photoURL192LTE,omitempty"`
	PhotoURL192Contains     *string  `json:"photoURL192Contains,omitempty"`
	PhotoURL192HasPrefix    *string  `json:"photoURL192HasPrefix,omitempty"`
	PhotoURL192HasSuffix    *string  `json:"photoURL192HasSuffix,omitempty"`
	PhotoURL192IsNil        bool     `json:"photoURL192IsNil,omitempty"`
	PhotoURL192NotNil       bool     `json:"photoURL192NotNil,omitempty"`
	PhotoURL192EqualFold    *string  `json:"photoURL192EqualFold,omitempty"`
	PhotoURL192ContainsFold *string  `json:"photoURL192ContainsFold,omitempty"`

	// "photo_url_512" field predicates.
	PhotoURL512             *string  `json:"photoURL512,omitempty"`
	PhotoURL512NEQ          *string  `json:"photoURL512NEQ,omitempty"`
	PhotoURL512In           []string `json:"photoURL512In,omitempty"`
	PhotoURL512NotIn        []string `json:"photoURL512NotIn,omitempty"`
	PhotoURL512GT           *string  `json:"photoURL512GT,omitempty"`
	PhotoURL512GTE          *string  `json:"photoURL512GTE,omitempty"`
	PhotoURL512LT           *string  `json:"photoURL512LT,omitempty"`
	PhotoURL512LTE          *string  `json:"photoURL512LTE,omitempty"`
	PhotoURL512Contains     *string  `json:"photoURL512Contains,omitempty"`
	PhotoURL512HasPrefix    *string  `json:"photoURL512HasPrefix,omitempty"`
	PhotoURL512HasSuffix    *string  `json:"photoURL512HasSuffix,omitempty"`
	PhotoURL512IsNil        bool     `json:"photoURL512IsNil,omitempty"`
	PhotoURL512NotNil       bool     `json:"photoURL512NotNil,omitempty"`
	PhotoURL512EqualFold    *string  `json:"photoURL512EqualFold,omitempty"`
	PhotoURL512ContainsFold *string  `json:"photoURL512ContainsFold,omitempty"`

	// "identities" edge predicates.
	HasIdentities     *bool                             `json:"hasIdentities,omitempty"`
	HasIdentitiesWith []*ApexCustomerIdentityWhereInput `json:"hasIdentitiesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ApexCustomerWhereInput) AddPredicates(predicates ...predicate.ApexCustomer) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ApexCustomerWhereInput filter on the ApexCustomerQuery builder.
func (i *ApexCustomerWhereInput) Filter(q *ApexCustomerQuery) (*ApexCustomerQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyApexCustomerWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyApexCustomerWhereInput is returned in case the ApexCustomerWhereInput is empty.
var ErrEmptyApexCustomerWhereInput = errors.New("entities: empty predicate ApexCustomerWhereInput")

// P returns a predicate for filtering apexcustomers.
// An error is returned if the input is empty or invalid.
func (i *ApexCustomerWhereInput) P() (predicate.ApexCustomer, error) {
	var predicates []predicate.ApexCustomer
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, apexcustomer.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ApexCustomer, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, apexcustomer.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ApexCustomer, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, apexcustomer.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, apexcustomer.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, apexcustomer.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, apexcustomer.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, apexcustomer.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, apexcustomer.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, apexcustomer.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, apexcustomer.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, apexcustomer.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, apexcustomer.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, apexcustomer.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, apexcustomer.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, apexcustomer.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, apexcustomer.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, apexcustomer.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, apexcustomer.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, apexcustomer.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, apexcustomer.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, apexcustomer.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.ModifiedAt != nil {
		predicates = append(predicates, apexcustomer.ModifiedAtEQ(*i.ModifiedAt))
	}
	if i.ModifiedAtNEQ != nil {
		predicates = append(predicates, apexcustomer.ModifiedAtNEQ(*i.ModifiedAtNEQ))
	}
	if len(i.ModifiedAtIn) > 0 {
		predicates = append(predicates, apexcustomer.ModifiedAtIn(i.ModifiedAtIn...))
	}
	if len(i.ModifiedAtNotIn) > 0 {
		predicates = append(predicates, apexcustomer.ModifiedAtNotIn(i.ModifiedAtNotIn...))
	}
	if i.ModifiedAtGT != nil {
		predicates = append(predicates, apexcustomer.ModifiedAtGT(*i.ModifiedAtGT))
	}
	if i.ModifiedAtGTE != nil {
		predicates = append(predicates, apexcustomer.ModifiedAtGTE(*i.ModifiedAtGTE))
	}
	if i.ModifiedAtLT != nil {
		predicates = append(predicates, apexcustomer.ModifiedAtLT(*i.ModifiedAtLT))
	}
	if i.ModifiedAtLTE != nil {
		predicates = append(predicates, apexcustomer.ModifiedAtLTE(*i.ModifiedAtLTE))
	}
	if i.ModifiedAtIsNil {
		predicates = append(predicates, apexcustomer.ModifiedAtIsNil())
	}
	if i.ModifiedAtNotNil {
		predicates = append(predicates, apexcustomer.ModifiedAtNotNil())
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, apexcustomer.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, apexcustomer.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, apexcustomer.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, apexcustomer.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, apexcustomer.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, apexcustomer.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, apexcustomer.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, apexcustomer.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, apexcustomer.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, apexcustomer.DeletedAtNotNil())
	}
	if i.EventRaisedAt != nil {
		predicates = append(predicates, apexcustomer.EventRaisedAtEQ(*i.EventRaisedAt))
	}
	if i.EventRaisedAtNEQ != nil {
		predicates = append(predicates, apexcustomer.EventRaisedAtNEQ(*i.EventRaisedAtNEQ))
	}
	if len(i.EventRaisedAtIn) > 0 {
		predicates = append(predicates, apexcustomer.EventRaisedAtIn(i.EventRaisedAtIn...))
	}
	if len(i.EventRaisedAtNotIn) > 0 {
		predicates = append(predicates, apexcustomer.EventRaisedAtNotIn(i.EventRaisedAtNotIn...))
	}
	if i.EventRaisedAtGT != nil {
		predicates = append(predicates, apexcustomer.EventRaisedAtGT(*i.EventRaisedAtGT))
	}
	if i.EventRaisedAtGTE != nil {
		predicates = append(predicates, apexcustomer.EventRaisedAtGTE(*i.EventRaisedAtGTE))
	}
	if i.EventRaisedAtLT != nil {
		predicates = append(predicates, apexcustomer.EventRaisedAtLT(*i.EventRaisedAtLT))
	}
	if i.EventRaisedAtLTE != nil {
		predicates = append(predicates, apexcustomer.EventRaisedAtLTE(*i.EventRaisedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, apexcustomer.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, apexcustomer.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, apexcustomer.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, apexcustomer.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, apexcustomer.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, apexcustomer.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, apexcustomer.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, apexcustomer.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, apexcustomer.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, apexcustomer.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, apexcustomer.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, apexcustomer.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, apexcustomer.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, apexcustomer.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, apexcustomer.NameContainsFold(*i.NameContainsFold))
	}
	if i.GivenName != nil {
		predicates = append(predicates, apexcustomer.GivenNameEQ(*i.GivenName))
	}
	if i.GivenNameNEQ != nil {
		predicates = append(predicates, apexcustomer.GivenNameNEQ(*i.GivenNameNEQ))
	}
	if len(i.GivenNameIn) > 0 {
		predicates = append(predicates, apexcustomer.GivenNameIn(i.GivenNameIn...))
	}
	if len(i.GivenNameNotIn) > 0 {
		predicates = append(predicates, apexcustomer.GivenNameNotIn(i.GivenNameNotIn...))
	}
	if i.GivenNameGT != nil {
		predicates = append(predicates, apexcustomer.GivenNameGT(*i.GivenNameGT))
	}
	if i.GivenNameGTE != nil {
		predicates = append(predicates, apexcustomer.GivenNameGTE(*i.GivenNameGTE))
	}
	if i.GivenNameLT != nil {
		predicates = append(predicates, apexcustomer.GivenNameLT(*i.GivenNameLT))
	}
	if i.GivenNameLTE != nil {
		predicates = append(predicates, apexcustomer.GivenNameLTE(*i.GivenNameLTE))
	}
	if i.GivenNameContains != nil {
		predicates = append(predicates, apexcustomer.GivenNameContains(*i.GivenNameContains))
	}
	if i.GivenNameHasPrefix != nil {
		predicates = append(predicates, apexcustomer.GivenNameHasPrefix(*i.GivenNameHasPrefix))
	}
	if i.GivenNameHasSuffix != nil {
		predicates = append(predicates, apexcustomer.GivenNameHasSuffix(*i.GivenNameHasSuffix))
	}
	if i.GivenNameIsNil {
		predicates = append(predicates, apexcustomer.GivenNameIsNil())
	}
	if i.GivenNameNotNil {
		predicates = append(predicates, apexcustomer.GivenNameNotNil())
	}
	if i.GivenNameEqualFold != nil {
		predicates = append(predicates, apexcustomer.GivenNameEqualFold(*i.GivenNameEqualFold))
	}
	if i.GivenNameContainsFold != nil {
		predicates = append(predicates, apexcustomer.GivenNameContainsFold(*i.GivenNameContainsFold))
	}
	if i.MiddleName != nil {
		predicates = append(predicates, apexcustomer.MiddleNameEQ(*i.MiddleName))
	}
	if i.MiddleNameNEQ != nil {
		predicates = append(predicates, apexcustomer.MiddleNameNEQ(*i.MiddleNameNEQ))
	}
	if len(i.MiddleNameIn) > 0 {
		predicates = append(predicates, apexcustomer.MiddleNameIn(i.MiddleNameIn...))
	}
	if len(i.MiddleNameNotIn) > 0 {
		predicates = append(predicates, apexcustomer.MiddleNameNotIn(i.MiddleNameNotIn...))
	}
	if i.MiddleNameGT != nil {
		predicates = append(predicates, apexcustomer.MiddleNameGT(*i.MiddleNameGT))
	}
	if i.MiddleNameGTE != nil {
		predicates = append(predicates, apexcustomer.MiddleNameGTE(*i.MiddleNameGTE))
	}
	if i.MiddleNameLT != nil {
		predicates = append(predicates, apexcustomer.MiddleNameLT(*i.MiddleNameLT))
	}
	if i.MiddleNameLTE != nil {
		predicates = append(predicates, apexcustomer.MiddleNameLTE(*i.MiddleNameLTE))
	}
	if i.MiddleNameContains != nil {
		predicates = append(predicates, apexcustomer.MiddleNameContains(*i.MiddleNameContains))
	}
	if i.MiddleNameHasPrefix != nil {
		predicates = append(predicates, apexcustomer.MiddleNameHasPrefix(*i.MiddleNameHasPrefix))
	}
	if i.MiddleNameHasSuffix != nil {
		predicates = append(predicates, apexcustomer.MiddleNameHasSuffix(*i.MiddleNameHasSuffix))
	}
	if i.MiddleNameIsNil {
		predicates = append(predicates, apexcustomer.MiddleNameIsNil())
	}
	if i.MiddleNameNotNil {
		predicates = append(predicates, apexcustomer.MiddleNameNotNil())
	}
	if i.MiddleNameEqualFold != nil {
		predicates = append(predicates, apexcustomer.MiddleNameEqualFold(*i.MiddleNameEqualFold))
	}
	if i.MiddleNameContainsFold != nil {
		predicates = append(predicates, apexcustomer.MiddleNameContainsFold(*i.MiddleNameContainsFold))
	}
	if i.FamilyName != nil {
		predicates = append(predicates, apexcustomer.FamilyNameEQ(*i.FamilyName))
	}
	if i.FamilyNameNEQ != nil {
		predicates = append(predicates, apexcustomer.FamilyNameNEQ(*i.FamilyNameNEQ))
	}
	if len(i.FamilyNameIn) > 0 {
		predicates = append(predicates, apexcustomer.FamilyNameIn(i.FamilyNameIn...))
	}
	if len(i.FamilyNameNotIn) > 0 {
		predicates = append(predicates, apexcustomer.FamilyNameNotIn(i.FamilyNameNotIn...))
	}
	if i.FamilyNameGT != nil {
		predicates = append(predicates, apexcustomer.FamilyNameGT(*i.FamilyNameGT))
	}
	if i.FamilyNameGTE != nil {
		predicates = append(predicates, apexcustomer.FamilyNameGTE(*i.FamilyNameGTE))
	}
	if i.FamilyNameLT != nil {
		predicates = append(predicates, apexcustomer.FamilyNameLT(*i.FamilyNameLT))
	}
	if i.FamilyNameLTE != nil {
		predicates = append(predicates, apexcustomer.FamilyNameLTE(*i.FamilyNameLTE))
	}
	if i.FamilyNameContains != nil {
		predicates = append(predicates, apexcustomer.FamilyNameContains(*i.FamilyNameContains))
	}
	if i.FamilyNameHasPrefix != nil {
		predicates = append(predicates, apexcustomer.FamilyNameHasPrefix(*i.FamilyNameHasPrefix))
	}
	if i.FamilyNameHasSuffix != nil {
		predicates = append(predicates, apexcustomer.FamilyNameHasSuffix(*i.FamilyNameHasSuffix))
	}
	if i.FamilyNameIsNil {
		predicates = append(predicates, apexcustomer.FamilyNameIsNil())
	}
	if i.FamilyNameNotNil {
		predicates = append(predicates, apexcustomer.FamilyNameNotNil())
	}
	if i.FamilyNameEqualFold != nil {
		predicates = append(predicates, apexcustomer.FamilyNameEqualFold(*i.FamilyNameEqualFold))
	}
	if i.FamilyNameContainsFold != nil {
		predicates = append(predicates, apexcustomer.FamilyNameContainsFold(*i.FamilyNameContainsFold))
	}
	if i.PhotoURL != nil {
		predicates = append(predicates, apexcustomer.PhotoURLEQ(*i.PhotoURL))
	}
	if i.PhotoURLNEQ != nil {
		predicates = append(predicates, apexcustomer.PhotoURLNEQ(*i.PhotoURLNEQ))
	}
	if len(i.PhotoURLIn) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURLIn(i.PhotoURLIn...))
	}
	if len(i.PhotoURLNotIn) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURLNotIn(i.PhotoURLNotIn...))
	}
	if i.PhotoURLGT != nil {
		predicates = append(predicates, apexcustomer.PhotoURLGT(*i.PhotoURLGT))
	}
	if i.PhotoURLGTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURLGTE(*i.PhotoURLGTE))
	}
	if i.PhotoURLLT != nil {
		predicates = append(predicates, apexcustomer.PhotoURLLT(*i.PhotoURLLT))
	}
	if i.PhotoURLLTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURLLTE(*i.PhotoURLLTE))
	}
	if i.PhotoURLContains != nil {
		predicates = append(predicates, apexcustomer.PhotoURLContains(*i.PhotoURLContains))
	}
	if i.PhotoURLHasPrefix != nil {
		predicates = append(predicates, apexcustomer.PhotoURLHasPrefix(*i.PhotoURLHasPrefix))
	}
	if i.PhotoURLHasSuffix != nil {
		predicates = append(predicates, apexcustomer.PhotoURLHasSuffix(*i.PhotoURLHasSuffix))
	}
	if i.PhotoURLIsNil {
		predicates = append(predicates, apexcustomer.PhotoURLIsNil())
	}
	if i.PhotoURLNotNil {
		predicates = append(predicates, apexcustomer.PhotoURLNotNil())
	}
	if i.PhotoURLEqualFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURLEqualFold(*i.PhotoURLEqualFold))
	}
	if i.PhotoURLContainsFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURLContainsFold(*i.PhotoURLContainsFold))
	}
	if i.PhotoURL24 != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24EQ(*i.PhotoURL24))
	}
	if i.PhotoURL24NEQ != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24NEQ(*i.PhotoURL24NEQ))
	}
	if len(i.PhotoURL24In) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL24In(i.PhotoURL24In...))
	}
	if len(i.PhotoURL24NotIn) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL24NotIn(i.PhotoURL24NotIn...))
	}
	if i.PhotoURL24GT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24GT(*i.PhotoURL24GT))
	}
	if i.PhotoURL24GTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24GTE(*i.PhotoURL24GTE))
	}
	if i.PhotoURL24LT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24LT(*i.PhotoURL24LT))
	}
	if i.PhotoURL24LTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24LTE(*i.PhotoURL24LTE))
	}
	if i.PhotoURL24Contains != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24Contains(*i.PhotoURL24Contains))
	}
	if i.PhotoURL24HasPrefix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24HasPrefix(*i.PhotoURL24HasPrefix))
	}
	if i.PhotoURL24HasSuffix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24HasSuffix(*i.PhotoURL24HasSuffix))
	}
	if i.PhotoURL24IsNil {
		predicates = append(predicates, apexcustomer.PhotoURL24IsNil())
	}
	if i.PhotoURL24NotNil {
		predicates = append(predicates, apexcustomer.PhotoURL24NotNil())
	}
	if i.PhotoURL24EqualFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24EqualFold(*i.PhotoURL24EqualFold))
	}
	if i.PhotoURL24ContainsFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL24ContainsFold(*i.PhotoURL24ContainsFold))
	}
	if i.PhotoURL32 != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32EQ(*i.PhotoURL32))
	}
	if i.PhotoURL32NEQ != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32NEQ(*i.PhotoURL32NEQ))
	}
	if len(i.PhotoURL32In) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL32In(i.PhotoURL32In...))
	}
	if len(i.PhotoURL32NotIn) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL32NotIn(i.PhotoURL32NotIn...))
	}
	if i.PhotoURL32GT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32GT(*i.PhotoURL32GT))
	}
	if i.PhotoURL32GTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32GTE(*i.PhotoURL32GTE))
	}
	if i.PhotoURL32LT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32LT(*i.PhotoURL32LT))
	}
	if i.PhotoURL32LTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32LTE(*i.PhotoURL32LTE))
	}
	if i.PhotoURL32Contains != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32Contains(*i.PhotoURL32Contains))
	}
	if i.PhotoURL32HasPrefix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32HasPrefix(*i.PhotoURL32HasPrefix))
	}
	if i.PhotoURL32HasSuffix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32HasSuffix(*i.PhotoURL32HasSuffix))
	}
	if i.PhotoURL32IsNil {
		predicates = append(predicates, apexcustomer.PhotoURL32IsNil())
	}
	if i.PhotoURL32NotNil {
		predicates = append(predicates, apexcustomer.PhotoURL32NotNil())
	}
	if i.PhotoURL32EqualFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32EqualFold(*i.PhotoURL32EqualFold))
	}
	if i.PhotoURL32ContainsFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL32ContainsFold(*i.PhotoURL32ContainsFold))
	}
	if i.PhotoURL48 != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48EQ(*i.PhotoURL48))
	}
	if i.PhotoURL48NEQ != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48NEQ(*i.PhotoURL48NEQ))
	}
	if len(i.PhotoURL48In) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL48In(i.PhotoURL48In...))
	}
	if len(i.PhotoURL48NotIn) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL48NotIn(i.PhotoURL48NotIn...))
	}
	if i.PhotoURL48GT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48GT(*i.PhotoURL48GT))
	}
	if i.PhotoURL48GTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48GTE(*i.PhotoURL48GTE))
	}
	if i.PhotoURL48LT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48LT(*i.PhotoURL48LT))
	}
	if i.PhotoURL48LTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48LTE(*i.PhotoURL48LTE))
	}
	if i.PhotoURL48Contains != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48Contains(*i.PhotoURL48Contains))
	}
	if i.PhotoURL48HasPrefix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48HasPrefix(*i.PhotoURL48HasPrefix))
	}
	if i.PhotoURL48HasSuffix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48HasSuffix(*i.PhotoURL48HasSuffix))
	}
	if i.PhotoURL48IsNil {
		predicates = append(predicates, apexcustomer.PhotoURL48IsNil())
	}
	if i.PhotoURL48NotNil {
		predicates = append(predicates, apexcustomer.PhotoURL48NotNil())
	}
	if i.PhotoURL48EqualFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48EqualFold(*i.PhotoURL48EqualFold))
	}
	if i.PhotoURL48ContainsFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL48ContainsFold(*i.PhotoURL48ContainsFold))
	}
	if i.PhotoURL72 != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72EQ(*i.PhotoURL72))
	}
	if i.PhotoURL72NEQ != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72NEQ(*i.PhotoURL72NEQ))
	}
	if len(i.PhotoURL72In) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL72In(i.PhotoURL72In...))
	}
	if len(i.PhotoURL72NotIn) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL72NotIn(i.PhotoURL72NotIn...))
	}
	if i.PhotoURL72GT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72GT(*i.PhotoURL72GT))
	}
	if i.PhotoURL72GTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72GTE(*i.PhotoURL72GTE))
	}
	if i.PhotoURL72LT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72LT(*i.PhotoURL72LT))
	}
	if i.PhotoURL72LTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72LTE(*i.PhotoURL72LTE))
	}
	if i.PhotoURL72Contains != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72Contains(*i.PhotoURL72Contains))
	}
	if i.PhotoURL72HasPrefix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72HasPrefix(*i.PhotoURL72HasPrefix))
	}
	if i.PhotoURL72HasSuffix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72HasSuffix(*i.PhotoURL72HasSuffix))
	}
	if i.PhotoURL72IsNil {
		predicates = append(predicates, apexcustomer.PhotoURL72IsNil())
	}
	if i.PhotoURL72NotNil {
		predicates = append(predicates, apexcustomer.PhotoURL72NotNil())
	}
	if i.PhotoURL72EqualFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72EqualFold(*i.PhotoURL72EqualFold))
	}
	if i.PhotoURL72ContainsFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL72ContainsFold(*i.PhotoURL72ContainsFold))
	}
	if i.PhotoURL192 != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192EQ(*i.PhotoURL192))
	}
	if i.PhotoURL192NEQ != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192NEQ(*i.PhotoURL192NEQ))
	}
	if len(i.PhotoURL192In) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL192In(i.PhotoURL192In...))
	}
	if len(i.PhotoURL192NotIn) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL192NotIn(i.PhotoURL192NotIn...))
	}
	if i.PhotoURL192GT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192GT(*i.PhotoURL192GT))
	}
	if i.PhotoURL192GTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192GTE(*i.PhotoURL192GTE))
	}
	if i.PhotoURL192LT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192LT(*i.PhotoURL192LT))
	}
	if i.PhotoURL192LTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192LTE(*i.PhotoURL192LTE))
	}
	if i.PhotoURL192Contains != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192Contains(*i.PhotoURL192Contains))
	}
	if i.PhotoURL192HasPrefix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192HasPrefix(*i.PhotoURL192HasPrefix))
	}
	if i.PhotoURL192HasSuffix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192HasSuffix(*i.PhotoURL192HasSuffix))
	}
	if i.PhotoURL192IsNil {
		predicates = append(predicates, apexcustomer.PhotoURL192IsNil())
	}
	if i.PhotoURL192NotNil {
		predicates = append(predicates, apexcustomer.PhotoURL192NotNil())
	}
	if i.PhotoURL192EqualFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192EqualFold(*i.PhotoURL192EqualFold))
	}
	if i.PhotoURL192ContainsFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL192ContainsFold(*i.PhotoURL192ContainsFold))
	}
	if i.PhotoURL512 != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512EQ(*i.PhotoURL512))
	}
	if i.PhotoURL512NEQ != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512NEQ(*i.PhotoURL512NEQ))
	}
	if len(i.PhotoURL512In) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL512In(i.PhotoURL512In...))
	}
	if len(i.PhotoURL512NotIn) > 0 {
		predicates = append(predicates, apexcustomer.PhotoURL512NotIn(i.PhotoURL512NotIn...))
	}
	if i.PhotoURL512GT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512GT(*i.PhotoURL512GT))
	}
	if i.PhotoURL512GTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512GTE(*i.PhotoURL512GTE))
	}
	if i.PhotoURL512LT != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512LT(*i.PhotoURL512LT))
	}
	if i.PhotoURL512LTE != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512LTE(*i.PhotoURL512LTE))
	}
	if i.PhotoURL512Contains != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512Contains(*i.PhotoURL512Contains))
	}
	if i.PhotoURL512HasPrefix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512HasPrefix(*i.PhotoURL512HasPrefix))
	}
	if i.PhotoURL512HasSuffix != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512HasSuffix(*i.PhotoURL512HasSuffix))
	}
	if i.PhotoURL512IsNil {
		predicates = append(predicates, apexcustomer.PhotoURL512IsNil())
	}
	if i.PhotoURL512NotNil {
		predicates = append(predicates, apexcustomer.PhotoURL512NotNil())
	}
	if i.PhotoURL512EqualFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512EqualFold(*i.PhotoURL512EqualFold))
	}
	if i.PhotoURL512ContainsFold != nil {
		predicates = append(predicates, apexcustomer.PhotoURL512ContainsFold(*i.PhotoURL512ContainsFold))
	}

	if i.HasIdentities != nil {
		p := apexcustomer.HasIdentities()
		if !*i.HasIdentities {
			p = apexcustomer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIdentitiesWith) > 0 {
		with := make([]predicate.ApexCustomerIdentity, 0, len(i.HasIdentitiesWith))
		for _, w := range i.HasIdentitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIdentitiesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, apexcustomer.HasIdentitiesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyApexCustomerWhereInput
	case 1:
		return predicates[0], nil
	default:
		return apexcustomer.And(predicates...), nil
	}
}

// ApexCustomerIdentityWhereInput represents a where input for filtering ApexCustomerIdentity queries.
type ApexCustomerIdentityWhereInput struct {
	Predicates []predicate.ApexCustomerIdentity  `json:"-"`
	Not        *ApexCustomerIdentityWhereInput   `json:"not,omitempty"`
	Or         []*ApexCustomerIdentityWhereInput `json:"or,omitempty"`
	And        []*ApexCustomerIdentityWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "modified_at" field predicates.
	ModifiedAt       *time.Time  `json:"modifiedAt,omitempty"`
	ModifiedAtNEQ    *time.Time  `json:"modifiedAtNEQ,omitempty"`
	ModifiedAtIn     []time.Time `json:"modifiedAtIn,omitempty"`
	ModifiedAtNotIn  []time.Time `json:"modifiedAtNotIn,omitempty"`
	ModifiedAtGT     *time.Time  `json:"modifiedAtGT,omitempty"`
	ModifiedAtGTE    *time.Time  `json:"modifiedAtGTE,omitempty"`
	ModifiedAtLT     *time.Time  `json:"modifiedAtLT,omitempty"`
	ModifiedAtLTE    *time.Time  `json:"modifiedAtLTE,omitempty"`
	ModifiedAtIsNil  bool        `json:"modifiedAtIsNil,omitempty"`
	ModifiedAtNotNil bool        `json:"modifiedAtNotNil,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailIsNil        bool     `json:"emailIsNil,omitempty"`
	EmailNotNil       bool     `json:"emailNotNil,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "email_verified" field predicates.
	EmailVerified       *bool `json:"emailVerified,omitempty"`
	EmailVerifiedNEQ    *bool `json:"emailVerifiedNEQ,omitempty"`
	EmailVerifiedIsNil  bool  `json:"emailVerifiedIsNil,omitempty"`
	EmailVerifiedNotNil bool  `json:"emailVerifiedNotNil,omitempty"`

	// "customer" edge predicates.
	HasCustomer     *bool                     `json:"hasCustomer,omitempty"`
	HasCustomerWith []*ApexCustomerWhereInput `json:"hasCustomerWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ApexCustomerIdentityWhereInput) AddPredicates(predicates ...predicate.ApexCustomerIdentity) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ApexCustomerIdentityWhereInput filter on the ApexCustomerIdentityQuery builder.
func (i *ApexCustomerIdentityWhereInput) Filter(q *ApexCustomerIdentityQuery) (*ApexCustomerIdentityQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyApexCustomerIdentityWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyApexCustomerIdentityWhereInput is returned in case the ApexCustomerIdentityWhereInput is empty.
var ErrEmptyApexCustomerIdentityWhereInput = errors.New("entities: empty predicate ApexCustomerIdentityWhereInput")

// P returns a predicate for filtering apexcustomeridentities.
// An error is returned if the input is empty or invalid.
func (i *ApexCustomerIdentityWhereInput) P() (predicate.ApexCustomerIdentity, error) {
	var predicates []predicate.ApexCustomerIdentity
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, apexcustomeridentity.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ApexCustomerIdentity, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, apexcustomeridentity.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ApexCustomerIdentity, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, apexcustomeridentity.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, apexcustomeridentity.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, apexcustomeridentity.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, apexcustomeridentity.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, apexcustomeridentity.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, apexcustomeridentity.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, apexcustomeridentity.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, apexcustomeridentity.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, apexcustomeridentity.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, apexcustomeridentity.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, apexcustomeridentity.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, apexcustomeridentity.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, apexcustomeridentity.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, apexcustomeridentity.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, apexcustomeridentity.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, apexcustomeridentity.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, apexcustomeridentity.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, apexcustomeridentity.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, apexcustomeridentity.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.ModifiedAt != nil {
		predicates = append(predicates, apexcustomeridentity.ModifiedAtEQ(*i.ModifiedAt))
	}
	if i.ModifiedAtNEQ != nil {
		predicates = append(predicates, apexcustomeridentity.ModifiedAtNEQ(*i.ModifiedAtNEQ))
	}
	if len(i.ModifiedAtIn) > 0 {
		predicates = append(predicates, apexcustomeridentity.ModifiedAtIn(i.ModifiedAtIn...))
	}
	if len(i.ModifiedAtNotIn) > 0 {
		predicates = append(predicates, apexcustomeridentity.ModifiedAtNotIn(i.ModifiedAtNotIn...))
	}
	if i.ModifiedAtGT != nil {
		predicates = append(predicates, apexcustomeridentity.ModifiedAtGT(*i.ModifiedAtGT))
	}
	if i.ModifiedAtGTE != nil {
		predicates = append(predicates, apexcustomeridentity.ModifiedAtGTE(*i.ModifiedAtGTE))
	}
	if i.ModifiedAtLT != nil {
		predicates = append(predicates, apexcustomeridentity.ModifiedAtLT(*i.ModifiedAtLT))
	}
	if i.ModifiedAtLTE != nil {
		predicates = append(predicates, apexcustomeridentity.ModifiedAtLTE(*i.ModifiedAtLTE))
	}
	if i.ModifiedAtIsNil {
		predicates = append(predicates, apexcustomeridentity.ModifiedAtIsNil())
	}
	if i.ModifiedAtNotNil {
		predicates = append(predicates, apexcustomeridentity.ModifiedAtNotNil())
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, apexcustomeridentity.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, apexcustomeridentity.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, apexcustomeridentity.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, apexcustomeridentity.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, apexcustomeridentity.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, apexcustomeridentity.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, apexcustomeridentity.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, apexcustomeridentity.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, apexcustomeridentity.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, apexcustomeridentity.DeletedAtNotNil())
	}
	if i.Email != nil {
		predicates = append(predicates, apexcustomeridentity.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, apexcustomeridentity.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, apexcustomeridentity.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, apexcustomeridentity.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, apexcustomeridentity.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, apexcustomeridentity.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, apexcustomeridentity.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, apexcustomeridentity.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, apexcustomeridentity.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, apexcustomeridentity.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, apexcustomeridentity.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailIsNil {
		predicates = append(predicates, apexcustomeridentity.EmailIsNil())
	}
	if i.EmailNotNil {
		predicates = append(predicates, apexcustomeridentity.EmailNotNil())
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, apexcustomeridentity.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, apexcustomeridentity.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.EmailVerified != nil {
		predicates = append(predicates, apexcustomeridentity.EmailVerifiedEQ(*i.EmailVerified))
	}
	if i.EmailVerifiedNEQ != nil {
		predicates = append(predicates, apexcustomeridentity.EmailVerifiedNEQ(*i.EmailVerifiedNEQ))
	}
	if i.EmailVerifiedIsNil {
		predicates = append(predicates, apexcustomeridentity.EmailVerifiedIsNil())
	}
	if i.EmailVerifiedNotNil {
		predicates = append(predicates, apexcustomeridentity.EmailVerifiedNotNil())
	}

	if i.HasCustomer != nil {
		p := apexcustomeridentity.HasCustomer()
		if !*i.HasCustomer {
			p = apexcustomeridentity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCustomerWith) > 0 {
		with := make([]predicate.ApexCustomer, 0, len(i.HasCustomerWith))
		for _, w := range i.HasCustomerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCustomerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, apexcustomeridentity.HasCustomerWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyApexCustomerIdentityWhereInput
	case 1:
		return predicates[0], nil
	default:
		return apexcustomeridentity.And(predicates...), nil
	}
}
