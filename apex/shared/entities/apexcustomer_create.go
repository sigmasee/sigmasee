// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomer"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomeridentity"
)

// ApexCustomerCreate is the builder for creating a ApexCustomer entity.
type ApexCustomerCreate struct {
	config
	mutation *ApexCustomerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (acc *ApexCustomerCreate) SetCreatedAt(t time.Time) *ApexCustomerCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetModifiedAt sets the "modified_at" field.
func (acc *ApexCustomerCreate) SetModifiedAt(t time.Time) *ApexCustomerCreate {
	acc.mutation.SetModifiedAt(t)
	return acc
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillableModifiedAt(t *time.Time) *ApexCustomerCreate {
	if t != nil {
		acc.SetModifiedAt(*t)
	}
	return acc
}

// SetDeletedAt sets the "deleted_at" field.
func (acc *ApexCustomerCreate) SetDeletedAt(t time.Time) *ApexCustomerCreate {
	acc.mutation.SetDeletedAt(t)
	return acc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillableDeletedAt(t *time.Time) *ApexCustomerCreate {
	if t != nil {
		acc.SetDeletedAt(*t)
	}
	return acc
}

// SetEventRaisedAt sets the "event_raised_at" field.
func (acc *ApexCustomerCreate) SetEventRaisedAt(t time.Time) *ApexCustomerCreate {
	acc.mutation.SetEventRaisedAt(t)
	return acc
}

// SetName sets the "name" field.
func (acc *ApexCustomerCreate) SetName(s string) *ApexCustomerCreate {
	acc.mutation.SetName(s)
	return acc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillableName(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetName(*s)
	}
	return acc
}

// SetGivenName sets the "given_name" field.
func (acc *ApexCustomerCreate) SetGivenName(s string) *ApexCustomerCreate {
	acc.mutation.SetGivenName(s)
	return acc
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillableGivenName(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetGivenName(*s)
	}
	return acc
}

// SetMiddleName sets the "middle_name" field.
func (acc *ApexCustomerCreate) SetMiddleName(s string) *ApexCustomerCreate {
	acc.mutation.SetMiddleName(s)
	return acc
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillableMiddleName(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetMiddleName(*s)
	}
	return acc
}

// SetFamilyName sets the "family_name" field.
func (acc *ApexCustomerCreate) SetFamilyName(s string) *ApexCustomerCreate {
	acc.mutation.SetFamilyName(s)
	return acc
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillableFamilyName(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetFamilyName(*s)
	}
	return acc
}

// SetPhotoURL sets the "photo_url" field.
func (acc *ApexCustomerCreate) SetPhotoURL(s string) *ApexCustomerCreate {
	acc.mutation.SetPhotoURL(s)
	return acc
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillablePhotoURL(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetPhotoURL(*s)
	}
	return acc
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (acc *ApexCustomerCreate) SetPhotoURL24(s string) *ApexCustomerCreate {
	acc.mutation.SetPhotoURL24(s)
	return acc
}

// SetNillablePhotoURL24 sets the "photo_url_24" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillablePhotoURL24(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetPhotoURL24(*s)
	}
	return acc
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (acc *ApexCustomerCreate) SetPhotoURL32(s string) *ApexCustomerCreate {
	acc.mutation.SetPhotoURL32(s)
	return acc
}

// SetNillablePhotoURL32 sets the "photo_url_32" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillablePhotoURL32(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetPhotoURL32(*s)
	}
	return acc
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (acc *ApexCustomerCreate) SetPhotoURL48(s string) *ApexCustomerCreate {
	acc.mutation.SetPhotoURL48(s)
	return acc
}

// SetNillablePhotoURL48 sets the "photo_url_48" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillablePhotoURL48(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetPhotoURL48(*s)
	}
	return acc
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (acc *ApexCustomerCreate) SetPhotoURL72(s string) *ApexCustomerCreate {
	acc.mutation.SetPhotoURL72(s)
	return acc
}

// SetNillablePhotoURL72 sets the "photo_url_72" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillablePhotoURL72(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetPhotoURL72(*s)
	}
	return acc
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (acc *ApexCustomerCreate) SetPhotoURL192(s string) *ApexCustomerCreate {
	acc.mutation.SetPhotoURL192(s)
	return acc
}

// SetNillablePhotoURL192 sets the "photo_url_192" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillablePhotoURL192(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetPhotoURL192(*s)
	}
	return acc
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (acc *ApexCustomerCreate) SetPhotoURL512(s string) *ApexCustomerCreate {
	acc.mutation.SetPhotoURL512(s)
	return acc
}

// SetNillablePhotoURL512 sets the "photo_url_512" field if the given value is not nil.
func (acc *ApexCustomerCreate) SetNillablePhotoURL512(s *string) *ApexCustomerCreate {
	if s != nil {
		acc.SetPhotoURL512(*s)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *ApexCustomerCreate) SetID(s string) *ApexCustomerCreate {
	acc.mutation.SetID(s)
	return acc
}

// AddIdentityIDs adds the "identities" edge to the ApexCustomerIdentity entity by IDs.
func (acc *ApexCustomerCreate) AddIdentityIDs(ids ...string) *ApexCustomerCreate {
	acc.mutation.AddIdentityIDs(ids...)
	return acc
}

// AddIdentities adds the "identities" edges to the ApexCustomerIdentity entity.
func (acc *ApexCustomerCreate) AddIdentities(a ...*ApexCustomerIdentity) *ApexCustomerCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acc.AddIdentityIDs(ids...)
}

// Mutation returns the ApexCustomerMutation object of the builder.
func (acc *ApexCustomerCreate) Mutation() *ApexCustomerMutation {
	return acc.mutation
}

// Save creates the ApexCustomer in the database.
func (acc *ApexCustomerCreate) Save(ctx context.Context) (*ApexCustomer, error) {
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *ApexCustomerCreate) SaveX(ctx context.Context) *ApexCustomer {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *ApexCustomerCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *ApexCustomerCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *ApexCustomerCreate) check() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entities: missing required field "ApexCustomer.created_at"`)}
	}
	if _, ok := acc.mutation.EventRaisedAt(); !ok {
		return &ValidationError{Name: "event_raised_at", err: errors.New(`entities: missing required field "ApexCustomer.event_raised_at"`)}
	}
	return nil
}

func (acc *ApexCustomerCreate) sqlSave(ctx context.Context) (*ApexCustomer, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ApexCustomer.ID type: %T", _spec.ID.Value)
		}
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *ApexCustomerCreate) createSpec() (*ApexCustomer, *sqlgraph.CreateSpec) {
	var (
		_node = &ApexCustomer{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(apexcustomer.Table, sqlgraph.NewFieldSpec(apexcustomer.FieldID, field.TypeString))
	)
	_spec.Schema = acc.schemaConfig.ApexCustomer
	_spec.OnConflict = acc.conflict
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.SetField(apexcustomer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.ModifiedAt(); ok {
		_spec.SetField(apexcustomer.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	if value, ok := acc.mutation.DeletedAt(); ok {
		_spec.SetField(apexcustomer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := acc.mutation.EventRaisedAt(); ok {
		_spec.SetField(apexcustomer.FieldEventRaisedAt, field.TypeTime, value)
		_node.EventRaisedAt = value
	}
	if value, ok := acc.mutation.Name(); ok {
		_spec.SetField(apexcustomer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := acc.mutation.GivenName(); ok {
		_spec.SetField(apexcustomer.FieldGivenName, field.TypeString, value)
		_node.GivenName = value
	}
	if value, ok := acc.mutation.MiddleName(); ok {
		_spec.SetField(apexcustomer.FieldMiddleName, field.TypeString, value)
		_node.MiddleName = value
	}
	if value, ok := acc.mutation.FamilyName(); ok {
		_spec.SetField(apexcustomer.FieldFamilyName, field.TypeString, value)
		_node.FamilyName = value
	}
	if value, ok := acc.mutation.PhotoURL(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if value, ok := acc.mutation.PhotoURL24(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL24, field.TypeString, value)
		_node.PhotoURL24 = value
	}
	if value, ok := acc.mutation.PhotoURL32(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL32, field.TypeString, value)
		_node.PhotoURL32 = value
	}
	if value, ok := acc.mutation.PhotoURL48(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL48, field.TypeString, value)
		_node.PhotoURL48 = value
	}
	if value, ok := acc.mutation.PhotoURL72(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL72, field.TypeString, value)
		_node.PhotoURL72 = value
	}
	if value, ok := acc.mutation.PhotoURL192(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL192, field.TypeString, value)
		_node.PhotoURL192 = value
	}
	if value, ok := acc.mutation.PhotoURL512(); ok {
		_spec.SetField(apexcustomer.FieldPhotoURL512, field.TypeString, value)
		_node.PhotoURL512 = value
	}
	if nodes := acc.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apexcustomer.IdentitiesTable,
			Columns: []string{apexcustomer.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apexcustomeridentity.FieldID, field.TypeString),
			},
		}
		edge.Schema = acc.schemaConfig.ApexCustomerIdentity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApexCustomer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApexCustomerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acc *ApexCustomerCreate) OnConflict(opts ...sql.ConflictOption) *ApexCustomerUpsertOne {
	acc.conflict = opts
	return &ApexCustomerUpsertOne{
		create: acc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApexCustomer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acc *ApexCustomerCreate) OnConflictColumns(columns ...string) *ApexCustomerUpsertOne {
	acc.conflict = append(acc.conflict, sql.ConflictColumns(columns...))
	return &ApexCustomerUpsertOne{
		create: acc,
	}
}

type (
	// ApexCustomerUpsertOne is the builder for "upsert"-ing
	//  one ApexCustomer node.
	ApexCustomerUpsertOne struct {
		create *ApexCustomerCreate
	}

	// ApexCustomerUpsert is the "OnConflict" setter.
	ApexCustomerUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ApexCustomerUpsert) SetCreatedAt(v time.Time) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdateCreatedAt() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldCreatedAt)
	return u
}

// SetModifiedAt sets the "modified_at" field.
func (u *ApexCustomerUpsert) SetModifiedAt(v time.Time) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldModifiedAt, v)
	return u
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdateModifiedAt() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldModifiedAt)
	return u
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *ApexCustomerUpsert) ClearModifiedAt() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldModifiedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApexCustomerUpsert) SetDeletedAt(v time.Time) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdateDeletedAt() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApexCustomerUpsert) ClearDeletedAt() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldDeletedAt)
	return u
}

// SetEventRaisedAt sets the "event_raised_at" field.
func (u *ApexCustomerUpsert) SetEventRaisedAt(v time.Time) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldEventRaisedAt, v)
	return u
}

// UpdateEventRaisedAt sets the "event_raised_at" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdateEventRaisedAt() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldEventRaisedAt)
	return u
}

// SetName sets the "name" field.
func (u *ApexCustomerUpsert) SetName(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdateName() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *ApexCustomerUpsert) ClearName() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldName)
	return u
}

// SetGivenName sets the "given_name" field.
func (u *ApexCustomerUpsert) SetGivenName(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldGivenName, v)
	return u
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdateGivenName() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldGivenName)
	return u
}

// ClearGivenName clears the value of the "given_name" field.
func (u *ApexCustomerUpsert) ClearGivenName() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldGivenName)
	return u
}

// SetMiddleName sets the "middle_name" field.
func (u *ApexCustomerUpsert) SetMiddleName(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldMiddleName, v)
	return u
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdateMiddleName() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldMiddleName)
	return u
}

// ClearMiddleName clears the value of the "middle_name" field.
func (u *ApexCustomerUpsert) ClearMiddleName() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldMiddleName)
	return u
}

// SetFamilyName sets the "family_name" field.
func (u *ApexCustomerUpsert) SetFamilyName(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldFamilyName, v)
	return u
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdateFamilyName() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldFamilyName)
	return u
}

// ClearFamilyName clears the value of the "family_name" field.
func (u *ApexCustomerUpsert) ClearFamilyName() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldFamilyName)
	return u
}

// SetPhotoURL sets the "photo_url" field.
func (u *ApexCustomerUpsert) SetPhotoURL(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldPhotoURL, v)
	return u
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdatePhotoURL() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldPhotoURL)
	return u
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (u *ApexCustomerUpsert) ClearPhotoURL() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldPhotoURL)
	return u
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (u *ApexCustomerUpsert) SetPhotoURL24(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldPhotoURL24, v)
	return u
}

// UpdatePhotoURL24 sets the "photo_url_24" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdatePhotoURL24() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldPhotoURL24)
	return u
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (u *ApexCustomerUpsert) ClearPhotoURL24() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldPhotoURL24)
	return u
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (u *ApexCustomerUpsert) SetPhotoURL32(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldPhotoURL32, v)
	return u
}

// UpdatePhotoURL32 sets the "photo_url_32" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdatePhotoURL32() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldPhotoURL32)
	return u
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (u *ApexCustomerUpsert) ClearPhotoURL32() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldPhotoURL32)
	return u
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (u *ApexCustomerUpsert) SetPhotoURL48(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldPhotoURL48, v)
	return u
}

// UpdatePhotoURL48 sets the "photo_url_48" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdatePhotoURL48() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldPhotoURL48)
	return u
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (u *ApexCustomerUpsert) ClearPhotoURL48() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldPhotoURL48)
	return u
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (u *ApexCustomerUpsert) SetPhotoURL72(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldPhotoURL72, v)
	return u
}

// UpdatePhotoURL72 sets the "photo_url_72" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdatePhotoURL72() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldPhotoURL72)
	return u
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (u *ApexCustomerUpsert) ClearPhotoURL72() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldPhotoURL72)
	return u
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (u *ApexCustomerUpsert) SetPhotoURL192(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldPhotoURL192, v)
	return u
}

// UpdatePhotoURL192 sets the "photo_url_192" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdatePhotoURL192() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldPhotoURL192)
	return u
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (u *ApexCustomerUpsert) ClearPhotoURL192() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldPhotoURL192)
	return u
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (u *ApexCustomerUpsert) SetPhotoURL512(v string) *ApexCustomerUpsert {
	u.Set(apexcustomer.FieldPhotoURL512, v)
	return u
}

// UpdatePhotoURL512 sets the "photo_url_512" field to the value that was provided on create.
func (u *ApexCustomerUpsert) UpdatePhotoURL512() *ApexCustomerUpsert {
	u.SetExcluded(apexcustomer.FieldPhotoURL512)
	return u
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (u *ApexCustomerUpsert) ClearPhotoURL512() *ApexCustomerUpsert {
	u.SetNull(apexcustomer.FieldPhotoURL512)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ApexCustomer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apexcustomer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApexCustomerUpsertOne) UpdateNewValues() *ApexCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apexcustomer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApexCustomer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ApexCustomerUpsertOne) Ignore() *ApexCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApexCustomerUpsertOne) DoNothing() *ApexCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApexCustomerCreate.OnConflict
// documentation for more info.
func (u *ApexCustomerUpsertOne) Update(set func(*ApexCustomerUpsert)) *ApexCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApexCustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ApexCustomerUpsertOne) SetCreatedAt(v time.Time) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdateCreatedAt() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *ApexCustomerUpsertOne) SetModifiedAt(v time.Time) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdateModifiedAt() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateModifiedAt()
	})
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *ApexCustomerUpsertOne) ClearModifiedAt() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearModifiedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApexCustomerUpsertOne) SetDeletedAt(v time.Time) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdateDeletedAt() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApexCustomerUpsertOne) ClearDeletedAt() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetEventRaisedAt sets the "event_raised_at" field.
func (u *ApexCustomerUpsertOne) SetEventRaisedAt(v time.Time) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetEventRaisedAt(v)
	})
}

// UpdateEventRaisedAt sets the "event_raised_at" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdateEventRaisedAt() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateEventRaisedAt()
	})
}

// SetName sets the "name" field.
func (u *ApexCustomerUpsertOne) SetName(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdateName() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ApexCustomerUpsertOne) ClearName() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearName()
	})
}

// SetGivenName sets the "given_name" field.
func (u *ApexCustomerUpsertOne) SetGivenName(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetGivenName(v)
	})
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdateGivenName() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateGivenName()
	})
}

// ClearGivenName clears the value of the "given_name" field.
func (u *ApexCustomerUpsertOne) ClearGivenName() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearGivenName()
	})
}

// SetMiddleName sets the "middle_name" field.
func (u *ApexCustomerUpsertOne) SetMiddleName(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetMiddleName(v)
	})
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdateMiddleName() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateMiddleName()
	})
}

// ClearMiddleName clears the value of the "middle_name" field.
func (u *ApexCustomerUpsertOne) ClearMiddleName() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearMiddleName()
	})
}

// SetFamilyName sets the "family_name" field.
func (u *ApexCustomerUpsertOne) SetFamilyName(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetFamilyName(v)
	})
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdateFamilyName() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateFamilyName()
	})
}

// ClearFamilyName clears the value of the "family_name" field.
func (u *ApexCustomerUpsertOne) ClearFamilyName() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearFamilyName()
	})
}

// SetPhotoURL sets the "photo_url" field.
func (u *ApexCustomerUpsertOne) SetPhotoURL(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL(v)
	})
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdatePhotoURL() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL()
	})
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (u *ApexCustomerUpsertOne) ClearPhotoURL() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL()
	})
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (u *ApexCustomerUpsertOne) SetPhotoURL24(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL24(v)
	})
}

// UpdatePhotoURL24 sets the "photo_url_24" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdatePhotoURL24() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL24()
	})
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (u *ApexCustomerUpsertOne) ClearPhotoURL24() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL24()
	})
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (u *ApexCustomerUpsertOne) SetPhotoURL32(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL32(v)
	})
}

// UpdatePhotoURL32 sets the "photo_url_32" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdatePhotoURL32() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL32()
	})
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (u *ApexCustomerUpsertOne) ClearPhotoURL32() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL32()
	})
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (u *ApexCustomerUpsertOne) SetPhotoURL48(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL48(v)
	})
}

// UpdatePhotoURL48 sets the "photo_url_48" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdatePhotoURL48() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL48()
	})
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (u *ApexCustomerUpsertOne) ClearPhotoURL48() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL48()
	})
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (u *ApexCustomerUpsertOne) SetPhotoURL72(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL72(v)
	})
}

// UpdatePhotoURL72 sets the "photo_url_72" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdatePhotoURL72() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL72()
	})
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (u *ApexCustomerUpsertOne) ClearPhotoURL72() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL72()
	})
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (u *ApexCustomerUpsertOne) SetPhotoURL192(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL192(v)
	})
}

// UpdatePhotoURL192 sets the "photo_url_192" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdatePhotoURL192() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL192()
	})
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (u *ApexCustomerUpsertOne) ClearPhotoURL192() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL192()
	})
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (u *ApexCustomerUpsertOne) SetPhotoURL512(v string) *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL512(v)
	})
}

// UpdatePhotoURL512 sets the "photo_url_512" field to the value that was provided on create.
func (u *ApexCustomerUpsertOne) UpdatePhotoURL512() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL512()
	})
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (u *ApexCustomerUpsertOne) ClearPhotoURL512() *ApexCustomerUpsertOne {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL512()
	})
}

// Exec executes the query.
func (u *ApexCustomerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for ApexCustomerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApexCustomerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ApexCustomerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: ApexCustomerUpsertOne.ID is not supported by MySQL driver. Use ApexCustomerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ApexCustomerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ApexCustomerCreateBulk is the builder for creating many ApexCustomer entities in bulk.
type ApexCustomerCreateBulk struct {
	config
	err      error
	builders []*ApexCustomerCreate
	conflict []sql.ConflictOption
}

// Save creates the ApexCustomer entities in the database.
func (accb *ApexCustomerCreateBulk) Save(ctx context.Context) ([]*ApexCustomer, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*ApexCustomer, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApexCustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = accb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *ApexCustomerCreateBulk) SaveX(ctx context.Context) []*ApexCustomer {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *ApexCustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *ApexCustomerCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApexCustomer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApexCustomerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (accb *ApexCustomerCreateBulk) OnConflict(opts ...sql.ConflictOption) *ApexCustomerUpsertBulk {
	accb.conflict = opts
	return &ApexCustomerUpsertBulk{
		create: accb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApexCustomer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (accb *ApexCustomerCreateBulk) OnConflictColumns(columns ...string) *ApexCustomerUpsertBulk {
	accb.conflict = append(accb.conflict, sql.ConflictColumns(columns...))
	return &ApexCustomerUpsertBulk{
		create: accb,
	}
}

// ApexCustomerUpsertBulk is the builder for "upsert"-ing
// a bulk of ApexCustomer nodes.
type ApexCustomerUpsertBulk struct {
	create *ApexCustomerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ApexCustomer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apexcustomer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApexCustomerUpsertBulk) UpdateNewValues() *ApexCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apexcustomer.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApexCustomer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ApexCustomerUpsertBulk) Ignore() *ApexCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApexCustomerUpsertBulk) DoNothing() *ApexCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApexCustomerCreateBulk.OnConflict
// documentation for more info.
func (u *ApexCustomerUpsertBulk) Update(set func(*ApexCustomerUpsert)) *ApexCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApexCustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ApexCustomerUpsertBulk) SetCreatedAt(v time.Time) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdateCreatedAt() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *ApexCustomerUpsertBulk) SetModifiedAt(v time.Time) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdateModifiedAt() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateModifiedAt()
	})
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *ApexCustomerUpsertBulk) ClearModifiedAt() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearModifiedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApexCustomerUpsertBulk) SetDeletedAt(v time.Time) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdateDeletedAt() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApexCustomerUpsertBulk) ClearDeletedAt() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetEventRaisedAt sets the "event_raised_at" field.
func (u *ApexCustomerUpsertBulk) SetEventRaisedAt(v time.Time) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetEventRaisedAt(v)
	})
}

// UpdateEventRaisedAt sets the "event_raised_at" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdateEventRaisedAt() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateEventRaisedAt()
	})
}

// SetName sets the "name" field.
func (u *ApexCustomerUpsertBulk) SetName(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdateName() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ApexCustomerUpsertBulk) ClearName() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearName()
	})
}

// SetGivenName sets the "given_name" field.
func (u *ApexCustomerUpsertBulk) SetGivenName(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetGivenName(v)
	})
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdateGivenName() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateGivenName()
	})
}

// ClearGivenName clears the value of the "given_name" field.
func (u *ApexCustomerUpsertBulk) ClearGivenName() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearGivenName()
	})
}

// SetMiddleName sets the "middle_name" field.
func (u *ApexCustomerUpsertBulk) SetMiddleName(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetMiddleName(v)
	})
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdateMiddleName() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateMiddleName()
	})
}

// ClearMiddleName clears the value of the "middle_name" field.
func (u *ApexCustomerUpsertBulk) ClearMiddleName() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearMiddleName()
	})
}

// SetFamilyName sets the "family_name" field.
func (u *ApexCustomerUpsertBulk) SetFamilyName(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetFamilyName(v)
	})
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdateFamilyName() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdateFamilyName()
	})
}

// ClearFamilyName clears the value of the "family_name" field.
func (u *ApexCustomerUpsertBulk) ClearFamilyName() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearFamilyName()
	})
}

// SetPhotoURL sets the "photo_url" field.
func (u *ApexCustomerUpsertBulk) SetPhotoURL(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL(v)
	})
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdatePhotoURL() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL()
	})
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (u *ApexCustomerUpsertBulk) ClearPhotoURL() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL()
	})
}

// SetPhotoURL24 sets the "photo_url_24" field.
func (u *ApexCustomerUpsertBulk) SetPhotoURL24(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL24(v)
	})
}

// UpdatePhotoURL24 sets the "photo_url_24" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdatePhotoURL24() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL24()
	})
}

// ClearPhotoURL24 clears the value of the "photo_url_24" field.
func (u *ApexCustomerUpsertBulk) ClearPhotoURL24() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL24()
	})
}

// SetPhotoURL32 sets the "photo_url_32" field.
func (u *ApexCustomerUpsertBulk) SetPhotoURL32(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL32(v)
	})
}

// UpdatePhotoURL32 sets the "photo_url_32" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdatePhotoURL32() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL32()
	})
}

// ClearPhotoURL32 clears the value of the "photo_url_32" field.
func (u *ApexCustomerUpsertBulk) ClearPhotoURL32() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL32()
	})
}

// SetPhotoURL48 sets the "photo_url_48" field.
func (u *ApexCustomerUpsertBulk) SetPhotoURL48(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL48(v)
	})
}

// UpdatePhotoURL48 sets the "photo_url_48" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdatePhotoURL48() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL48()
	})
}

// ClearPhotoURL48 clears the value of the "photo_url_48" field.
func (u *ApexCustomerUpsertBulk) ClearPhotoURL48() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL48()
	})
}

// SetPhotoURL72 sets the "photo_url_72" field.
func (u *ApexCustomerUpsertBulk) SetPhotoURL72(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL72(v)
	})
}

// UpdatePhotoURL72 sets the "photo_url_72" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdatePhotoURL72() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL72()
	})
}

// ClearPhotoURL72 clears the value of the "photo_url_72" field.
func (u *ApexCustomerUpsertBulk) ClearPhotoURL72() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL72()
	})
}

// SetPhotoURL192 sets the "photo_url_192" field.
func (u *ApexCustomerUpsertBulk) SetPhotoURL192(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL192(v)
	})
}

// UpdatePhotoURL192 sets the "photo_url_192" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdatePhotoURL192() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL192()
	})
}

// ClearPhotoURL192 clears the value of the "photo_url_192" field.
func (u *ApexCustomerUpsertBulk) ClearPhotoURL192() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL192()
	})
}

// SetPhotoURL512 sets the "photo_url_512" field.
func (u *ApexCustomerUpsertBulk) SetPhotoURL512(v string) *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.SetPhotoURL512(v)
	})
}

// UpdatePhotoURL512 sets the "photo_url_512" field to the value that was provided on create.
func (u *ApexCustomerUpsertBulk) UpdatePhotoURL512() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.UpdatePhotoURL512()
	})
}

// ClearPhotoURL512 clears the value of the "photo_url_512" field.
func (u *ApexCustomerUpsertBulk) ClearPhotoURL512() *ApexCustomerUpsertBulk {
	return u.Update(func(s *ApexCustomerUpsert) {
		s.ClearPhotoURL512()
	})
}

// Exec executes the query.
func (u *ApexCustomerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the ApexCustomerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for ApexCustomerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApexCustomerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
