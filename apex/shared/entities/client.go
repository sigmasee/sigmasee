// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/sigmasee/sigmasee/apex/shared/entities/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomer"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomeridentity"

	stdsql "database/sql"

	"github.com/sigmasee/sigmasee/apex/shared/entities/internal"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ApexCustomer is the client for interacting with the ApexCustomer builders.
	ApexCustomer *ApexCustomerClient
	// ApexCustomerIdentity is the client for interacting with the ApexCustomerIdentity builders.
	ApexCustomerIdentity *ApexCustomerIdentityClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ApexCustomer = NewApexCustomerClient(c.config)
	c.ApexCustomerIdentity = NewApexCustomerIdentityClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
		// schemaConfig contains alternative names for all tables.
		schemaConfig SchemaConfig
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("entities: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("entities: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		ApexCustomer:         NewApexCustomerClient(cfg),
		ApexCustomerIdentity: NewApexCustomerIdentityClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		ApexCustomer:         NewApexCustomerClient(cfg),
		ApexCustomerIdentity: NewApexCustomerIdentityClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ApexCustomer.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ApexCustomer.Use(hooks...)
	c.ApexCustomerIdentity.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.ApexCustomer.Intercept(interceptors...)
	c.ApexCustomerIdentity.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApexCustomerMutation:
		return c.ApexCustomer.mutate(ctx, m)
	case *ApexCustomerIdentityMutation:
		return c.ApexCustomerIdentity.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("entities: unknown mutation type %T", m)
	}
}

// ApexCustomerClient is a client for the ApexCustomer schema.
type ApexCustomerClient struct {
	config
}

// NewApexCustomerClient returns a client for the ApexCustomer from the given config.
func NewApexCustomerClient(c config) *ApexCustomerClient {
	return &ApexCustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apexcustomer.Hooks(f(g(h())))`.
func (c *ApexCustomerClient) Use(hooks ...Hook) {
	c.hooks.ApexCustomer = append(c.hooks.ApexCustomer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apexcustomer.Intercept(f(g(h())))`.
func (c *ApexCustomerClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApexCustomer = append(c.inters.ApexCustomer, interceptors...)
}

// Create returns a builder for creating a ApexCustomer entity.
func (c *ApexCustomerClient) Create() *ApexCustomerCreate {
	mutation := newApexCustomerMutation(c.config, OpCreate)
	return &ApexCustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApexCustomer entities.
func (c *ApexCustomerClient) CreateBulk(builders ...*ApexCustomerCreate) *ApexCustomerCreateBulk {
	return &ApexCustomerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApexCustomerClient) MapCreateBulk(slice any, setFunc func(*ApexCustomerCreate, int)) *ApexCustomerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApexCustomerCreateBulk{err: fmt.Errorf("calling to ApexCustomerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApexCustomerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApexCustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApexCustomer.
func (c *ApexCustomerClient) Update() *ApexCustomerUpdate {
	mutation := newApexCustomerMutation(c.config, OpUpdate)
	return &ApexCustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApexCustomerClient) UpdateOne(ac *ApexCustomer) *ApexCustomerUpdateOne {
	mutation := newApexCustomerMutation(c.config, OpUpdateOne, withApexCustomer(ac))
	return &ApexCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApexCustomerClient) UpdateOneID(id string) *ApexCustomerUpdateOne {
	mutation := newApexCustomerMutation(c.config, OpUpdateOne, withApexCustomerID(id))
	return &ApexCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApexCustomer.
func (c *ApexCustomerClient) Delete() *ApexCustomerDelete {
	mutation := newApexCustomerMutation(c.config, OpDelete)
	return &ApexCustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApexCustomerClient) DeleteOne(ac *ApexCustomer) *ApexCustomerDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApexCustomerClient) DeleteOneID(id string) *ApexCustomerDeleteOne {
	builder := c.Delete().Where(apexcustomer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApexCustomerDeleteOne{builder}
}

// Query returns a query builder for ApexCustomer.
func (c *ApexCustomerClient) Query() *ApexCustomerQuery {
	return &ApexCustomerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApexCustomer},
		inters: c.Interceptors(),
	}
}

// Get returns a ApexCustomer entity by its id.
func (c *ApexCustomerClient) Get(ctx context.Context, id string) (*ApexCustomer, error) {
	return c.Query().Where(apexcustomer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApexCustomerClient) GetX(ctx context.Context, id string) *ApexCustomer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIdentities queries the identities edge of a ApexCustomer.
func (c *ApexCustomerClient) QueryIdentities(ac *ApexCustomer) *ApexCustomerIdentityQuery {
	query := (&ApexCustomerIdentityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apexcustomer.Table, apexcustomer.FieldID, id),
			sqlgraph.To(apexcustomeridentity.Table, apexcustomeridentity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apexcustomer.IdentitiesTable, apexcustomer.IdentitiesColumn),
		)
		schemaConfig := ac.schemaConfig
		step.To.Schema = schemaConfig.ApexCustomerIdentity
		step.Edge.Schema = schemaConfig.ApexCustomerIdentity
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApexCustomerClient) Hooks() []Hook {
	return c.hooks.ApexCustomer
}

// Interceptors returns the client interceptors.
func (c *ApexCustomerClient) Interceptors() []Interceptor {
	return c.inters.ApexCustomer
}

func (c *ApexCustomerClient) mutate(ctx context.Context, m *ApexCustomerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApexCustomerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApexCustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApexCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApexCustomerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown ApexCustomer mutation op: %q", m.Op())
	}
}

// ApexCustomerIdentityClient is a client for the ApexCustomerIdentity schema.
type ApexCustomerIdentityClient struct {
	config
}

// NewApexCustomerIdentityClient returns a client for the ApexCustomerIdentity from the given config.
func NewApexCustomerIdentityClient(c config) *ApexCustomerIdentityClient {
	return &ApexCustomerIdentityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apexcustomeridentity.Hooks(f(g(h())))`.
func (c *ApexCustomerIdentityClient) Use(hooks ...Hook) {
	c.hooks.ApexCustomerIdentity = append(c.hooks.ApexCustomerIdentity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apexcustomeridentity.Intercept(f(g(h())))`.
func (c *ApexCustomerIdentityClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApexCustomerIdentity = append(c.inters.ApexCustomerIdentity, interceptors...)
}

// Create returns a builder for creating a ApexCustomerIdentity entity.
func (c *ApexCustomerIdentityClient) Create() *ApexCustomerIdentityCreate {
	mutation := newApexCustomerIdentityMutation(c.config, OpCreate)
	return &ApexCustomerIdentityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApexCustomerIdentity entities.
func (c *ApexCustomerIdentityClient) CreateBulk(builders ...*ApexCustomerIdentityCreate) *ApexCustomerIdentityCreateBulk {
	return &ApexCustomerIdentityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApexCustomerIdentityClient) MapCreateBulk(slice any, setFunc func(*ApexCustomerIdentityCreate, int)) *ApexCustomerIdentityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApexCustomerIdentityCreateBulk{err: fmt.Errorf("calling to ApexCustomerIdentityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApexCustomerIdentityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApexCustomerIdentityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApexCustomerIdentity.
func (c *ApexCustomerIdentityClient) Update() *ApexCustomerIdentityUpdate {
	mutation := newApexCustomerIdentityMutation(c.config, OpUpdate)
	return &ApexCustomerIdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApexCustomerIdentityClient) UpdateOne(aci *ApexCustomerIdentity) *ApexCustomerIdentityUpdateOne {
	mutation := newApexCustomerIdentityMutation(c.config, OpUpdateOne, withApexCustomerIdentity(aci))
	return &ApexCustomerIdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApexCustomerIdentityClient) UpdateOneID(id string) *ApexCustomerIdentityUpdateOne {
	mutation := newApexCustomerIdentityMutation(c.config, OpUpdateOne, withApexCustomerIdentityID(id))
	return &ApexCustomerIdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApexCustomerIdentity.
func (c *ApexCustomerIdentityClient) Delete() *ApexCustomerIdentityDelete {
	mutation := newApexCustomerIdentityMutation(c.config, OpDelete)
	return &ApexCustomerIdentityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApexCustomerIdentityClient) DeleteOne(aci *ApexCustomerIdentity) *ApexCustomerIdentityDeleteOne {
	return c.DeleteOneID(aci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApexCustomerIdentityClient) DeleteOneID(id string) *ApexCustomerIdentityDeleteOne {
	builder := c.Delete().Where(apexcustomeridentity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApexCustomerIdentityDeleteOne{builder}
}

// Query returns a query builder for ApexCustomerIdentity.
func (c *ApexCustomerIdentityClient) Query() *ApexCustomerIdentityQuery {
	return &ApexCustomerIdentityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApexCustomerIdentity},
		inters: c.Interceptors(),
	}
}

// Get returns a ApexCustomerIdentity entity by its id.
func (c *ApexCustomerIdentityClient) Get(ctx context.Context, id string) (*ApexCustomerIdentity, error) {
	return c.Query().Where(apexcustomeridentity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApexCustomerIdentityClient) GetX(ctx context.Context, id string) *ApexCustomerIdentity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a ApexCustomerIdentity.
func (c *ApexCustomerIdentityClient) QueryCustomer(aci *ApexCustomerIdentity) *ApexCustomerQuery {
	query := (&ApexCustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apexcustomeridentity.Table, apexcustomeridentity.FieldID, id),
			sqlgraph.To(apexcustomer.Table, apexcustomer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apexcustomeridentity.CustomerTable, apexcustomeridentity.CustomerColumn),
		)
		schemaConfig := aci.schemaConfig
		step.To.Schema = schemaConfig.ApexCustomer
		step.Edge.Schema = schemaConfig.ApexCustomerIdentity
		fromV = sqlgraph.Neighbors(aci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApexCustomerIdentityClient) Hooks() []Hook {
	return c.hooks.ApexCustomerIdentity
}

// Interceptors returns the client interceptors.
func (c *ApexCustomerIdentityClient) Interceptors() []Interceptor {
	return c.inters.ApexCustomerIdentity
}

func (c *ApexCustomerIdentityClient) mutate(ctx context.Context, m *ApexCustomerIdentityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApexCustomerIdentityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApexCustomerIdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApexCustomerIdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApexCustomerIdentityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown ApexCustomerIdentity mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ApexCustomer, ApexCustomerIdentity []ent.Hook
	}
	inters struct {
		ApexCustomer, ApexCustomerIdentity []ent.Interceptor
	}
)

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig = internal.SchemaConfig

// AlternateSchemas allows alternate schema names to be
// passed into ent operations.
func AlternateSchema(schemaConfig SchemaConfig) Option {
	return func(c *config) {
		c.schemaConfig = schemaConfig
	}
}

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
