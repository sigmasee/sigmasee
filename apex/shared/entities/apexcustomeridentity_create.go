// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomer"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomeridentity"
)

// ApexCustomerIdentityCreate is the builder for creating a ApexCustomerIdentity entity.
type ApexCustomerIdentityCreate struct {
	config
	mutation *ApexCustomerIdentityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmail sets the "email" field.
func (acic *ApexCustomerIdentityCreate) SetEmail(s string) *ApexCustomerIdentityCreate {
	acic.mutation.SetEmail(s)
	return acic
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (acic *ApexCustomerIdentityCreate) SetNillableEmail(s *string) *ApexCustomerIdentityCreate {
	if s != nil {
		acic.SetEmail(*s)
	}
	return acic
}

// SetEmailVerified sets the "email_verified" field.
func (acic *ApexCustomerIdentityCreate) SetEmailVerified(b bool) *ApexCustomerIdentityCreate {
	acic.mutation.SetEmailVerified(b)
	return acic
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (acic *ApexCustomerIdentityCreate) SetNillableEmailVerified(b *bool) *ApexCustomerIdentityCreate {
	if b != nil {
		acic.SetEmailVerified(*b)
	}
	return acic
}

// SetCreatedAt sets the "created_at" field.
func (acic *ApexCustomerIdentityCreate) SetCreatedAt(t time.Time) *ApexCustomerIdentityCreate {
	acic.mutation.SetCreatedAt(t)
	return acic
}

// SetModifiedAt sets the "modified_at" field.
func (acic *ApexCustomerIdentityCreate) SetModifiedAt(t time.Time) *ApexCustomerIdentityCreate {
	acic.mutation.SetModifiedAt(t)
	return acic
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (acic *ApexCustomerIdentityCreate) SetNillableModifiedAt(t *time.Time) *ApexCustomerIdentityCreate {
	if t != nil {
		acic.SetModifiedAt(*t)
	}
	return acic
}

// SetDeletedAt sets the "deleted_at" field.
func (acic *ApexCustomerIdentityCreate) SetDeletedAt(t time.Time) *ApexCustomerIdentityCreate {
	acic.mutation.SetDeletedAt(t)
	return acic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acic *ApexCustomerIdentityCreate) SetNillableDeletedAt(t *time.Time) *ApexCustomerIdentityCreate {
	if t != nil {
		acic.SetDeletedAt(*t)
	}
	return acic
}

// SetID sets the "id" field.
func (acic *ApexCustomerIdentityCreate) SetID(s string) *ApexCustomerIdentityCreate {
	acic.mutation.SetID(s)
	return acic
}

// SetCustomerID sets the "customer" edge to the ApexCustomer entity by ID.
func (acic *ApexCustomerIdentityCreate) SetCustomerID(id string) *ApexCustomerIdentityCreate {
	acic.mutation.SetCustomerID(id)
	return acic
}

// SetCustomer sets the "customer" edge to the ApexCustomer entity.
func (acic *ApexCustomerIdentityCreate) SetCustomer(a *ApexCustomer) *ApexCustomerIdentityCreate {
	return acic.SetCustomerID(a.ID)
}

// Mutation returns the ApexCustomerIdentityMutation object of the builder.
func (acic *ApexCustomerIdentityCreate) Mutation() *ApexCustomerIdentityMutation {
	return acic.mutation
}

// Save creates the ApexCustomerIdentity in the database.
func (acic *ApexCustomerIdentityCreate) Save(ctx context.Context) (*ApexCustomerIdentity, error) {
	return withHooks(ctx, acic.sqlSave, acic.mutation, acic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acic *ApexCustomerIdentityCreate) SaveX(ctx context.Context) *ApexCustomerIdentity {
	v, err := acic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acic *ApexCustomerIdentityCreate) Exec(ctx context.Context) error {
	_, err := acic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acic *ApexCustomerIdentityCreate) ExecX(ctx context.Context) {
	if err := acic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acic *ApexCustomerIdentityCreate) check() error {
	if _, ok := acic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entities: missing required field "ApexCustomerIdentity.created_at"`)}
	}
	if _, ok := acic.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`entities: missing required edge "ApexCustomerIdentity.customer"`)}
	}
	return nil
}

func (acic *ApexCustomerIdentityCreate) sqlSave(ctx context.Context) (*ApexCustomerIdentity, error) {
	if err := acic.check(); err != nil {
		return nil, err
	}
	_node, _spec := acic.createSpec()
	if err := sqlgraph.CreateNode(ctx, acic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ApexCustomerIdentity.ID type: %T", _spec.ID.Value)
		}
	}
	acic.mutation.id = &_node.ID
	acic.mutation.done = true
	return _node, nil
}

func (acic *ApexCustomerIdentityCreate) createSpec() (*ApexCustomerIdentity, *sqlgraph.CreateSpec) {
	var (
		_node = &ApexCustomerIdentity{config: acic.config}
		_spec = sqlgraph.NewCreateSpec(apexcustomeridentity.Table, sqlgraph.NewFieldSpec(apexcustomeridentity.FieldID, field.TypeString))
	)
	_spec.Schema = acic.schemaConfig.ApexCustomerIdentity
	_spec.OnConflict = acic.conflict
	if id, ok := acic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := acic.mutation.Email(); ok {
		_spec.SetField(apexcustomeridentity.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := acic.mutation.EmailVerified(); ok {
		_spec.SetField(apexcustomeridentity.FieldEmailVerified, field.TypeBool, value)
		_node.EmailVerified = value
	}
	if value, ok := acic.mutation.CreatedAt(); ok {
		_spec.SetField(apexcustomeridentity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := acic.mutation.ModifiedAt(); ok {
		_spec.SetField(apexcustomeridentity.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	if value, ok := acic.mutation.DeletedAt(); ok {
		_spec.SetField(apexcustomeridentity.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := acic.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apexcustomeridentity.CustomerTable,
			Columns: []string{apexcustomeridentity.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apexcustomer.FieldID, field.TypeString),
			},
		}
		edge.Schema = acic.schemaConfig.ApexCustomerIdentity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.apex_customer_identities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApexCustomerIdentity.Create().
//		SetEmail(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApexCustomerIdentityUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (acic *ApexCustomerIdentityCreate) OnConflict(opts ...sql.ConflictOption) *ApexCustomerIdentityUpsertOne {
	acic.conflict = opts
	return &ApexCustomerIdentityUpsertOne{
		create: acic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApexCustomerIdentity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acic *ApexCustomerIdentityCreate) OnConflictColumns(columns ...string) *ApexCustomerIdentityUpsertOne {
	acic.conflict = append(acic.conflict, sql.ConflictColumns(columns...))
	return &ApexCustomerIdentityUpsertOne{
		create: acic,
	}
}

type (
	// ApexCustomerIdentityUpsertOne is the builder for "upsert"-ing
	//  one ApexCustomerIdentity node.
	ApexCustomerIdentityUpsertOne struct {
		create *ApexCustomerIdentityCreate
	}

	// ApexCustomerIdentityUpsert is the "OnConflict" setter.
	ApexCustomerIdentityUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmail sets the "email" field.
func (u *ApexCustomerIdentityUpsert) SetEmail(v string) *ApexCustomerIdentityUpsert {
	u.Set(apexcustomeridentity.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsert) UpdateEmail() *ApexCustomerIdentityUpsert {
	u.SetExcluded(apexcustomeridentity.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *ApexCustomerIdentityUpsert) ClearEmail() *ApexCustomerIdentityUpsert {
	u.SetNull(apexcustomeridentity.FieldEmail)
	return u
}

// SetEmailVerified sets the "email_verified" field.
func (u *ApexCustomerIdentityUpsert) SetEmailVerified(v bool) *ApexCustomerIdentityUpsert {
	u.Set(apexcustomeridentity.FieldEmailVerified, v)
	return u
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsert) UpdateEmailVerified() *ApexCustomerIdentityUpsert {
	u.SetExcluded(apexcustomeridentity.FieldEmailVerified)
	return u
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (u *ApexCustomerIdentityUpsert) ClearEmailVerified() *ApexCustomerIdentityUpsert {
	u.SetNull(apexcustomeridentity.FieldEmailVerified)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ApexCustomerIdentityUpsert) SetCreatedAt(v time.Time) *ApexCustomerIdentityUpsert {
	u.Set(apexcustomeridentity.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsert) UpdateCreatedAt() *ApexCustomerIdentityUpsert {
	u.SetExcluded(apexcustomeridentity.FieldCreatedAt)
	return u
}

// SetModifiedAt sets the "modified_at" field.
func (u *ApexCustomerIdentityUpsert) SetModifiedAt(v time.Time) *ApexCustomerIdentityUpsert {
	u.Set(apexcustomeridentity.FieldModifiedAt, v)
	return u
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsert) UpdateModifiedAt() *ApexCustomerIdentityUpsert {
	u.SetExcluded(apexcustomeridentity.FieldModifiedAt)
	return u
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *ApexCustomerIdentityUpsert) ClearModifiedAt() *ApexCustomerIdentityUpsert {
	u.SetNull(apexcustomeridentity.FieldModifiedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApexCustomerIdentityUpsert) SetDeletedAt(v time.Time) *ApexCustomerIdentityUpsert {
	u.Set(apexcustomeridentity.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsert) UpdateDeletedAt() *ApexCustomerIdentityUpsert {
	u.SetExcluded(apexcustomeridentity.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApexCustomerIdentityUpsert) ClearDeletedAt() *ApexCustomerIdentityUpsert {
	u.SetNull(apexcustomeridentity.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ApexCustomerIdentity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apexcustomeridentity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApexCustomerIdentityUpsertOne) UpdateNewValues() *ApexCustomerIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apexcustomeridentity.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApexCustomerIdentity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ApexCustomerIdentityUpsertOne) Ignore() *ApexCustomerIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApexCustomerIdentityUpsertOne) DoNothing() *ApexCustomerIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApexCustomerIdentityCreate.OnConflict
// documentation for more info.
func (u *ApexCustomerIdentityUpsertOne) Update(set func(*ApexCustomerIdentityUpsert)) *ApexCustomerIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApexCustomerIdentityUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *ApexCustomerIdentityUpsertOne) SetEmail(v string) *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsertOne) UpdateEmail() *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *ApexCustomerIdentityUpsertOne) ClearEmail() *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.ClearEmail()
	})
}

// SetEmailVerified sets the "email_verified" field.
func (u *ApexCustomerIdentityUpsertOne) SetEmailVerified(v bool) *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.SetEmailVerified(v)
	})
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsertOne) UpdateEmailVerified() *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.UpdateEmailVerified()
	})
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (u *ApexCustomerIdentityUpsertOne) ClearEmailVerified() *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.ClearEmailVerified()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ApexCustomerIdentityUpsertOne) SetCreatedAt(v time.Time) *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsertOne) UpdateCreatedAt() *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *ApexCustomerIdentityUpsertOne) SetModifiedAt(v time.Time) *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsertOne) UpdateModifiedAt() *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.UpdateModifiedAt()
	})
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *ApexCustomerIdentityUpsertOne) ClearModifiedAt() *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.ClearModifiedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApexCustomerIdentityUpsertOne) SetDeletedAt(v time.Time) *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsertOne) UpdateDeletedAt() *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApexCustomerIdentityUpsertOne) ClearDeletedAt() *ApexCustomerIdentityUpsertOne {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *ApexCustomerIdentityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for ApexCustomerIdentityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApexCustomerIdentityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ApexCustomerIdentityUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: ApexCustomerIdentityUpsertOne.ID is not supported by MySQL driver. Use ApexCustomerIdentityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ApexCustomerIdentityUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ApexCustomerIdentityCreateBulk is the builder for creating many ApexCustomerIdentity entities in bulk.
type ApexCustomerIdentityCreateBulk struct {
	config
	err      error
	builders []*ApexCustomerIdentityCreate
	conflict []sql.ConflictOption
}

// Save creates the ApexCustomerIdentity entities in the database.
func (acicb *ApexCustomerIdentityCreateBulk) Save(ctx context.Context) ([]*ApexCustomerIdentity, error) {
	if acicb.err != nil {
		return nil, acicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acicb.builders))
	nodes := make([]*ApexCustomerIdentity, len(acicb.builders))
	mutators := make([]Mutator, len(acicb.builders))
	for i := range acicb.builders {
		func(i int, root context.Context) {
			builder := acicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApexCustomerIdentityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acicb *ApexCustomerIdentityCreateBulk) SaveX(ctx context.Context) []*ApexCustomerIdentity {
	v, err := acicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acicb *ApexCustomerIdentityCreateBulk) Exec(ctx context.Context) error {
	_, err := acicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acicb *ApexCustomerIdentityCreateBulk) ExecX(ctx context.Context) {
	if err := acicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApexCustomerIdentity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApexCustomerIdentityUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (acicb *ApexCustomerIdentityCreateBulk) OnConflict(opts ...sql.ConflictOption) *ApexCustomerIdentityUpsertBulk {
	acicb.conflict = opts
	return &ApexCustomerIdentityUpsertBulk{
		create: acicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApexCustomerIdentity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acicb *ApexCustomerIdentityCreateBulk) OnConflictColumns(columns ...string) *ApexCustomerIdentityUpsertBulk {
	acicb.conflict = append(acicb.conflict, sql.ConflictColumns(columns...))
	return &ApexCustomerIdentityUpsertBulk{
		create: acicb,
	}
}

// ApexCustomerIdentityUpsertBulk is the builder for "upsert"-ing
// a bulk of ApexCustomerIdentity nodes.
type ApexCustomerIdentityUpsertBulk struct {
	create *ApexCustomerIdentityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ApexCustomerIdentity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apexcustomeridentity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApexCustomerIdentityUpsertBulk) UpdateNewValues() *ApexCustomerIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apexcustomeridentity.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApexCustomerIdentity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ApexCustomerIdentityUpsertBulk) Ignore() *ApexCustomerIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApexCustomerIdentityUpsertBulk) DoNothing() *ApexCustomerIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApexCustomerIdentityCreateBulk.OnConflict
// documentation for more info.
func (u *ApexCustomerIdentityUpsertBulk) Update(set func(*ApexCustomerIdentityUpsert)) *ApexCustomerIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApexCustomerIdentityUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *ApexCustomerIdentityUpsertBulk) SetEmail(v string) *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsertBulk) UpdateEmail() *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *ApexCustomerIdentityUpsertBulk) ClearEmail() *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.ClearEmail()
	})
}

// SetEmailVerified sets the "email_verified" field.
func (u *ApexCustomerIdentityUpsertBulk) SetEmailVerified(v bool) *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.SetEmailVerified(v)
	})
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsertBulk) UpdateEmailVerified() *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.UpdateEmailVerified()
	})
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (u *ApexCustomerIdentityUpsertBulk) ClearEmailVerified() *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.ClearEmailVerified()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ApexCustomerIdentityUpsertBulk) SetCreatedAt(v time.Time) *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsertBulk) UpdateCreatedAt() *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *ApexCustomerIdentityUpsertBulk) SetModifiedAt(v time.Time) *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsertBulk) UpdateModifiedAt() *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.UpdateModifiedAt()
	})
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *ApexCustomerIdentityUpsertBulk) ClearModifiedAt() *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.ClearModifiedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApexCustomerIdentityUpsertBulk) SetDeletedAt(v time.Time) *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApexCustomerIdentityUpsertBulk) UpdateDeletedAt() *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApexCustomerIdentityUpsertBulk) ClearDeletedAt() *ApexCustomerIdentityUpsertBulk {
	return u.Update(func(s *ApexCustomerIdentityUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *ApexCustomerIdentityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the ApexCustomerIdentityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for ApexCustomerIdentityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApexCustomerIdentityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
