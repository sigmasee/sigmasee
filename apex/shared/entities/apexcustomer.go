// Code generated by ent, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sigmasee/sigmasee/apex/shared/entities/apexcustomer"
)

// ApexCustomer is the model entity for the ApexCustomer schema.
type ApexCustomer struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// EventRaisedAt holds the value of the "event_raised_at" field.
	EventRaisedAt time.Time `json:"event_raised_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// GivenName holds the value of the "given_name" field.
	GivenName string `json:"given_name,omitempty"`
	// MiddleName holds the value of the "middle_name" field.
	MiddleName string `json:"middle_name,omitempty"`
	// FamilyName holds the value of the "family_name" field.
	FamilyName string `json:"family_name,omitempty"`
	// PhotoURL holds the value of the "photo_url" field.
	PhotoURL string `json:"photo_url,omitempty"`
	// PhotoURL24 holds the value of the "photo_url_24" field.
	PhotoURL24 string `json:"photo_url_24,omitempty"`
	// PhotoURL32 holds the value of the "photo_url_32" field.
	PhotoURL32 string `json:"photo_url_32,omitempty"`
	// PhotoURL48 holds the value of the "photo_url_48" field.
	PhotoURL48 string `json:"photo_url_48,omitempty"`
	// PhotoURL72 holds the value of the "photo_url_72" field.
	PhotoURL72 string `json:"photo_url_72,omitempty"`
	// PhotoURL192 holds the value of the "photo_url_192" field.
	PhotoURL192 string `json:"photo_url_192,omitempty"`
	// PhotoURL512 holds the value of the "photo_url_512" field.
	PhotoURL512 string `json:"photo_url_512,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ModifiedAt holds the value of the "modified_at" field.
	ModifiedAt time.Time `json:"modified_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApexCustomerQuery when eager-loading is set.
	Edges        ApexCustomerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApexCustomerEdges holds the relations/edges for other nodes in the graph.
type ApexCustomerEdges struct {
	// Identities holds the value of the identities edge.
	Identities []*ApexCustomerIdentity `json:"identities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedIdentities map[string][]*ApexCustomerIdentity
}

// IdentitiesOrErr returns the Identities value or an error if the edge
// was not loaded in eager-loading.
func (e ApexCustomerEdges) IdentitiesOrErr() ([]*ApexCustomerIdentity, error) {
	if e.loadedTypes[0] {
		return e.Identities, nil
	}
	return nil, &NotLoadedError{edge: "identities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApexCustomer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apexcustomer.FieldID, apexcustomer.FieldName, apexcustomer.FieldGivenName, apexcustomer.FieldMiddleName, apexcustomer.FieldFamilyName, apexcustomer.FieldPhotoURL, apexcustomer.FieldPhotoURL24, apexcustomer.FieldPhotoURL32, apexcustomer.FieldPhotoURL48, apexcustomer.FieldPhotoURL72, apexcustomer.FieldPhotoURL192, apexcustomer.FieldPhotoURL512:
			values[i] = new(sql.NullString)
		case apexcustomer.FieldEventRaisedAt, apexcustomer.FieldCreatedAt, apexcustomer.FieldModifiedAt, apexcustomer.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApexCustomer fields.
func (ac *ApexCustomer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apexcustomer.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ac.ID = value.String
			}
		case apexcustomer.FieldEventRaisedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field event_raised_at", values[i])
			} else if value.Valid {
				ac.EventRaisedAt = value.Time
			}
		case apexcustomer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ac.Name = value.String
			}
		case apexcustomer.FieldGivenName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field given_name", values[i])
			} else if value.Valid {
				ac.GivenName = value.String
			}
		case apexcustomer.FieldMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field middle_name", values[i])
			} else if value.Valid {
				ac.MiddleName = value.String
			}
		case apexcustomer.FieldFamilyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field family_name", values[i])
			} else if value.Valid {
				ac.FamilyName = value.String
			}
		case apexcustomer.FieldPhotoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url", values[i])
			} else if value.Valid {
				ac.PhotoURL = value.String
			}
		case apexcustomer.FieldPhotoURL24:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url_24", values[i])
			} else if value.Valid {
				ac.PhotoURL24 = value.String
			}
		case apexcustomer.FieldPhotoURL32:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url_32", values[i])
			} else if value.Valid {
				ac.PhotoURL32 = value.String
			}
		case apexcustomer.FieldPhotoURL48:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url_48", values[i])
			} else if value.Valid {
				ac.PhotoURL48 = value.String
			}
		case apexcustomer.FieldPhotoURL72:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url_72", values[i])
			} else if value.Valid {
				ac.PhotoURL72 = value.String
			}
		case apexcustomer.FieldPhotoURL192:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url_192", values[i])
			} else if value.Valid {
				ac.PhotoURL192 = value.String
			}
		case apexcustomer.FieldPhotoURL512:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url_512", values[i])
			} else if value.Valid {
				ac.PhotoURL512 = value.String
			}
		case apexcustomer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ac.CreatedAt = value.Time
			}
		case apexcustomer.FieldModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_at", values[i])
			} else if value.Valid {
				ac.ModifiedAt = value.Time
			}
		case apexcustomer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ac.DeletedAt = value.Time
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApexCustomer.
// This includes values selected through modifiers, order, etc.
func (ac *ApexCustomer) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// QueryIdentities queries the "identities" edge of the ApexCustomer entity.
func (ac *ApexCustomer) QueryIdentities() *ApexCustomerIdentityQuery {
	return NewApexCustomerClient(ac.config).QueryIdentities(ac)
}

// Update returns a builder for updating this ApexCustomer.
// Note that you need to call ApexCustomer.Unwrap() before calling this method if this ApexCustomer
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *ApexCustomer) Update() *ApexCustomerUpdateOne {
	return NewApexCustomerClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the ApexCustomer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *ApexCustomer) Unwrap() *ApexCustomer {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("entities: ApexCustomer is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *ApexCustomer) String() string {
	var builder strings.Builder
	builder.WriteString("ApexCustomer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("event_raised_at=")
	builder.WriteString(ac.EventRaisedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ac.Name)
	builder.WriteString(", ")
	builder.WriteString("given_name=")
	builder.WriteString(ac.GivenName)
	builder.WriteString(", ")
	builder.WriteString("middle_name=")
	builder.WriteString(ac.MiddleName)
	builder.WriteString(", ")
	builder.WriteString("family_name=")
	builder.WriteString(ac.FamilyName)
	builder.WriteString(", ")
	builder.WriteString("photo_url=")
	builder.WriteString(ac.PhotoURL)
	builder.WriteString(", ")
	builder.WriteString("photo_url_24=")
	builder.WriteString(ac.PhotoURL24)
	builder.WriteString(", ")
	builder.WriteString("photo_url_32=")
	builder.WriteString(ac.PhotoURL32)
	builder.WriteString(", ")
	builder.WriteString("photo_url_48=")
	builder.WriteString(ac.PhotoURL48)
	builder.WriteString(", ")
	builder.WriteString("photo_url_72=")
	builder.WriteString(ac.PhotoURL72)
	builder.WriteString(", ")
	builder.WriteString("photo_url_192=")
	builder.WriteString(ac.PhotoURL192)
	builder.WriteString(", ")
	builder.WriteString("photo_url_512=")
	builder.WriteString(ac.PhotoURL512)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modified_at=")
	builder.WriteString(ac.ModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ac.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedIdentities returns the Identities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ac *ApexCustomer) NamedIdentities(name string) ([]*ApexCustomerIdentity, error) {
	if ac.Edges.namedIdentities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ac.Edges.namedIdentities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ac *ApexCustomer) appendNamedIdentities(name string, edges ...*ApexCustomerIdentity) {
	if ac.Edges.namedIdentities == nil {
		ac.Edges.namedIdentities = make(map[string][]*ApexCustomerIdentity)
	}
	if len(edges) == 0 {
		ac.Edges.namedIdentities[name] = []*ApexCustomerIdentity{}
	} else {
		ac.Edges.namedIdentities[name] = append(ac.Edges.namedIdentities[name], edges...)
	}
}

// ApexCustomers is a parsable slice of ApexCustomer.
type ApexCustomers []*ApexCustomer
